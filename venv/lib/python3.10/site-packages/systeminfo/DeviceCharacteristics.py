# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceCharacteristics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceCharacteristics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceCharacteristics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceCharacteristics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceCharacteristics
    def Cpu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Cpu import Cpu
            obj = Cpu()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeviceCharacteristics
    def System(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.System import System
            obj = System()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeviceCharacteristics
    def Memory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Memory import Memory
            obj = Memory()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeviceCharacteristics
    def Kernel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Kernel import Kernel
            obj = Kernel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeviceCharacteristics
    def Connectivity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Connectivity import Connectivity
            obj = Connectivity()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeviceCharacteristics
    def Storage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Storages import Storages
            obj = Storages()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DeviceCharacteristicsStart(builder): builder.StartObject(6)
def Start(builder):
    return DeviceCharacteristicsStart(builder)
def DeviceCharacteristicsAddCpu(builder, cpu): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cpu), 0)
def AddCpu(builder, cpu):
    return DeviceCharacteristicsAddCpu(builder, cpu)
def DeviceCharacteristicsAddSystem(builder, system): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(system), 0)
def AddSystem(builder, system):
    return DeviceCharacteristicsAddSystem(builder, system)
def DeviceCharacteristicsAddMemory(builder, memory): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(memory), 0)
def AddMemory(builder, memory):
    return DeviceCharacteristicsAddMemory(builder, memory)
def DeviceCharacteristicsAddKernel(builder, kernel): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(kernel), 0)
def AddKernel(builder, kernel):
    return DeviceCharacteristicsAddKernel(builder, kernel)
def DeviceCharacteristicsAddConnectivity(builder, connectivity): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(connectivity), 0)
def AddConnectivity(builder, connectivity):
    return DeviceCharacteristicsAddConnectivity(builder, connectivity)
def DeviceCharacteristicsAddStorage(builder, storage): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(storage), 0)
def AddStorage(builder, storage):
    return DeviceCharacteristicsAddStorage(builder, storage)
def DeviceCharacteristicsEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceCharacteristicsEnd(builder)
import systeminfo.Connectivity
import systeminfo.Cpu
import systeminfo.Kernel
import systeminfo.Memory
import systeminfo.Storages
import systeminfo.System
try:
    from typing import Optional
except:
    pass

class DeviceCharacteristicsT(object):

    # DeviceCharacteristicsT
    def __init__(self):
        self.cpu = None  # type: Optional[systeminfo.Cpu.CpuT]
        self.system = None  # type: Optional[systeminfo.System.SystemT]
        self.memory = None  # type: Optional[systeminfo.Memory.MemoryT]
        self.kernel = None  # type: Optional[systeminfo.Kernel.KernelT]
        self.connectivity = None  # type: Optional[systeminfo.Connectivity.ConnectivityT]
        self.storage = None  # type: Optional[systeminfo.Storages.StoragesT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceCharacteristics = DeviceCharacteristics()
        deviceCharacteristics.Init(buf, pos)
        return cls.InitFromObj(deviceCharacteristics)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceCharacteristics):
        x = DeviceCharacteristicsT()
        x._UnPack(deviceCharacteristics)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cpu == other.cpu and \
            self.system == other.system and \
            self.memory == other.memory and \
            self.kernel == other.kernel and \
            self.connectivity == other.connectivity and \
            self.storage == other.storage

    # DeviceCharacteristicsT
    def _UnPack(self, deviceCharacteristics):
        if deviceCharacteristics is None:
            return
        if deviceCharacteristics.Cpu() is not None:
            self.cpu = systeminfo.Cpu.CpuT.InitFromObj(deviceCharacteristics.Cpu())
        if deviceCharacteristics.System() is not None:
            self.system = systeminfo.System.SystemT.InitFromObj(deviceCharacteristics.System())
        if deviceCharacteristics.Memory() is not None:
            self.memory = systeminfo.Memory.MemoryT.InitFromObj(deviceCharacteristics.Memory())
        if deviceCharacteristics.Kernel() is not None:
            self.kernel = systeminfo.Kernel.KernelT.InitFromObj(deviceCharacteristics.Kernel())
        if deviceCharacteristics.Connectivity() is not None:
            self.connectivity = systeminfo.Connectivity.ConnectivityT.InitFromObj(deviceCharacteristics.Connectivity())
        if deviceCharacteristics.Storage() is not None:
            self.storage = systeminfo.Storages.StoragesT.InitFromObj(deviceCharacteristics.Storage())

    # DeviceCharacteristicsT
    def Pack(self, builder):
        if self.cpu is not None:
            cpu = self.cpu.Pack(builder)
        if self.system is not None:
            system = self.system.Pack(builder)
        if self.memory is not None:
            memory = self.memory.Pack(builder)
        if self.kernel is not None:
            kernel = self.kernel.Pack(builder)
        if self.connectivity is not None:
            connectivity = self.connectivity.Pack(builder)
        if self.storage is not None:
            storage = self.storage.Pack(builder)
        DeviceCharacteristicsStart(builder)
        if self.cpu is not None:
            DeviceCharacteristicsAddCpu(builder, cpu)
        if self.system is not None:
            DeviceCharacteristicsAddSystem(builder, system)
        if self.memory is not None:
            DeviceCharacteristicsAddMemory(builder, memory)
        if self.kernel is not None:
            DeviceCharacteristicsAddKernel(builder, kernel)
        if self.connectivity is not None:
            DeviceCharacteristicsAddConnectivity(builder, connectivity)
        if self.storage is not None:
            DeviceCharacteristicsAddStorage(builder, storage)
        deviceCharacteristics = DeviceCharacteristicsEnd(builder)
        return deviceCharacteristics
