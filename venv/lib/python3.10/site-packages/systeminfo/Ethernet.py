# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Ethernet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Ethernet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEthernet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Ethernet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Ethernet
    def Ports(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EthernetStart(builder): builder.StartObject(1)
def Start(builder):
    return EthernetStart(builder)
def EthernetAddPorts(builder, ports): builder.PrependInt32Slot(0, ports, 0)
def AddPorts(builder, ports):
    return EthernetAddPorts(builder, ports)
def EthernetEnd(builder): return builder.EndObject()
def End(builder):
    return EthernetEnd(builder)

class EthernetT(object):

    # EthernetT
    def __init__(self):
        self.ports = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ethernet = Ethernet()
        ethernet.Init(buf, pos)
        return cls.InitFromObj(ethernet)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ethernet):
        x = EthernetT()
        x._UnPack(ethernet)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ports == other.ports

    # EthernetT
    def _UnPack(self, ethernet):
        if ethernet is None:
            return
        self.ports = ethernet.Ports()

    # EthernetT
    def Pack(self, builder):
        EthernetStart(builder)
        EthernetAddPorts(builder, self.ports)
        ethernet = EthernetEnd(builder)
        return ethernet
