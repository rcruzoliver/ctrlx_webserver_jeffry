# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Connectivity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Connectivity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConnectivity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Connectivity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Connectivity
    def Ethernet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Ethernet import Ethernet
            obj = Ethernet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ConnectivityStart(builder): builder.StartObject(1)
def Start(builder):
    return ConnectivityStart(builder)
def ConnectivityAddEthernet(builder, ethernet): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ethernet), 0)
def AddEthernet(builder, ethernet):
    return ConnectivityAddEthernet(builder, ethernet)
def ConnectivityEnd(builder): return builder.EndObject()
def End(builder):
    return ConnectivityEnd(builder)
import systeminfo.Ethernet
try:
    from typing import Optional
except:
    pass

class ConnectivityT(object):

    # ConnectivityT
    def __init__(self):
        self.ethernet = None  # type: Optional[systeminfo.Ethernet.EthernetT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        connectivity = Connectivity()
        connectivity.Init(buf, pos)
        return cls.InitFromObj(connectivity)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, connectivity):
        x = ConnectivityT()
        x._UnPack(connectivity)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ethernet == other.ethernet

    # ConnectivityT
    def _UnPack(self, connectivity):
        if connectivity is None:
            return
        if connectivity.Ethernet() is not None:
            self.ethernet = systeminfo.Ethernet.EthernetT.InitFromObj(connectivity.Ethernet())

    # ConnectivityT
    def Pack(self, builder):
        if self.ethernet is not None:
            ethernet = self.ethernet.Pack(builder)
        ConnectivityStart(builder)
        if self.ethernet is not None:
            ConnectivityAddEthernet(builder, ethernet)
        connectivity = ConnectivityEnd(builder)
        return connectivity
