# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class System(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = System()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSystem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # System
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # System
    def Virtualized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # System
    def HardwareVendor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # System
    def Tpm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # System
    def Security(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.Security import Security
            obj = Security()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # System
    def ImageUpdateCapable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SystemStart(builder): builder.StartObject(5)
def Start(builder):
    return SystemStart(builder)
def SystemAddVirtualized(builder, virtualized): builder.PrependBoolSlot(0, virtualized, 0)
def AddVirtualized(builder, virtualized):
    return SystemAddVirtualized(builder, virtualized)
def SystemAddHardwareVendor(builder, hardwareVendor): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hardwareVendor), 0)
def AddHardwareVendor(builder, hardwareVendor):
    return SystemAddHardwareVendor(builder, hardwareVendor)
def SystemAddTpm(builder, tpm): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tpm), 0)
def AddTpm(builder, tpm):
    return SystemAddTpm(builder, tpm)
def SystemAddSecurity(builder, security): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(security), 0)
def AddSecurity(builder, security):
    return SystemAddSecurity(builder, security)
def SystemAddImageUpdateCapable(builder, imageUpdateCapable): builder.PrependBoolSlot(4, imageUpdateCapable, 0)
def AddImageUpdateCapable(builder, imageUpdateCapable):
    return SystemAddImageUpdateCapable(builder, imageUpdateCapable)
def SystemEnd(builder): return builder.EndObject()
def End(builder):
    return SystemEnd(builder)
import systeminfo.Security
try:
    from typing import Optional
except:
    pass

class SystemT(object):

    # SystemT
    def __init__(self):
        self.virtualized = False  # type: bool
        self.hardwareVendor = None  # type: str
        self.tpm = None  # type: str
        self.security = None  # type: Optional[systeminfo.Security.SecurityT]
        self.imageUpdateCapable = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        system = System()
        system.Init(buf, pos)
        return cls.InitFromObj(system)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, system):
        x = SystemT()
        x._UnPack(system)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.virtualized == other.virtualized and \
            self.hardwareVendor == other.hardwareVendor and \
            self.tpm == other.tpm and \
            self.security == other.security and \
            self.imageUpdateCapable == other.imageUpdateCapable

    # SystemT
    def _UnPack(self, system):
        if system is None:
            return
        self.virtualized = system.Virtualized()
        self.hardwareVendor = system.HardwareVendor()
        self.tpm = system.Tpm()
        if system.Security() is not None:
            self.security = systeminfo.Security.SecurityT.InitFromObj(system.Security())
        self.imageUpdateCapable = system.ImageUpdateCapable()

    # SystemT
    def Pack(self, builder):
        if self.hardwareVendor is not None:
            hardwareVendor = builder.CreateString(self.hardwareVendor)
        if self.tpm is not None:
            tpm = builder.CreateString(self.tpm)
        if self.security is not None:
            security = self.security.Pack(builder)
        SystemStart(builder)
        SystemAddVirtualized(builder, self.virtualized)
        if self.hardwareVendor is not None:
            SystemAddHardwareVendor(builder, hardwareVendor)
        if self.tpm is not None:
            SystemAddTpm(builder, tpm)
        if self.security is not None:
            SystemAddSecurity(builder, security)
        SystemAddImageUpdateCapable(builder, self.imageUpdateCapable)
        system = SystemEnd(builder)
        return system
