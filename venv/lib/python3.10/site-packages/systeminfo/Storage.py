# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Storage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Storage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStorage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Storage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Storage
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def WriteSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Storage
    def Removable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def StorageStart(builder): builder.StartObject(4)
def Start(builder):
    return StorageStart(builder)
def StorageAddType(builder, type): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return StorageAddType(builder, type)
def StorageAddWriteSupport(builder, writeSupport): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(writeSupport), 0)
def AddWriteSupport(builder, writeSupport):
    return StorageAddWriteSupport(builder, writeSupport)
def StorageAddSize(builder, size): builder.PrependInt64Slot(2, size, 0)
def AddSize(builder, size):
    return StorageAddSize(builder, size)
def StorageAddRemovable(builder, removable): builder.PrependBoolSlot(3, removable, 0)
def AddRemovable(builder, removable):
    return StorageAddRemovable(builder, removable)
def StorageEnd(builder): return builder.EndObject()
def End(builder):
    return StorageEnd(builder)

class StorageT(object):

    # StorageT
    def __init__(self):
        self.type = None  # type: str
        self.writeSupport = None  # type: str
        self.size = 0  # type: int
        self.removable = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        storage = Storage()
        storage.Init(buf, pos)
        return cls.InitFromObj(storage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, storage):
        x = StorageT()
        x._UnPack(storage)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type and \
            self.writeSupport == other.writeSupport and \
            self.size == other.size and \
            self.removable == other.removable

    # StorageT
    def _UnPack(self, storage):
        if storage is None:
            return
        self.type = storage.Type()
        self.writeSupport = storage.WriteSupport()
        self.size = storage.Size()
        self.removable = storage.Removable()

    # StorageT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.writeSupport is not None:
            writeSupport = builder.CreateString(self.writeSupport)
        StorageStart(builder)
        if self.type is not None:
            StorageAddType(builder, type)
        if self.writeSupport is not None:
            StorageAddWriteSupport(builder, writeSupport)
        StorageAddSize(builder, self.size)
        StorageAddRemovable(builder, self.removable)
        storage = StorageEnd(builder)
        return storage
