# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypePlate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypePlate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypePlate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypePlate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypePlate
    def TypePlateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def StoreBrandId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def StoreModelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def StoreSerialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def Manufacturer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def CtrlXdeviceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def MaterialIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def MaterialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def BiosVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def TypeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def HardwareRevision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TypePlate
    def SecondarySerialNumbers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from systeminfo.SecondarySerialNumber import SecondarySerialNumber
            obj = SecondarySerialNumber()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TypePlate
    def SecondarySerialNumbersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TypePlate
    def SecondarySerialNumbersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def TypePlateStart(builder): builder.StartObject(13)
def Start(builder):
    return TypePlateStart(builder)
def TypePlateAddTypePlateType(builder, typePlateType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(typePlateType), 0)
def AddTypePlateType(builder, typePlateType):
    return TypePlateAddTypePlateType(builder, typePlateType)
def TypePlateAddStoreBrandId(builder, storeBrandId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(storeBrandId), 0)
def AddStoreBrandId(builder, storeBrandId):
    return TypePlateAddStoreBrandId(builder, storeBrandId)
def TypePlateAddStoreModelId(builder, storeModelId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storeModelId), 0)
def AddStoreModelId(builder, storeModelId):
    return TypePlateAddStoreModelId(builder, storeModelId)
def TypePlateAddStoreSerialId(builder, storeSerialId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storeSerialId), 0)
def AddStoreSerialId(builder, storeSerialId):
    return TypePlateAddStoreSerialId(builder, storeSerialId)
def TypePlateAddManufacturer(builder, manufacturer): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturer), 0)
def AddManufacturer(builder, manufacturer):
    return TypePlateAddManufacturer(builder, manufacturer)
def TypePlateAddSerialNumber(builder, serialNumber): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(serialNumber), 0)
def AddSerialNumber(builder, serialNumber):
    return TypePlateAddSerialNumber(builder, serialNumber)
def TypePlateAddCtrlXdeviceId(builder, ctrlXdeviceId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlXdeviceId), 0)
def AddCtrlXdeviceId(builder, ctrlXdeviceId):
    return TypePlateAddCtrlXdeviceId(builder, ctrlXdeviceId)
def TypePlateAddMaterialIndex(builder, materialIndex): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(materialIndex), 0)
def AddMaterialIndex(builder, materialIndex):
    return TypePlateAddMaterialIndex(builder, materialIndex)
def TypePlateAddMaterialNumber(builder, materialNumber): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(materialNumber), 0)
def AddMaterialNumber(builder, materialNumber):
    return TypePlateAddMaterialNumber(builder, materialNumber)
def TypePlateAddBiosVersion(builder, biosVersion): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(biosVersion), 0)
def AddBiosVersion(builder, biosVersion):
    return TypePlateAddBiosVersion(builder, biosVersion)
def TypePlateAddTypeCode(builder, typeCode): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(typeCode), 0)
def AddTypeCode(builder, typeCode):
    return TypePlateAddTypeCode(builder, typeCode)
def TypePlateAddHardwareRevision(builder, hardwareRevision): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hardwareRevision), 0)
def AddHardwareRevision(builder, hardwareRevision):
    return TypePlateAddHardwareRevision(builder, hardwareRevision)
def TypePlateAddSecondarySerialNumbers(builder, secondarySerialNumbers): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(secondarySerialNumbers), 0)
def AddSecondarySerialNumbers(builder, secondarySerialNumbers):
    return TypePlateAddSecondarySerialNumbers(builder, secondarySerialNumbers)
def TypePlateStartSecondarySerialNumbersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecondarySerialNumbersVector(builder, numElems):
    return TypePlateStartSecondarySerialNumbersVector(builder, numElems)
def TypePlateEnd(builder): return builder.EndObject()
def End(builder):
    return TypePlateEnd(builder)
import systeminfo.SecondarySerialNumber
try:
    from typing import List
except:
    pass

class TypePlateT(object):

    # TypePlateT
    def __init__(self):
        self.typePlateType = None  # type: str
        self.storeBrandId = None  # type: str
        self.storeModelId = None  # type: str
        self.storeSerialId = None  # type: str
        self.manufacturer = None  # type: str
        self.serialNumber = None  # type: str
        self.ctrlXdeviceId = None  # type: str
        self.materialIndex = None  # type: str
        self.materialNumber = None  # type: str
        self.biosVersion = None  # type: str
        self.typeCode = None  # type: str
        self.hardwareRevision = None  # type: str
        self.secondarySerialNumbers = None  # type: List[systeminfo.SecondarySerialNumber.SecondarySerialNumberT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typePlate = TypePlate()
        typePlate.Init(buf, pos)
        return cls.InitFromObj(typePlate)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typePlate):
        x = TypePlateT()
        x._UnPack(typePlate)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.typePlateType == other.typePlateType and \
            self.storeBrandId == other.storeBrandId and \
            self.storeModelId == other.storeModelId and \
            self.storeSerialId == other.storeSerialId and \
            self.manufacturer == other.manufacturer and \
            self.serialNumber == other.serialNumber and \
            self.ctrlXdeviceId == other.ctrlXdeviceId and \
            self.materialIndex == other.materialIndex and \
            self.materialNumber == other.materialNumber and \
            self.biosVersion == other.biosVersion and \
            self.typeCode == other.typeCode and \
            self.hardwareRevision == other.hardwareRevision and \
            self.secondarySerialNumbers == other.secondarySerialNumbers

    # TypePlateT
    def _UnPack(self, typePlate):
        if typePlate is None:
            return
        self.typePlateType = typePlate.TypePlateType()
        self.storeBrandId = typePlate.StoreBrandId()
        self.storeModelId = typePlate.StoreModelId()
        self.storeSerialId = typePlate.StoreSerialId()
        self.manufacturer = typePlate.Manufacturer()
        self.serialNumber = typePlate.SerialNumber()
        self.ctrlXdeviceId = typePlate.CtrlXdeviceId()
        self.materialIndex = typePlate.MaterialIndex()
        self.materialNumber = typePlate.MaterialNumber()
        self.biosVersion = typePlate.BiosVersion()
        self.typeCode = typePlate.TypeCode()
        self.hardwareRevision = typePlate.HardwareRevision()
        if not typePlate.SecondarySerialNumbersIsNone():
            self.secondarySerialNumbers = []
            for i in range(typePlate.SecondarySerialNumbersLength()):
                if typePlate.SecondarySerialNumbers(i) is None:
                    self.secondarySerialNumbers.append(None)
                else:
                    secondarySerialNumber_ = systeminfo.SecondarySerialNumber.SecondarySerialNumberT.InitFromObj(typePlate.SecondarySerialNumbers(i))
                    self.secondarySerialNumbers.append(secondarySerialNumber_)

    # TypePlateT
    def Pack(self, builder):
        if self.typePlateType is not None:
            typePlateType = builder.CreateString(self.typePlateType)
        if self.storeBrandId is not None:
            storeBrandId = builder.CreateString(self.storeBrandId)
        if self.storeModelId is not None:
            storeModelId = builder.CreateString(self.storeModelId)
        if self.storeSerialId is not None:
            storeSerialId = builder.CreateString(self.storeSerialId)
        if self.manufacturer is not None:
            manufacturer = builder.CreateString(self.manufacturer)
        if self.serialNumber is not None:
            serialNumber = builder.CreateString(self.serialNumber)
        if self.ctrlXdeviceId is not None:
            ctrlXdeviceId = builder.CreateString(self.ctrlXdeviceId)
        if self.materialIndex is not None:
            materialIndex = builder.CreateString(self.materialIndex)
        if self.materialNumber is not None:
            materialNumber = builder.CreateString(self.materialNumber)
        if self.biosVersion is not None:
            biosVersion = builder.CreateString(self.biosVersion)
        if self.typeCode is not None:
            typeCode = builder.CreateString(self.typeCode)
        if self.hardwareRevision is not None:
            hardwareRevision = builder.CreateString(self.hardwareRevision)
        if self.secondarySerialNumbers is not None:
            secondarySerialNumberslist = []
            for i in range(len(self.secondarySerialNumbers)):
                secondarySerialNumberslist.append(self.secondarySerialNumbers[i].Pack(builder))
            TypePlateStartSecondarySerialNumbersVector(builder, len(self.secondarySerialNumbers))
            for i in reversed(range(len(self.secondarySerialNumbers))):
                builder.PrependUOffsetTRelative(secondarySerialNumberslist[i])
            secondarySerialNumbers = builder.EndVector()
        TypePlateStart(builder)
        if self.typePlateType is not None:
            TypePlateAddTypePlateType(builder, typePlateType)
        if self.storeBrandId is not None:
            TypePlateAddStoreBrandId(builder, storeBrandId)
        if self.storeModelId is not None:
            TypePlateAddStoreModelId(builder, storeModelId)
        if self.storeSerialId is not None:
            TypePlateAddStoreSerialId(builder, storeSerialId)
        if self.manufacturer is not None:
            TypePlateAddManufacturer(builder, manufacturer)
        if self.serialNumber is not None:
            TypePlateAddSerialNumber(builder, serialNumber)
        if self.ctrlXdeviceId is not None:
            TypePlateAddCtrlXdeviceId(builder, ctrlXdeviceId)
        if self.materialIndex is not None:
            TypePlateAddMaterialIndex(builder, materialIndex)
        if self.materialNumber is not None:
            TypePlateAddMaterialNumber(builder, materialNumber)
        if self.biosVersion is not None:
            TypePlateAddBiosVersion(builder, biosVersion)
        if self.typeCode is not None:
            TypePlateAddTypeCode(builder, typeCode)
        if self.hardwareRevision is not None:
            TypePlateAddHardwareRevision(builder, hardwareRevision)
        if self.secondarySerialNumbers is not None:
            TypePlateAddSecondarySerialNumbers(builder, secondarySerialNumbers)
        typePlate = TypePlateEnd(builder)
        return typePlate
