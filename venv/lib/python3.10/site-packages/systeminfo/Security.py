# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Security(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Security()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecurity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Security
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Security
    def IntegrityDegraded(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SecurityStart(builder): builder.StartObject(1)
def Start(builder):
    return SecurityStart(builder)
def SecurityAddIntegrityDegraded(builder, integrityDegraded): builder.PrependBoolSlot(0, integrityDegraded, 0)
def AddIntegrityDegraded(builder, integrityDegraded):
    return SecurityAddIntegrityDegraded(builder, integrityDegraded)
def SecurityEnd(builder): return builder.EndObject()
def End(builder):
    return SecurityEnd(builder)

class SecurityT(object):

    # SecurityT
    def __init__(self):
        self.integrityDegraded = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        security = Security()
        security.Init(buf, pos)
        return cls.InitFromObj(security)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, security):
        x = SecurityT()
        x._UnPack(security)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.integrityDegraded == other.integrityDegraded

    # SecurityT
    def _UnPack(self, security):
        if security is None:
            return
        self.integrityDegraded = security.IntegrityDegraded()

    # SecurityT
    def Pack(self, builder):
        SecurityStart(builder)
        SecurityAddIntegrityDegraded(builder, self.integrityDegraded)
        security = SecurityEnd(builder)
        return security
