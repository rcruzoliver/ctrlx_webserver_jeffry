# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cores(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cores()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCores(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cores
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cores
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Cores
    def Isolated(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Cores
    def IsolatedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Cores
    def IsolatedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cores
    def IsolatedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Cores
    def Online(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Cores
    def OnlineAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Cores
    def OnlineLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cores
    def OnlineIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CoresStart(builder): builder.StartObject(3)
def Start(builder):
    return CoresStart(builder)
def CoresAddTotal(builder, total): builder.PrependInt32Slot(0, total, 0)
def AddTotal(builder, total):
    return CoresAddTotal(builder, total)
def CoresAddIsolated(builder, isolated): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(isolated), 0)
def AddIsolated(builder, isolated):
    return CoresAddIsolated(builder, isolated)
def CoresStartIsolatedVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartIsolatedVector(builder, numElems):
    return CoresStartIsolatedVector(builder, numElems)
def CoresAddOnline(builder, online): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(online), 0)
def AddOnline(builder, online):
    return CoresAddOnline(builder, online)
def CoresStartOnlineVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOnlineVector(builder, numElems):
    return CoresStartOnlineVector(builder, numElems)
def CoresEnd(builder): return builder.EndObject()
def End(builder):
    return CoresEnd(builder)
try:
    from typing import List
except:
    pass

class CoresT(object):

    # CoresT
    def __init__(self):
        self.total = 0  # type: int
        self.isolated = None  # type: List[int]
        self.online = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cores = Cores()
        cores.Init(buf, pos)
        return cls.InitFromObj(cores)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cores):
        x = CoresT()
        x._UnPack(cores)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.total == other.total and \
            self.isolated == other.isolated and \
            self.online == other.online

    # CoresT
    def _UnPack(self, cores):
        if cores is None:
            return
        self.total = cores.Total()
        if not cores.IsolatedIsNone():
            if np is None:
                self.isolated = []
                for i in range(cores.IsolatedLength()):
                    self.isolated.append(cores.Isolated(i))
            else:
                self.isolated = cores.IsolatedAsNumpy()
        if not cores.OnlineIsNone():
            if np is None:
                self.online = []
                for i in range(cores.OnlineLength()):
                    self.online.append(cores.Online(i))
            else:
                self.online = cores.OnlineAsNumpy()

    # CoresT
    def Pack(self, builder):
        if self.isolated is not None:
            if np is not None and type(self.isolated) is np.ndarray:
                isolated = builder.CreateNumpyVector(self.isolated)
            else:
                CoresStartIsolatedVector(builder, len(self.isolated))
                for i in reversed(range(len(self.isolated))):
                    builder.PrependInt32(self.isolated[i])
                isolated = builder.EndVector()
        if self.online is not None:
            if np is not None and type(self.online) is np.ndarray:
                online = builder.CreateNumpyVector(self.online)
            else:
                CoresStartOnlineVector(builder, len(self.online))
                for i in reversed(range(len(self.online))):
                    builder.PrependInt32(self.online[i])
                online = builder.EndVector()
        CoresStart(builder)
        CoresAddTotal(builder, self.total)
        if self.isolated is not None:
            CoresAddIsolated(builder, isolated)
        if self.online is not None:
            CoresAddOnline(builder, online)
        cores = CoresEnd(builder)
        return cores
