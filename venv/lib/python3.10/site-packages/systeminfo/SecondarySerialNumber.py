# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SecondarySerialNumber(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SecondarySerialNumber()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecondarySerialNumber(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SecondarySerialNumber
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SecondarySerialNumber
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecondarySerialNumber
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SecondarySerialNumber
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SecondarySerialNumberStart(builder): builder.StartObject(3)
def Start(builder):
    return SecondarySerialNumberStart(builder)
def SecondarySerialNumberAddType(builder, type): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return SecondarySerialNumberAddType(builder, type)
def SecondarySerialNumberAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return SecondarySerialNumberAddName(builder, name)
def SecondarySerialNumberAddSerialNumber(builder, serialNumber): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(serialNumber), 0)
def AddSerialNumber(builder, serialNumber):
    return SecondarySerialNumberAddSerialNumber(builder, serialNumber)
def SecondarySerialNumberEnd(builder): return builder.EndObject()
def End(builder):
    return SecondarySerialNumberEnd(builder)

class SecondarySerialNumberT(object):

    # SecondarySerialNumberT
    def __init__(self):
        self.type = None  # type: str
        self.name = None  # type: str
        self.serialNumber = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        secondarySerialNumber = SecondarySerialNumber()
        secondarySerialNumber.Init(buf, pos)
        return cls.InitFromObj(secondarySerialNumber)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, secondarySerialNumber):
        x = SecondarySerialNumberT()
        x._UnPack(secondarySerialNumber)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type and \
            self.name == other.name and \
            self.serialNumber == other.serialNumber

    # SecondarySerialNumberT
    def _UnPack(self, secondarySerialNumber):
        if secondarySerialNumber is None:
            return
        self.type = secondarySerialNumber.Type()
        self.name = secondarySerialNumber.Name()
        self.serialNumber = secondarySerialNumber.SerialNumber()

    # SecondarySerialNumberT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.serialNumber is not None:
            serialNumber = builder.CreateString(self.serialNumber)
        SecondarySerialNumberStart(builder)
        if self.type is not None:
            SecondarySerialNumberAddType(builder, type)
        if self.name is not None:
            SecondarySerialNumberAddName(builder, name)
        if self.serialNumber is not None:
            SecondarySerialNumberAddSerialNumber(builder, serialNumber)
        secondarySerialNumber = SecondarySerialNumberEnd(builder)
        return secondarySerialNumber
