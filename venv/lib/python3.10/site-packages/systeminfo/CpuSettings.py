# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CpuSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CpuSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCpuSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CpuSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CpuSettings
    def Cores(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from systeminfo.Core import Core
            obj = Core()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CpuSettings
    def CoresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuSettings
    def CoresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CpuSettingsStart(builder): builder.StartObject(1)
def Start(builder):
    return CpuSettingsStart(builder)
def CpuSettingsAddCores(builder, cores): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cores), 0)
def AddCores(builder, cores):
    return CpuSettingsAddCores(builder, cores)
def CpuSettingsStartCoresVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCoresVector(builder, numElems):
    return CpuSettingsStartCoresVector(builder, numElems)
def CpuSettingsEnd(builder): return builder.EndObject()
def End(builder):
    return CpuSettingsEnd(builder)
import systeminfo.Core
try:
    from typing import List
except:
    pass

class CpuSettingsT(object):

    # CpuSettingsT
    def __init__(self):
        self.cores = None  # type: List[systeminfo.Core.CoreT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cpuSettings = CpuSettings()
        cpuSettings.Init(buf, pos)
        return cls.InitFromObj(cpuSettings)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cpuSettings):
        x = CpuSettingsT()
        x._UnPack(cpuSettings)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cores == other.cores

    # CpuSettingsT
    def _UnPack(self, cpuSettings):
        if cpuSettings is None:
            return
        if not cpuSettings.CoresIsNone():
            self.cores = []
            for i in range(cpuSettings.CoresLength()):
                if cpuSettings.Cores(i) is None:
                    self.cores.append(None)
                else:
                    core_ = systeminfo.Core.CoreT.InitFromObj(cpuSettings.Cores(i))
                    self.cores.append(core_)

    # CpuSettingsT
    def Pack(self, builder):
        if self.cores is not None:
            coreslist = []
            for i in range(len(self.cores)):
                coreslist.append(self.cores[i].Pack(builder))
            CpuSettingsStartCoresVector(builder, len(self.cores))
            for i in reversed(range(len(self.cores))):
                builder.PrependUOffsetTRelative(coreslist[i])
            cores = builder.EndVector()
        CpuSettingsStart(builder)
        if self.cores is not None:
            CpuSettingsAddCores(builder, cores)
        cpuSettings = CpuSettingsEnd(builder)
        return cpuSettings
