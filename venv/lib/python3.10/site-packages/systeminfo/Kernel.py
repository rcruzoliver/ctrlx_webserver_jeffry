# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Kernel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Kernel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKernel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Kernel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Kernel
    def RealtimeCapable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Kernel
    def Modules(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Kernel
    def ModulesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Kernel
    def ModulesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KernelStart(builder): builder.StartObject(2)
def Start(builder):
    return KernelStart(builder)
def KernelAddRealtimeCapable(builder, realtimeCapable): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(realtimeCapable), 0)
def AddRealtimeCapable(builder, realtimeCapable):
    return KernelAddRealtimeCapable(builder, realtimeCapable)
def KernelAddModules(builder, modules): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(modules), 0)
def AddModules(builder, modules):
    return KernelAddModules(builder, modules)
def KernelStartModulesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartModulesVector(builder, numElems):
    return KernelStartModulesVector(builder, numElems)
def KernelEnd(builder): return builder.EndObject()
def End(builder):
    return KernelEnd(builder)
try:
    from typing import List
except:
    pass

class KernelT(object):

    # KernelT
    def __init__(self):
        self.realtimeCapable = None  # type: str
        self.modules = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kernel = Kernel()
        kernel.Init(buf, pos)
        return cls.InitFromObj(kernel)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kernel):
        x = KernelT()
        x._UnPack(kernel)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.realtimeCapable == other.realtimeCapable and \
            self.modules == other.modules

    # KernelT
    def _UnPack(self, kernel):
        if kernel is None:
            return
        self.realtimeCapable = kernel.RealtimeCapable()
        if not kernel.ModulesIsNone():
            self.modules = []
            for i in range(kernel.ModulesLength()):
                self.modules.append(kernel.Modules(i))

    # KernelT
    def Pack(self, builder):
        if self.realtimeCapable is not None:
            realtimeCapable = builder.CreateString(self.realtimeCapable)
        if self.modules is not None:
            moduleslist = []
            for i in range(len(self.modules)):
                moduleslist.append(builder.CreateString(self.modules[i]))
            KernelStartModulesVector(builder, len(self.modules))
            for i in reversed(range(len(self.modules))):
                builder.PrependUOffsetTRelative(moduleslist[i])
            modules = builder.EndVector()
        KernelStart(builder)
        if self.realtimeCapable is not None:
            KernelAddRealtimeCapable(builder, realtimeCapable)
        if self.modules is not None:
            KernelAddModules(builder, modules)
        kernel = KernelEnd(builder)
        return kernel
