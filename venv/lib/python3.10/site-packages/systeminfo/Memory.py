# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Memory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Memory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Memory
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Memory
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Memory
    def Swap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MemoryStart(builder): builder.StartObject(2)
def Start(builder):
    return MemoryStart(builder)
def MemoryAddTotal(builder, total): builder.PrependInt64Slot(0, total, 0)
def AddTotal(builder, total):
    return MemoryAddTotal(builder, total)
def MemoryAddSwap(builder, swap): builder.PrependInt64Slot(1, swap, 0)
def AddSwap(builder, swap):
    return MemoryAddSwap(builder, swap)
def MemoryEnd(builder): return builder.EndObject()
def End(builder):
    return MemoryEnd(builder)

class MemoryT(object):

    # MemoryT
    def __init__(self):
        self.total = 0  # type: int
        self.swap = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        memory = Memory()
        memory.Init(buf, pos)
        return cls.InitFromObj(memory)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, memory):
        x = MemoryT()
        x._UnPack(memory)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.total == other.total and \
            self.swap == other.swap

    # MemoryT
    def _UnPack(self, memory):
        if memory is None:
            return
        self.total = memory.Total()
        self.swap = memory.Swap()

    # MemoryT
    def Pack(self, builder):
        MemoryStart(builder)
        MemoryAddTotal(builder, self.total)
        MemoryAddSwap(builder, self.swap)
        memory = MemoryEnd(builder)
        return memory
