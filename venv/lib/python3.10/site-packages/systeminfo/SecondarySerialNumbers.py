# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SecondarySerialNumbers(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SecondarySerialNumbers()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSecondarySerialNumbers(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SecondarySerialNumbers
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SecondarySerialNumbers
    def SecondarySerialNumbers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from systeminfo.SecondarySerialNumber import SecondarySerialNumber
            obj = SecondarySerialNumber()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SecondarySerialNumbers
    def SecondarySerialNumbersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SecondarySerialNumbers
    def SecondarySerialNumbersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SecondarySerialNumbersStart(builder): builder.StartObject(1)
def Start(builder):
    return SecondarySerialNumbersStart(builder)
def SecondarySerialNumbersAddSecondarySerialNumbers(builder, secondarySerialNumbers): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(secondarySerialNumbers), 0)
def AddSecondarySerialNumbers(builder, secondarySerialNumbers):
    return SecondarySerialNumbersAddSecondarySerialNumbers(builder, secondarySerialNumbers)
def SecondarySerialNumbersStartSecondarySerialNumbersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSecondarySerialNumbersVector(builder, numElems):
    return SecondarySerialNumbersStartSecondarySerialNumbersVector(builder, numElems)
def SecondarySerialNumbersEnd(builder): return builder.EndObject()
def End(builder):
    return SecondarySerialNumbersEnd(builder)
import systeminfo.SecondarySerialNumber
try:
    from typing import List
except:
    pass

class SecondarySerialNumbersT(object):

    # SecondarySerialNumbersT
    def __init__(self):
        self.secondarySerialNumbers = None  # type: List[systeminfo.SecondarySerialNumber.SecondarySerialNumberT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        secondarySerialNumbers = SecondarySerialNumbers()
        secondarySerialNumbers.Init(buf, pos)
        return cls.InitFromObj(secondarySerialNumbers)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, secondarySerialNumbers):
        x = SecondarySerialNumbersT()
        x._UnPack(secondarySerialNumbers)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.secondarySerialNumbers == other.secondarySerialNumbers

    # SecondarySerialNumbersT
    def _UnPack(self, secondarySerialNumbers):
        if secondarySerialNumbers is None:
            return
        if not secondarySerialNumbers.SecondarySerialNumbersIsNone():
            self.secondarySerialNumbers = []
            for i in range(secondarySerialNumbers.SecondarySerialNumbersLength()):
                if secondarySerialNumbers.SecondarySerialNumbers(i) is None:
                    self.secondarySerialNumbers.append(None)
                else:
                    secondarySerialNumber_ = systeminfo.SecondarySerialNumber.SecondarySerialNumberT.InitFromObj(secondarySerialNumbers.SecondarySerialNumbers(i))
                    self.secondarySerialNumbers.append(secondarySerialNumber_)

    # SecondarySerialNumbersT
    def Pack(self, builder):
        if self.secondarySerialNumbers is not None:
            secondarySerialNumberslist = []
            for i in range(len(self.secondarySerialNumbers)):
                secondarySerialNumberslist.append(self.secondarySerialNumbers[i].Pack(builder))
            SecondarySerialNumbersStartSecondarySerialNumbersVector(builder, len(self.secondarySerialNumbers))
            for i in reversed(range(len(self.secondarySerialNumbers))):
                builder.PrependUOffsetTRelative(secondarySerialNumberslist[i])
            secondarySerialNumbers = builder.EndVector()
        SecondarySerialNumbersStart(builder)
        if self.secondarySerialNumbers is not None:
            SecondarySerialNumbersAddSecondarySerialNumbers(builder, secondarySerialNumbers)
        secondarySerialNumbers = SecondarySerialNumbersEnd(builder)
        return secondarySerialNumbers
