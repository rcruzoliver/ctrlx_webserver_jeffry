# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Core(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Core()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCore(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Core
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Core
    def Core(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Core
    def Realtime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CoreStart(builder): builder.StartObject(2)
def Start(builder):
    return CoreStart(builder)
def CoreAddCore(builder, core): builder.PrependInt32Slot(0, core, 0)
def AddCore(builder, core):
    return CoreAddCore(builder, core)
def CoreAddRealtime(builder, realtime): builder.PrependBoolSlot(1, realtime, 0)
def AddRealtime(builder, realtime):
    return CoreAddRealtime(builder, realtime)
def CoreEnd(builder): return builder.EndObject()
def End(builder):
    return CoreEnd(builder)

class CoreT(object):

    # CoreT
    def __init__(self):
        self.core = 0  # type: int
        self.realtime = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        core = Core()
        core.Init(buf, pos)
        return cls.InitFromObj(core)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, core):
        x = CoreT()
        x._UnPack(core)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.core == other.core and \
            self.realtime == other.realtime

    # CoreT
    def _UnPack(self, core):
        if core is None:
            return
        self.core = core.Core()
        self.realtime = core.Realtime()

    # CoreT
    def Pack(self, builder):
        CoreStart(builder)
        CoreAddCore(builder, self.core)
        CoreAddRealtime(builder, self.realtime)
        core = CoreEnd(builder)
        return core
