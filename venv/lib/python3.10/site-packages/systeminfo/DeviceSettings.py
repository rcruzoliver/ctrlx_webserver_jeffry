# automatically generated by the FlatBuffers compiler, do not modify

# namespace: systeminfo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceSettings
    def Cpu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from systeminfo.CpuSettings import CpuSettings
            obj = CpuSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DeviceSettings
    def RealtimeCapability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DeviceSettings
    def Virtualized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def DeviceSettingsStart(builder): builder.StartObject(3)
def Start(builder):
    return DeviceSettingsStart(builder)
def DeviceSettingsAddCpu(builder, cpu): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cpu), 0)
def AddCpu(builder, cpu):
    return DeviceSettingsAddCpu(builder, cpu)
def DeviceSettingsAddRealtimeCapability(builder, realtimeCapability): builder.PrependInt8Slot(1, realtimeCapability, 0)
def AddRealtimeCapability(builder, realtimeCapability):
    return DeviceSettingsAddRealtimeCapability(builder, realtimeCapability)
def DeviceSettingsAddVirtualized(builder, virtualized): builder.PrependBoolSlot(2, virtualized, 1)
def AddVirtualized(builder, virtualized):
    return DeviceSettingsAddVirtualized(builder, virtualized)
def DeviceSettingsEnd(builder): return builder.EndObject()
def End(builder):
    return DeviceSettingsEnd(builder)
import systeminfo.CpuSettings
try:
    from typing import Optional
except:
    pass

class DeviceSettingsT(object):

    # DeviceSettingsT
    def __init__(self):
        self.cpu = None  # type: Optional[systeminfo.CpuSettings.CpuSettingsT]
        self.realtimeCapability = 0  # type: int
        self.virtualized = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceSettings = DeviceSettings()
        deviceSettings.Init(buf, pos)
        return cls.InitFromObj(deviceSettings)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceSettings):
        x = DeviceSettingsT()
        x._UnPack(deviceSettings)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cpu == other.cpu and \
            self.realtimeCapability == other.realtimeCapability and \
            self.virtualized == other.virtualized

    # DeviceSettingsT
    def _UnPack(self, deviceSettings):
        if deviceSettings is None:
            return
        if deviceSettings.Cpu() is not None:
            self.cpu = systeminfo.CpuSettings.CpuSettingsT.InitFromObj(deviceSettings.Cpu())
        self.realtimeCapability = deviceSettings.RealtimeCapability()
        self.virtualized = deviceSettings.Virtualized()

    # DeviceSettingsT
    def Pack(self, builder):
        if self.cpu is not None:
            cpu = self.cpu.Pack(builder)
        DeviceSettingsStart(builder)
        if self.cpu is not None:
            DeviceSettingsAddCpu(builder, cpu)
        DeviceSettingsAddRealtimeCapability(builder, self.realtimeCapability)
        DeviceSettingsAddVirtualized(builder, self.virtualized)
        deviceSettings = DeviceSettingsEnd(builder)
        return deviceSettings
