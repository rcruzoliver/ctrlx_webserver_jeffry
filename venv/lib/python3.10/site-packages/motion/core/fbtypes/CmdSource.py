# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# command source (by which interface was this command inserted into the system (e.g. "PLC"))
class CmdSource(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdSource()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdSource(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdSource
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # interface type (e.g. "PLC" or "SCRIPT")
    # CmdSource
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name identifier (depends on interface type, e.g. this is the file name of a script when interface type is "SCRIPT")
    # CmdSource
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # line identifier (depends on interface type, e.g. this is the line where the command is in the script when interface type is "SCRIPT")
    # CmdSource
    def Line(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def CmdSourceStart(builder): builder.StartObject(3)
def Start(builder):
    return CmdSourceStart(builder)
def CmdSourceAddType(builder, type): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return CmdSourceAddType(builder, type)
def CmdSourceAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CmdSourceAddName(builder, name)
def CmdSourceAddLine(builder, line): builder.PrependUint64Slot(2, line, 0)
def AddLine(builder, line):
    return CmdSourceAddLine(builder, line)
def CmdSourceEnd(builder): return builder.EndObject()
def End(builder):
    return CmdSourceEnd(builder)

class CmdSourceT(object):

    # CmdSourceT
    def __init__(self):
        self.type = None  # type: str
        self.name = None  # type: str
        self.line = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdSource = CmdSource()
        cmdSource.Init(buf, pos)
        return cls.InitFromObj(cmdSource)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdSource):
        x = CmdSourceT()
        x._UnPack(cmdSource)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type and \
            self.name == other.name and \
            self.line == other.line

    # CmdSourceT
    def _UnPack(self, cmdSource):
        if cmdSource is None:
            return
        self.type = cmdSource.Type()
        self.name = cmdSource.Name()
        self.line = cmdSource.Line()

    # CmdSourceT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.name is not None:
            name = builder.CreateString(self.name)
        CmdSourceStart(builder)
        if self.type is not None:
            CmdSourceAddType(builder, type)
        if self.name is not None:
            CmdSourceAddName(builder, name)
        CmdSourceAddLine(builder, self.line)
        cmdSource = CmdSourceEnd(builder)
        return cmdSource
