# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the limits in a single dimension of the box of a single safe area
class SysCfgSafeAreaBox(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgSafeAreaBox()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgSafeAreaBox(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgSafeAreaBox
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # minimum limit in this dimension of the box
    # SysCfgSafeAreaBox
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # maximum limit in this dimension of the box
    # SysCfgSafeAreaBox
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of min and max as configured
    # SysCfgSafeAreaBox
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # should this dimension being checked?
    # SysCfgSafeAreaBox
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SysCfgSafeAreaBoxStart(builder): builder.StartObject(4)
def Start(builder):
    return SysCfgSafeAreaBoxStart(builder)
def SysCfgSafeAreaBoxAddMin(builder, min): builder.PrependFloat64Slot(0, min, 0.0)
def AddMin(builder, min):
    return SysCfgSafeAreaBoxAddMin(builder, min)
def SysCfgSafeAreaBoxAddMax(builder, max): builder.PrependFloat64Slot(1, max, 0.0)
def AddMax(builder, max):
    return SysCfgSafeAreaBoxAddMax(builder, max)
def SysCfgSafeAreaBoxAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return SysCfgSafeAreaBoxAddUnit(builder, unit)
def SysCfgSafeAreaBoxAddActive(builder, active): builder.PrependBoolSlot(3, active, 0)
def AddActive(builder, active):
    return SysCfgSafeAreaBoxAddActive(builder, active)
def SysCfgSafeAreaBoxEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgSafeAreaBoxEnd(builder)

class SysCfgSafeAreaBoxT(object):

    # SysCfgSafeAreaBoxT
    def __init__(self):
        self.min = 0.0  # type: float
        self.max = 0.0  # type: float
        self.unit = None  # type: str
        self.active = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgSafeAreaBox = SysCfgSafeAreaBox()
        sysCfgSafeAreaBox.Init(buf, pos)
        return cls.InitFromObj(sysCfgSafeAreaBox)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgSafeAreaBox):
        x = SysCfgSafeAreaBoxT()
        x._UnPack(sysCfgSafeAreaBox)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.min == other.min and \
            self.max == other.max and \
            self.unit == other.unit and \
            self.active == other.active

    # SysCfgSafeAreaBoxT
    def _UnPack(self, sysCfgSafeAreaBox):
        if sysCfgSafeAreaBox is None:
            return
        self.min = sysCfgSafeAreaBox.Min()
        self.max = sysCfgSafeAreaBox.Max()
        self.unit = sysCfgSafeAreaBox.Unit()
        self.active = sysCfgSafeAreaBox.Active()

    # SysCfgSafeAreaBoxT
    def Pack(self, builder):
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        SysCfgSafeAreaBoxStart(builder)
        SysCfgSafeAreaBoxAddMin(builder, self.min)
        SysCfgSafeAreaBoxAddMax(builder, self.max)
        if self.unit is not None:
            SysCfgSafeAreaBoxAddUnit(builder, unit)
        SysCfgSafeAreaBoxAddActive(builder, self.active)
        sysCfgSafeAreaBox = SysCfgSafeAreaBoxEnd(builder)
        return sysCfgSafeAreaBox
