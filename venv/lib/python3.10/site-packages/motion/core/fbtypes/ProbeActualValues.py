# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently the actual values of the probe
class ProbeActualValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProbeActualValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProbeActualValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProbeActualValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently the data of vaild 
    # ProbeActualValues
    def Valid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # currently positive edge value
    # ProbeActualValues
    def PosEdgeValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently negative edge value
    # ProbeActualValues
    def NegEdgeValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently difference of probe values
    # ProbeActualValues
    def DifferValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently difference count
    # ProbeActualValues
    def DiffCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently positive edge count
    # ProbeActualValues
    def PosEdgeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently negative edge count
    # ProbeActualValues
    def NegEdgeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently marks edge count
    # ProbeActualValues
    def MarksEdgeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently probe status
    # ProbeActualValues
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual positive edge value
    # ProbeActualValues
    def PosEdgeValueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual negative edge value
    # ProbeActualValues
    def NegEdgeValueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual difference values
    # ProbeActualValues
    def DifferValueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ProbeActualValuesStart(builder): builder.StartObject(12)
def Start(builder):
    return ProbeActualValuesStart(builder)
def ProbeActualValuesAddValid(builder, valid): builder.PrependBoolSlot(0, valid, 0)
def AddValid(builder, valid):
    return ProbeActualValuesAddValid(builder, valid)
def ProbeActualValuesAddPosEdgeValue(builder, posEdgeValue): builder.PrependFloat64Slot(1, posEdgeValue, 0.0)
def AddPosEdgeValue(builder, posEdgeValue):
    return ProbeActualValuesAddPosEdgeValue(builder, posEdgeValue)
def ProbeActualValuesAddNegEdgeValue(builder, negEdgeValue): builder.PrependFloat64Slot(2, negEdgeValue, 0.0)
def AddNegEdgeValue(builder, negEdgeValue):
    return ProbeActualValuesAddNegEdgeValue(builder, negEdgeValue)
def ProbeActualValuesAddDifferValue(builder, differValue): builder.PrependFloat64Slot(3, differValue, 0.0)
def AddDifferValue(builder, differValue):
    return ProbeActualValuesAddDifferValue(builder, differValue)
def ProbeActualValuesAddDiffCount(builder, diffCount): builder.PrependUint32Slot(4, diffCount, 0)
def AddDiffCount(builder, diffCount):
    return ProbeActualValuesAddDiffCount(builder, diffCount)
def ProbeActualValuesAddPosEdgeCount(builder, posEdgeCount): builder.PrependUint32Slot(5, posEdgeCount, 0)
def AddPosEdgeCount(builder, posEdgeCount):
    return ProbeActualValuesAddPosEdgeCount(builder, posEdgeCount)
def ProbeActualValuesAddNegEdgeCount(builder, negEdgeCount): builder.PrependUint32Slot(6, negEdgeCount, 0)
def AddNegEdgeCount(builder, negEdgeCount):
    return ProbeActualValuesAddNegEdgeCount(builder, negEdgeCount)
def ProbeActualValuesAddMarksEdgeCount(builder, marksEdgeCount): builder.PrependUint32Slot(7, marksEdgeCount, 0)
def AddMarksEdgeCount(builder, marksEdgeCount):
    return ProbeActualValuesAddMarksEdgeCount(builder, marksEdgeCount)
def ProbeActualValuesAddStatus(builder, status): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)
def AddStatus(builder, status):
    return ProbeActualValuesAddStatus(builder, status)
def ProbeActualValuesAddPosEdgeValueUnit(builder, posEdgeValueUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(posEdgeValueUnit), 0)
def AddPosEdgeValueUnit(builder, posEdgeValueUnit):
    return ProbeActualValuesAddPosEdgeValueUnit(builder, posEdgeValueUnit)
def ProbeActualValuesAddNegEdgeValueUnit(builder, negEdgeValueUnit): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(negEdgeValueUnit), 0)
def AddNegEdgeValueUnit(builder, negEdgeValueUnit):
    return ProbeActualValuesAddNegEdgeValueUnit(builder, negEdgeValueUnit)
def ProbeActualValuesAddDifferValueUnit(builder, differValueUnit): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(differValueUnit), 0)
def AddDifferValueUnit(builder, differValueUnit):
    return ProbeActualValuesAddDifferValueUnit(builder, differValueUnit)
def ProbeActualValuesEnd(builder): return builder.EndObject()
def End(builder):
    return ProbeActualValuesEnd(builder)

class ProbeActualValuesT(object):

    # ProbeActualValuesT
    def __init__(self):
        self.valid = False  # type: bool
        self.posEdgeValue = 0.0  # type: float
        self.negEdgeValue = 0.0  # type: float
        self.differValue = 0.0  # type: float
        self.diffCount = 0  # type: int
        self.posEdgeCount = 0  # type: int
        self.negEdgeCount = 0  # type: int
        self.marksEdgeCount = 0  # type: int
        self.status = None  # type: str
        self.posEdgeValueUnit = None  # type: str
        self.negEdgeValueUnit = None  # type: str
        self.differValueUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        probeActualValues = ProbeActualValues()
        probeActualValues.Init(buf, pos)
        return cls.InitFromObj(probeActualValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, probeActualValues):
        x = ProbeActualValuesT()
        x._UnPack(probeActualValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valid == other.valid and \
            self.posEdgeValue == other.posEdgeValue and \
            self.negEdgeValue == other.negEdgeValue and \
            self.differValue == other.differValue and \
            self.diffCount == other.diffCount and \
            self.posEdgeCount == other.posEdgeCount and \
            self.negEdgeCount == other.negEdgeCount and \
            self.marksEdgeCount == other.marksEdgeCount and \
            self.status == other.status and \
            self.posEdgeValueUnit == other.posEdgeValueUnit and \
            self.negEdgeValueUnit == other.negEdgeValueUnit and \
            self.differValueUnit == other.differValueUnit

    # ProbeActualValuesT
    def _UnPack(self, probeActualValues):
        if probeActualValues is None:
            return
        self.valid = probeActualValues.Valid()
        self.posEdgeValue = probeActualValues.PosEdgeValue()
        self.negEdgeValue = probeActualValues.NegEdgeValue()
        self.differValue = probeActualValues.DifferValue()
        self.diffCount = probeActualValues.DiffCount()
        self.posEdgeCount = probeActualValues.PosEdgeCount()
        self.negEdgeCount = probeActualValues.NegEdgeCount()
        self.marksEdgeCount = probeActualValues.MarksEdgeCount()
        self.status = probeActualValues.Status()
        self.posEdgeValueUnit = probeActualValues.PosEdgeValueUnit()
        self.negEdgeValueUnit = probeActualValues.NegEdgeValueUnit()
        self.differValueUnit = probeActualValues.DifferValueUnit()

    # ProbeActualValuesT
    def Pack(self, builder):
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.posEdgeValueUnit is not None:
            posEdgeValueUnit = builder.CreateString(self.posEdgeValueUnit)
        if self.negEdgeValueUnit is not None:
            negEdgeValueUnit = builder.CreateString(self.negEdgeValueUnit)
        if self.differValueUnit is not None:
            differValueUnit = builder.CreateString(self.differValueUnit)
        ProbeActualValuesStart(builder)
        ProbeActualValuesAddValid(builder, self.valid)
        ProbeActualValuesAddPosEdgeValue(builder, self.posEdgeValue)
        ProbeActualValuesAddNegEdgeValue(builder, self.negEdgeValue)
        ProbeActualValuesAddDifferValue(builder, self.differValue)
        ProbeActualValuesAddDiffCount(builder, self.diffCount)
        ProbeActualValuesAddPosEdgeCount(builder, self.posEdgeCount)
        ProbeActualValuesAddNegEdgeCount(builder, self.negEdgeCount)
        ProbeActualValuesAddMarksEdgeCount(builder, self.marksEdgeCount)
        if self.status is not None:
            ProbeActualValuesAddStatus(builder, status)
        if self.posEdgeValueUnit is not None:
            ProbeActualValuesAddPosEdgeValueUnit(builder, posEdgeValueUnit)
        if self.negEdgeValueUnit is not None:
            ProbeActualValuesAddNegEdgeValueUnit(builder, negEdgeValueUnit)
        if self.differValueUnit is not None:
            ProbeActualValuesAddDifferValueUnit(builder, differValueUnit)
        probeActualValues = ProbeActualValuesEnd(builder)
        return probeActualValues
