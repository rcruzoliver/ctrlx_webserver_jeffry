# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# set of dynamic limits (for commands)
class DynamicLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicLimits()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDynamicLimits(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DynamicLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # velocity limit (must be greater than zero)
    # DynamicLimits
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # acceleration limit (must be greater than zero)
    # DynamicLimits
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # deceleration limit (must be greater than zero)
    # DynamicLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # acceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimits
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DynamicLimitsStart(builder): builder.StartObject(5)
def Start(builder):
    return DynamicLimitsStart(builder)
def DynamicLimitsAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 1.0)
def AddVel(builder, vel):
    return DynamicLimitsAddVel(builder, vel)
def DynamicLimitsAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 1.0)
def AddAcc(builder, acc):
    return DynamicLimitsAddAcc(builder, acc)
def DynamicLimitsAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 1.0)
def AddDec(builder, dec):
    return DynamicLimitsAddDec(builder, dec)
def DynamicLimitsAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def AddJrkAcc(builder, jrkAcc):
    return DynamicLimitsAddJrkAcc(builder, jrkAcc)
def DynamicLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return DynamicLimitsAddJrkDec(builder, jrkDec)
def DynamicLimitsEnd(builder): return builder.EndObject()
def End(builder):
    return DynamicLimitsEnd(builder)

class DynamicLimitsT(object):

    # DynamicLimitsT
    def __init__(self):
        self.vel = 1.0  # type: float
        self.acc = 1.0  # type: float
        self.dec = 1.0  # type: float
        self.jrkAcc = 0.0  # type: float
        self.jrkDec = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dynamicLimits = DynamicLimits()
        dynamicLimits.Init(buf, pos)
        return cls.InitFromObj(dynamicLimits)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dynamicLimits):
        x = DynamicLimitsT()
        x._UnPack(dynamicLimits)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.vel == other.vel and \
            self.acc == other.acc and \
            self.dec == other.dec and \
            self.jrkAcc == other.jrkAcc and \
            self.jrkDec == other.jrkDec

    # DynamicLimitsT
    def _UnPack(self, dynamicLimits):
        if dynamicLimits is None:
            return
        self.vel = dynamicLimits.Vel()
        self.acc = dynamicLimits.Acc()
        self.dec = dynamicLimits.Dec()
        self.jrkAcc = dynamicLimits.JrkAcc()
        self.jrkDec = dynamicLimits.JrkDec()

    # DynamicLimitsT
    def Pack(self, builder):
        DynamicLimitsStart(builder)
        DynamicLimitsAddVel(builder, self.vel)
        DynamicLimitsAddAcc(builder, self.acc)
        DynamicLimitsAddDec(builder, self.dec)
        DynamicLimitsAddJrkAcc(builder, self.jrkAcc)
        DynamicLimitsAddJrkDec(builder, self.jrkDec)
        dynamicLimits = DynamicLimitsEnd(builder)
        return dynamicLimits
