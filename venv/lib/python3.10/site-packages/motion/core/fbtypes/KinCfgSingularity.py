# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for singularity handling
class KinCfgSingularity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgSingularity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgSingularity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgSingularity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # epsilon for singularity handling
    # KinCfgSingularity
    def Epsilon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 10.0

    # unit of the epsilon for singularity handling
    # KinCfgSingularity
    def EpsilonUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCfgSingularityStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCfgSingularityStart(builder)
def KinCfgSingularityAddEpsilon(builder, epsilon): builder.PrependFloat64Slot(0, epsilon, 10.0)
def AddEpsilon(builder, epsilon):
    return KinCfgSingularityAddEpsilon(builder, epsilon)
def KinCfgSingularityAddEpsilonUnit(builder, epsilonUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(epsilonUnit), 0)
def AddEpsilonUnit(builder, epsilonUnit):
    return KinCfgSingularityAddEpsilonUnit(builder, epsilonUnit)
def KinCfgSingularityEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgSingularityEnd(builder)

class KinCfgSingularityT(object):

    # KinCfgSingularityT
    def __init__(self):
        self.epsilon = 10.0  # type: float
        self.epsilonUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgSingularity = KinCfgSingularity()
        kinCfgSingularity.Init(buf, pos)
        return cls.InitFromObj(kinCfgSingularity)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgSingularity):
        x = KinCfgSingularityT()
        x._UnPack(kinCfgSingularity)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.epsilon == other.epsilon and \
            self.epsilonUnit == other.epsilonUnit

    # KinCfgSingularityT
    def _UnPack(self, kinCfgSingularity):
        if kinCfgSingularity is None:
            return
        self.epsilon = kinCfgSingularity.Epsilon()
        self.epsilonUnit = kinCfgSingularity.EpsilonUnit()

    # KinCfgSingularityT
    def Pack(self, builder):
        if self.epsilonUnit is not None:
            epsilonUnit = builder.CreateString(self.epsilonUnit)
        KinCfgSingularityStart(builder)
        KinCfgSingularityAddEpsilon(builder, self.epsilon)
        if self.epsilonUnit is not None:
            KinCfgSingularityAddEpsilonUnit(builder, epsilonUnit)
        kinCfgSingularity = KinCfgSingularityEnd(builder)
        return kinCfgSingularity
