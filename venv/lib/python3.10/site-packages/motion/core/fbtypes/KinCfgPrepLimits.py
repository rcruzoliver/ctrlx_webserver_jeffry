# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# preparation limits for kinematics
class KinCfgPrepLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgPrepLimits()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgPrepLimits(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgPrepLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # maximum number of commands in buffer
    # KinCfgPrepLimits
    def MaxCmdsInBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def KinCfgPrepLimitsStart(builder): builder.StartObject(1)
def Start(builder):
    return KinCfgPrepLimitsStart(builder)
def KinCfgPrepLimitsAddMaxCmdsInBuffer(builder, maxCmdsInBuffer): builder.PrependUint64Slot(0, maxCmdsInBuffer, 0)
def AddMaxCmdsInBuffer(builder, maxCmdsInBuffer):
    return KinCfgPrepLimitsAddMaxCmdsInBuffer(builder, maxCmdsInBuffer)
def KinCfgPrepLimitsEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgPrepLimitsEnd(builder)

class KinCfgPrepLimitsT(object):

    # KinCfgPrepLimitsT
    def __init__(self):
        self.maxCmdsInBuffer = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgPrepLimits = KinCfgPrepLimits()
        kinCfgPrepLimits.Init(buf, pos)
        return cls.InitFromObj(kinCfgPrepLimits)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgPrepLimits):
        x = KinCfgPrepLimitsT()
        x._UnPack(kinCfgPrepLimits)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.maxCmdsInBuffer == other.maxCmdsInBuffer

    # KinCfgPrepLimitsT
    def _UnPack(self, kinCfgPrepLimits):
        if kinCfgPrepLimits is None:
            return
        self.maxCmdsInBuffer = kinCfgPrepLimits.MaxCmdsInBuffer()

    # KinCfgPrepLimitsT
    def Pack(self, builder):
        KinCfgPrepLimitsStart(builder)
        KinCfgPrepLimitsAddMaxCmdsInBuffer(builder, self.maxCmdsInBuffer)
        kinCfgPrepLimits = KinCfgPrepLimitsEnd(builder)
        return kinCfgPrepLimits
