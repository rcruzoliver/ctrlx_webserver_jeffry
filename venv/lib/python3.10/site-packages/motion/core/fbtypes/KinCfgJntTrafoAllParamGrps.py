# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration parameter of a joint transformation
class KinCfgJntTrafoAllParamGrps(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoAllParamGrps()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoAllParamGrps(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoAllParamGrps
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # all configuration parameter groups of this joint transformation
    # KinCfgJntTrafoAllParamGrps
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgJntTrafoParamGroup import KinCfgJntTrafoParamGroup
            obj = KinCfgJntTrafoParamGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgJntTrafoAllParamGrps
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgJntTrafoAllParamGrps
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgJntTrafoAllParamGrpsStart(builder): builder.StartObject(1)
def Start(builder):
    return KinCfgJntTrafoAllParamGrpsStart(builder)
def KinCfgJntTrafoAllParamGrpsAddGroups(builder, groups): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)
def AddGroups(builder, groups):
    return KinCfgJntTrafoAllParamGrpsAddGroups(builder, groups)
def KinCfgJntTrafoAllParamGrpsStartGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupsVector(builder, numElems):
    return KinCfgJntTrafoAllParamGrpsStartGroupsVector(builder, numElems)
def KinCfgJntTrafoAllParamGrpsEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoAllParamGrpsEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoParamGroup
try:
    from typing import List
except:
    pass

class KinCfgJntTrafoAllParamGrpsT(object):

    # KinCfgJntTrafoAllParamGrpsT
    def __init__(self):
        self.groups = None  # type: List[motion.core.fbtypes.KinCfgJntTrafoParamGroup.KinCfgJntTrafoParamGroupT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoAllParamGrps = KinCfgJntTrafoAllParamGrps()
        kinCfgJntTrafoAllParamGrps.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoAllParamGrps)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoAllParamGrps):
        x = KinCfgJntTrafoAllParamGrpsT()
        x._UnPack(kinCfgJntTrafoAllParamGrps)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groups == other.groups

    # KinCfgJntTrafoAllParamGrpsT
    def _UnPack(self, kinCfgJntTrafoAllParamGrps):
        if kinCfgJntTrafoAllParamGrps is None:
            return
        if not kinCfgJntTrafoAllParamGrps.GroupsIsNone():
            self.groups = []
            for i in range(kinCfgJntTrafoAllParamGrps.GroupsLength()):
                if kinCfgJntTrafoAllParamGrps.Groups(i) is None:
                    self.groups.append(None)
                else:
                    kinCfgJntTrafoParamGroup_ = motion.core.fbtypes.KinCfgJntTrafoParamGroup.KinCfgJntTrafoParamGroupT.InitFromObj(kinCfgJntTrafoAllParamGrps.Groups(i))
                    self.groups.append(kinCfgJntTrafoParamGroup_)

    # KinCfgJntTrafoAllParamGrpsT
    def Pack(self, builder):
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(self.groups[i].Pack(builder))
            KinCfgJntTrafoAllParamGrpsStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector()
        KinCfgJntTrafoAllParamGrpsStart(builder)
        if self.groups is not None:
            KinCfgJntTrafoAllParamGrpsAddGroups(builder, groups)
        kinCfgJntTrafoAllParamGrps = KinCfgJntTrafoAllParamGrpsEnd(builder)
        return kinCfgJntTrafoAllParamGrps
