# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# set of dynamic limits (for reading them in states)
class DynamicLimitsState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DynamicLimitsState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDynamicLimitsState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DynamicLimitsState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # velocity limit (must be greater than zero)
    # DynamicLimitsState
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # acceleration limit (must be greater than zero)
    # DynamicLimitsState
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # deceleration limit (must be greater than zero)
    # DynamicLimitsState
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # acceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimitsState
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # DynamicLimitsState
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the velocity limit
    # DynamicLimitsState
    def VelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the acceleration limit
    # DynamicLimitsState
    def AccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the deceleration limit
    # DynamicLimitsState
    def DecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the acceleration jerk limit
    # DynamicLimitsState
    def JrkAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the deceleration jerk limit
    # DynamicLimitsState
    def JrkDecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DynamicLimitsStateStart(builder): builder.StartObject(10)
def Start(builder):
    return DynamicLimitsStateStart(builder)
def DynamicLimitsStateAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def AddVel(builder, vel):
    return DynamicLimitsStateAddVel(builder, vel)
def DynamicLimitsStateAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 0.0)
def AddAcc(builder, acc):
    return DynamicLimitsStateAddAcc(builder, acc)
def DynamicLimitsStateAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def AddDec(builder, dec):
    return DynamicLimitsStateAddDec(builder, dec)
def DynamicLimitsStateAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def AddJrkAcc(builder, jrkAcc):
    return DynamicLimitsStateAddJrkAcc(builder, jrkAcc)
def DynamicLimitsStateAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return DynamicLimitsStateAddJrkDec(builder, jrkDec)
def DynamicLimitsStateAddVelUnit(builder, velUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(velUnit), 0)
def AddVelUnit(builder, velUnit):
    return DynamicLimitsStateAddVelUnit(builder, velUnit)
def DynamicLimitsStateAddAccUnit(builder, accUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(accUnit), 0)
def AddAccUnit(builder, accUnit):
    return DynamicLimitsStateAddAccUnit(builder, accUnit)
def DynamicLimitsStateAddDecUnit(builder, decUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decUnit), 0)
def AddDecUnit(builder, decUnit):
    return DynamicLimitsStateAddDecUnit(builder, decUnit)
def DynamicLimitsStateAddJrkAccUnit(builder, jrkAccUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(jrkAccUnit), 0)
def AddJrkAccUnit(builder, jrkAccUnit):
    return DynamicLimitsStateAddJrkAccUnit(builder, jrkAccUnit)
def DynamicLimitsStateAddJrkDecUnit(builder, jrkDecUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(jrkDecUnit), 0)
def AddJrkDecUnit(builder, jrkDecUnit):
    return DynamicLimitsStateAddJrkDecUnit(builder, jrkDecUnit)
def DynamicLimitsStateEnd(builder): return builder.EndObject()
def End(builder):
    return DynamicLimitsStateEnd(builder)

class DynamicLimitsStateT(object):

    # DynamicLimitsStateT
    def __init__(self):
        self.vel = 0.0  # type: float
        self.acc = 0.0  # type: float
        self.dec = 0.0  # type: float
        self.jrkAcc = 0.0  # type: float
        self.jrkDec = 0.0  # type: float
        self.velUnit = None  # type: str
        self.accUnit = None  # type: str
        self.decUnit = None  # type: str
        self.jrkAccUnit = None  # type: str
        self.jrkDecUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dynamicLimitsState = DynamicLimitsState()
        dynamicLimitsState.Init(buf, pos)
        return cls.InitFromObj(dynamicLimitsState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dynamicLimitsState):
        x = DynamicLimitsStateT()
        x._UnPack(dynamicLimitsState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.vel == other.vel and \
            self.acc == other.acc and \
            self.dec == other.dec and \
            self.jrkAcc == other.jrkAcc and \
            self.jrkDec == other.jrkDec and \
            self.velUnit == other.velUnit and \
            self.accUnit == other.accUnit and \
            self.decUnit == other.decUnit and \
            self.jrkAccUnit == other.jrkAccUnit and \
            self.jrkDecUnit == other.jrkDecUnit

    # DynamicLimitsStateT
    def _UnPack(self, dynamicLimitsState):
        if dynamicLimitsState is None:
            return
        self.vel = dynamicLimitsState.Vel()
        self.acc = dynamicLimitsState.Acc()
        self.dec = dynamicLimitsState.Dec()
        self.jrkAcc = dynamicLimitsState.JrkAcc()
        self.jrkDec = dynamicLimitsState.JrkDec()
        self.velUnit = dynamicLimitsState.VelUnit()
        self.accUnit = dynamicLimitsState.AccUnit()
        self.decUnit = dynamicLimitsState.DecUnit()
        self.jrkAccUnit = dynamicLimitsState.JrkAccUnit()
        self.jrkDecUnit = dynamicLimitsState.JrkDecUnit()

    # DynamicLimitsStateT
    def Pack(self, builder):
        if self.velUnit is not None:
            velUnit = builder.CreateString(self.velUnit)
        if self.accUnit is not None:
            accUnit = builder.CreateString(self.accUnit)
        if self.decUnit is not None:
            decUnit = builder.CreateString(self.decUnit)
        if self.jrkAccUnit is not None:
            jrkAccUnit = builder.CreateString(self.jrkAccUnit)
        if self.jrkDecUnit is not None:
            jrkDecUnit = builder.CreateString(self.jrkDecUnit)
        DynamicLimitsStateStart(builder)
        DynamicLimitsStateAddVel(builder, self.vel)
        DynamicLimitsStateAddAcc(builder, self.acc)
        DynamicLimitsStateAddDec(builder, self.dec)
        DynamicLimitsStateAddJrkAcc(builder, self.jrkAcc)
        DynamicLimitsStateAddJrkDec(builder, self.jrkDec)
        if self.velUnit is not None:
            DynamicLimitsStateAddVelUnit(builder, velUnit)
        if self.accUnit is not None:
            DynamicLimitsStateAddAccUnit(builder, accUnit)
        if self.decUnit is not None:
            DynamicLimitsStateAddDecUnit(builder, decUnit)
        if self.jrkAccUnit is not None:
            DynamicLimitsStateAddJrkAccUnit(builder, jrkAccUnit)
        if self.jrkDecUnit is not None:
            DynamicLimitsStateAddJrkDecUnit(builder, jrkDecUnit)
        dynamicLimitsState = DynamicLimitsStateEnd(builder)
        return dynamicLimitsState
