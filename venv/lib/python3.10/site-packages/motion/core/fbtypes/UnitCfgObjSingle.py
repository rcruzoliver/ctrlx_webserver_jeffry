# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Single entry of the general unit configuration for a motion object
class UnitCfgObjSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitCfgObjSingle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnitCfgObjSingle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UnitCfgObjSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the unit value type of the entry (position, velocity, jerk, ...)
    # UnitCfgObjSingle
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # abbreviation of the unit (as it will being used in flatbuffers and files)
    # UnitCfgObjSingle
    def Abbreviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UnitCfgObjSingleStart(builder): builder.StartObject(2)
def Start(builder):
    return UnitCfgObjSingleStart(builder)
def UnitCfgObjSingleAddValueType(builder, valueType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(valueType), 0)
def AddValueType(builder, valueType):
    return UnitCfgObjSingleAddValueType(builder, valueType)
def UnitCfgObjSingleAddAbbreviation(builder, abbreviation): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(abbreviation), 0)
def AddAbbreviation(builder, abbreviation):
    return UnitCfgObjSingleAddAbbreviation(builder, abbreviation)
def UnitCfgObjSingleEnd(builder): return builder.EndObject()
def End(builder):
    return UnitCfgObjSingleEnd(builder)

class UnitCfgObjSingleT(object):

    # UnitCfgObjSingleT
    def __init__(self):
        self.valueType = None  # type: str
        self.abbreviation = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        unitCfgObjSingle = UnitCfgObjSingle()
        unitCfgObjSingle.Init(buf, pos)
        return cls.InitFromObj(unitCfgObjSingle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, unitCfgObjSingle):
        x = UnitCfgObjSingleT()
        x._UnPack(unitCfgObjSingle)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valueType == other.valueType and \
            self.abbreviation == other.abbreviation

    # UnitCfgObjSingleT
    def _UnPack(self, unitCfgObjSingle):
        if unitCfgObjSingle is None:
            return
        self.valueType = unitCfgObjSingle.ValueType()
        self.abbreviation = unitCfgObjSingle.Abbreviation()

    # UnitCfgObjSingleT
    def Pack(self, builder):
        if self.valueType is not None:
            valueType = builder.CreateString(self.valueType)
        if self.abbreviation is not None:
            abbreviation = builder.CreateString(self.abbreviation)
        UnitCfgObjSingleStart(builder)
        if self.valueType is not None:
            UnitCfgObjSingleAddValueType(builder, valueType)
        if self.abbreviation is not None:
            UnitCfgObjSingleAddAbbreviation(builder, abbreviation)
        unitCfgObjSingle = UnitCfgObjSingleEnd(builder)
        return unitCfgObjSingle
