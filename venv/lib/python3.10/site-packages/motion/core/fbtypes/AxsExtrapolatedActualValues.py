# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# extrapolated actual values from the drives
class AxsExtrapolatedActualValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsExtrapolatedActualValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsExtrapolatedActualValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsExtrapolatedActualValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # extrapolated actual position (only available, when extrapolation is activated and at least actual position is available)
    # AxsExtrapolatedActualValues
    def ActualPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # extrapolated actual velocity (only available, when extrapolation is activated and at least actual position is available)
    # AxsExtrapolatedActualValues
    def ActualVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # extrapolated actual acceleration (only available, when extrapolation is activated and at least actual position is available)
    # AxsExtrapolatedActualValues
    def ActualAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the extrapolated actual position
    # AxsExtrapolatedActualValues
    def ActualPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the extrapolated actual velocity
    # AxsExtrapolatedActualValues
    def ActualVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the extrapolated actual acceleration
    # AxsExtrapolatedActualValues
    def ActualAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsExtrapolatedActualValuesStart(builder): builder.StartObject(6)
def Start(builder):
    return AxsExtrapolatedActualValuesStart(builder)
def AxsExtrapolatedActualValuesAddActualPos(builder, actualPos): builder.PrependFloat64Slot(0, actualPos, 0.0)
def AddActualPos(builder, actualPos):
    return AxsExtrapolatedActualValuesAddActualPos(builder, actualPos)
def AxsExtrapolatedActualValuesAddActualVel(builder, actualVel): builder.PrependFloat64Slot(1, actualVel, 0.0)
def AddActualVel(builder, actualVel):
    return AxsExtrapolatedActualValuesAddActualVel(builder, actualVel)
def AxsExtrapolatedActualValuesAddActualAcc(builder, actualAcc): builder.PrependFloat64Slot(2, actualAcc, 0.0)
def AddActualAcc(builder, actualAcc):
    return AxsExtrapolatedActualValuesAddActualAcc(builder, actualAcc)
def AxsExtrapolatedActualValuesAddActualPosUnit(builder, actualPosUnit): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(actualPosUnit), 0)
def AddActualPosUnit(builder, actualPosUnit):
    return AxsExtrapolatedActualValuesAddActualPosUnit(builder, actualPosUnit)
def AxsExtrapolatedActualValuesAddActualVelUnit(builder, actualVelUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actualVelUnit), 0)
def AddActualVelUnit(builder, actualVelUnit):
    return AxsExtrapolatedActualValuesAddActualVelUnit(builder, actualVelUnit)
def AxsExtrapolatedActualValuesAddActualAccUnit(builder, actualAccUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actualAccUnit), 0)
def AddActualAccUnit(builder, actualAccUnit):
    return AxsExtrapolatedActualValuesAddActualAccUnit(builder, actualAccUnit)
def AxsExtrapolatedActualValuesEnd(builder): return builder.EndObject()
def End(builder):
    return AxsExtrapolatedActualValuesEnd(builder)

class AxsExtrapolatedActualValuesT(object):

    # AxsExtrapolatedActualValuesT
    def __init__(self):
        self.actualPos = 0.0  # type: float
        self.actualVel = 0.0  # type: float
        self.actualAcc = 0.0  # type: float
        self.actualPosUnit = None  # type: str
        self.actualVelUnit = None  # type: str
        self.actualAccUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsExtrapolatedActualValues = AxsExtrapolatedActualValues()
        axsExtrapolatedActualValues.Init(buf, pos)
        return cls.InitFromObj(axsExtrapolatedActualValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsExtrapolatedActualValues):
        x = AxsExtrapolatedActualValuesT()
        x._UnPack(axsExtrapolatedActualValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.actualPos == other.actualPos and \
            self.actualVel == other.actualVel and \
            self.actualAcc == other.actualAcc and \
            self.actualPosUnit == other.actualPosUnit and \
            self.actualVelUnit == other.actualVelUnit and \
            self.actualAccUnit == other.actualAccUnit

    # AxsExtrapolatedActualValuesT
    def _UnPack(self, axsExtrapolatedActualValues):
        if axsExtrapolatedActualValues is None:
            return
        self.actualPos = axsExtrapolatedActualValues.ActualPos()
        self.actualVel = axsExtrapolatedActualValues.ActualVel()
        self.actualAcc = axsExtrapolatedActualValues.ActualAcc()
        self.actualPosUnit = axsExtrapolatedActualValues.ActualPosUnit()
        self.actualVelUnit = axsExtrapolatedActualValues.ActualVelUnit()
        self.actualAccUnit = axsExtrapolatedActualValues.ActualAccUnit()

    # AxsExtrapolatedActualValuesT
    def Pack(self, builder):
        if self.actualPosUnit is not None:
            actualPosUnit = builder.CreateString(self.actualPosUnit)
        if self.actualVelUnit is not None:
            actualVelUnit = builder.CreateString(self.actualVelUnit)
        if self.actualAccUnit is not None:
            actualAccUnit = builder.CreateString(self.actualAccUnit)
        AxsExtrapolatedActualValuesStart(builder)
        AxsExtrapolatedActualValuesAddActualPos(builder, self.actualPos)
        AxsExtrapolatedActualValuesAddActualVel(builder, self.actualVel)
        AxsExtrapolatedActualValuesAddActualAcc(builder, self.actualAcc)
        if self.actualPosUnit is not None:
            AxsExtrapolatedActualValuesAddActualPosUnit(builder, actualPosUnit)
        if self.actualVelUnit is not None:
            AxsExtrapolatedActualValuesAddActualVelUnit(builder, actualVelUnit)
        if self.actualAccUnit is not None:
            AxsExtrapolatedActualValuesAddActualAccUnit(builder, actualAccUnit)
        axsExtrapolatedActualValues = AxsExtrapolatedActualValuesEnd(builder)
        return axsExtrapolatedActualValues
