# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the jog commands for a kinematics
class KinCmdJogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdJogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdJogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdJogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # jog direction as a vector
    # KinCmdJogData
    def JogDir(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdJogData
    def JogDirAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdJogData
    def JogDirLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdJogData
    def JogDirIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordSys for jog direction vector
    # KinCmdJogData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # jog increment (must be zero for continuous jogging, must be a positive value for incremantal jogging)
    # KinCmdJogData
    def JogIncrement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dynamic limits for the motion of this command
    # KinCmdJogData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdJogDataStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCmdJogDataStart(builder)
def KinCmdJogDataAddJogDir(builder, jogDir): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jogDir), 0)
def AddJogDir(builder, jogDir):
    return KinCmdJogDataAddJogDir(builder, jogDir)
def KinCmdJogDataStartJogDirVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartJogDirVector(builder, numElems):
    return KinCmdJogDataStartJogDirVector(builder, numElems)
def KinCmdJogDataAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def AddCoordSys(builder, coordSys):
    return KinCmdJogDataAddCoordSys(builder, coordSys)
def KinCmdJogDataAddJogIncrement(builder, jogIncrement): builder.PrependFloat64Slot(2, jogIncrement, 0.0)
def AddJogIncrement(builder, jogIncrement):
    return KinCmdJogDataAddJogIncrement(builder, jogIncrement)
def KinCmdJogDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return KinCmdJogDataAddLim(builder, lim)
def KinCmdJogDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdJogDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import List, Optional
except:
    pass

class KinCmdJogDataT(object):

    # KinCmdJogDataT
    def __init__(self):
        self.jogDir = None  # type: List[float]
        self.coordSys = None  # type: str
        self.jogIncrement = 0.0  # type: float
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdJogData = KinCmdJogData()
        kinCmdJogData.Init(buf, pos)
        return cls.InitFromObj(kinCmdJogData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdJogData):
        x = KinCmdJogDataT()
        x._UnPack(kinCmdJogData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.jogDir == other.jogDir and \
            self.coordSys == other.coordSys and \
            self.jogIncrement == other.jogIncrement and \
            self.lim == other.lim

    # KinCmdJogDataT
    def _UnPack(self, kinCmdJogData):
        if kinCmdJogData is None:
            return
        if not kinCmdJogData.JogDirIsNone():
            if np is None:
                self.jogDir = []
                for i in range(kinCmdJogData.JogDirLength()):
                    self.jogDir.append(kinCmdJogData.JogDir(i))
            else:
                self.jogDir = kinCmdJogData.JogDirAsNumpy()
        self.coordSys = kinCmdJogData.CoordSys()
        self.jogIncrement = kinCmdJogData.JogIncrement()
        if kinCmdJogData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmdJogData.Lim())

    # KinCmdJogDataT
    def Pack(self, builder):
        if self.jogDir is not None:
            if np is not None and type(self.jogDir) is np.ndarray:
                jogDir = builder.CreateNumpyVector(self.jogDir)
            else:
                KinCmdJogDataStartJogDirVector(builder, len(self.jogDir))
                for i in reversed(range(len(self.jogDir))):
                    builder.PrependFloat64(self.jogDir[i])
                jogDir = builder.EndVector()
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        KinCmdJogDataStart(builder)
        if self.jogDir is not None:
            KinCmdJogDataAddJogDir(builder, jogDir)
        if self.coordSys is not None:
            KinCmdJogDataAddCoordSys(builder, coordSys)
        KinCmdJogDataAddJogIncrement(builder, self.jogIncrement)
        if self.lim is not None:
            KinCmdJogDataAddLim(builder, lim)
        kinCmdJogData = KinCmdJogDataEnd(builder)
        return kinCmdJogData
