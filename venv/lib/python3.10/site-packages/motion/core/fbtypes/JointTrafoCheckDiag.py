# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# informations on a single diagnosis message
class JointTrafoCheckDiag(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JointTrafoCheckDiag()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsJointTrafoCheckDiag(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # JointTrafoCheckDiag
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # main diagnosis code (refer to the diagnosis data base)
    # JointTrafoCheckDiag
    def MainDiagCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # detailed diagnosis code (refer to the diagnosis data base)
    # JointTrafoCheckDiag
    def DetailedDiagCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # URI of the invalid entry
    # JointTrafoCheckDiag
    def ObjUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # additional information on the error cause to help the user
    # JointTrafoCheckDiag
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def JointTrafoCheckDiagStart(builder): builder.StartObject(4)
def Start(builder):
    return JointTrafoCheckDiagStart(builder)
def JointTrafoCheckDiagAddMainDiagCode(builder, mainDiagCode): builder.PrependUint32Slot(0, mainDiagCode, 0)
def AddMainDiagCode(builder, mainDiagCode):
    return JointTrafoCheckDiagAddMainDiagCode(builder, mainDiagCode)
def JointTrafoCheckDiagAddDetailedDiagCode(builder, detailedDiagCode): builder.PrependUint32Slot(1, detailedDiagCode, 0)
def AddDetailedDiagCode(builder, detailedDiagCode):
    return JointTrafoCheckDiagAddDetailedDiagCode(builder, detailedDiagCode)
def JointTrafoCheckDiagAddObjUri(builder, objUri): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(objUri), 0)
def AddObjUri(builder, objUri):
    return JointTrafoCheckDiagAddObjUri(builder, objUri)
def JointTrafoCheckDiagAddAddInfo(builder, addInfo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)
def AddAddInfo(builder, addInfo):
    return JointTrafoCheckDiagAddAddInfo(builder, addInfo)
def JointTrafoCheckDiagEnd(builder): return builder.EndObject()
def End(builder):
    return JointTrafoCheckDiagEnd(builder)

class JointTrafoCheckDiagT(object):

    # JointTrafoCheckDiagT
    def __init__(self):
        self.mainDiagCode = 0  # type: int
        self.detailedDiagCode = 0  # type: int
        self.objUri = None  # type: str
        self.addInfo = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        jointTrafoCheckDiag = JointTrafoCheckDiag()
        jointTrafoCheckDiag.Init(buf, pos)
        return cls.InitFromObj(jointTrafoCheckDiag)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, jointTrafoCheckDiag):
        x = JointTrafoCheckDiagT()
        x._UnPack(jointTrafoCheckDiag)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiagCode == other.mainDiagCode and \
            self.detailedDiagCode == other.detailedDiagCode and \
            self.objUri == other.objUri and \
            self.addInfo == other.addInfo

    # JointTrafoCheckDiagT
    def _UnPack(self, jointTrafoCheckDiag):
        if jointTrafoCheckDiag is None:
            return
        self.mainDiagCode = jointTrafoCheckDiag.MainDiagCode()
        self.detailedDiagCode = jointTrafoCheckDiag.DetailedDiagCode()
        self.objUri = jointTrafoCheckDiag.ObjUri()
        self.addInfo = jointTrafoCheckDiag.AddInfo()

    # JointTrafoCheckDiagT
    def Pack(self, builder):
        if self.objUri is not None:
            objUri = builder.CreateString(self.objUri)
        if self.addInfo is not None:
            addInfo = builder.CreateString(self.addInfo)
        JointTrafoCheckDiagStart(builder)
        JointTrafoCheckDiagAddMainDiagCode(builder, self.mainDiagCode)
        JointTrafoCheckDiagAddDetailedDiagCode(builder, self.detailedDiagCode)
        if self.objUri is not None:
            JointTrafoCheckDiagAddObjUri(builder, objUri)
        if self.addInfo is not None:
            JointTrafoCheckDiagAddAddInfo(builder, addInfo)
        jointTrafoCheckDiag = JointTrafoCheckDiagEnd(builder)
        return jointTrafoCheckDiag
