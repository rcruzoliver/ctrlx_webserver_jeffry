# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# return type of requests of the current boot state
class BootState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BootState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBootState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BootState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # text of the boot step (can be shown in an HMI)
    # BootState
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # current boot step (starts with 0, ends with maxSteps)
    # BootState
    def ActStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # number of boot steps (when actStep == maxSteps then the booting is finished)
    # BootState
    def MaxSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def BootStateStart(builder): builder.StartObject(3)
def Start(builder):
    return BootStateStart(builder)
def BootStateAddText(builder, text): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return BootStateAddText(builder, text)
def BootStateAddActStep(builder, actStep): builder.PrependUint32Slot(1, actStep, 0)
def AddActStep(builder, actStep):
    return BootStateAddActStep(builder, actStep)
def BootStateAddMaxSteps(builder, maxSteps): builder.PrependUint32Slot(2, maxSteps, 0)
def AddMaxSteps(builder, maxSteps):
    return BootStateAddMaxSteps(builder, maxSteps)
def BootStateEnd(builder): return builder.EndObject()
def End(builder):
    return BootStateEnd(builder)

class BootStateT(object):

    # BootStateT
    def __init__(self):
        self.text = None  # type: str
        self.actStep = 0  # type: int
        self.maxSteps = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bootState = BootState()
        bootState.Init(buf, pos)
        return cls.InitFromObj(bootState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bootState):
        x = BootStateT()
        x._UnPack(bootState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.text == other.text and \
            self.actStep == other.actStep and \
            self.maxSteps == other.maxSteps

    # BootStateT
    def _UnPack(self, bootState):
        if bootState is None:
            return
        self.text = bootState.Text()
        self.actStep = bootState.ActStep()
        self.maxSteps = bootState.MaxSteps()

    # BootStateT
    def Pack(self, builder):
        if self.text is not None:
            text = builder.CreateString(self.text)
        BootStateStart(builder)
        if self.text is not None:
            BootStateAddText(builder, text)
        BootStateAddActStep(builder, self.actStep)
        BootStateAddMaxSteps(builder, self.maxSteps)
        bootState = BootStateEnd(builder)
        return bootState
