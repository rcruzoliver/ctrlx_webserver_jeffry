# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis jog commands
class AxsCmdJogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdJogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdJogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdJogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # jog direction ("+" or "-")
    # AxsCmdJogData
    def JogDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # jog increment (must be zero for continuous jogging, must be a positive value for incremantal jogging)
    # AxsCmdJogData
    def JogIncrement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dynamic limits for the motion of this command
    # AxsCmdJogData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdJogDataStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCmdJogDataStart(builder)
def AxsCmdJogDataAddJogDir(builder, jogDir): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jogDir), 0)
def AddJogDir(builder, jogDir):
    return AxsCmdJogDataAddJogDir(builder, jogDir)
def AxsCmdJogDataAddJogIncrement(builder, jogIncrement): builder.PrependFloat64Slot(1, jogIncrement, 0.0)
def AddJogIncrement(builder, jogIncrement):
    return AxsCmdJogDataAddJogIncrement(builder, jogIncrement)
def AxsCmdJogDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return AxsCmdJogDataAddLim(builder, lim)
def AxsCmdJogDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdJogDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class AxsCmdJogDataT(object):

    # AxsCmdJogDataT
    def __init__(self):
        self.jogDir = None  # type: str
        self.jogIncrement = 0.0  # type: float
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdJogData = AxsCmdJogData()
        axsCmdJogData.Init(buf, pos)
        return cls.InitFromObj(axsCmdJogData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdJogData):
        x = AxsCmdJogDataT()
        x._UnPack(axsCmdJogData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.jogDir == other.jogDir and \
            self.jogIncrement == other.jogIncrement and \
            self.lim == other.lim

    # AxsCmdJogDataT
    def _UnPack(self, axsCmdJogData):
        if axsCmdJogData is None:
            return
        self.jogDir = axsCmdJogData.JogDir()
        self.jogIncrement = axsCmdJogData.JogIncrement()
        if axsCmdJogData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(axsCmdJogData.Lim())

    # AxsCmdJogDataT
    def Pack(self, builder):
        if self.jogDir is not None:
            jogDir = builder.CreateString(self.jogDir)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        AxsCmdJogDataStart(builder)
        if self.jogDir is not None:
            AxsCmdJogDataAddJogDir(builder, jogDir)
        AxsCmdJogDataAddJogIncrement(builder, self.jogIncrement)
        if self.lim is not None:
            AxsCmdJogDataAddLim(builder, lim)
        axsCmdJogData = AxsCmdJogDataEnd(builder)
        return axsCmdJogData
