# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single set for the tool data
class SysCfgToolDataSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgToolDataSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgToolDataSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgToolDataSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the set (required for load/save)
    # SysCfgToolDataSet
    def SetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # XYZ offsets (must be exactly three values)
    # SysCfgToolDataSet
    def OffsetXyz(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgToolDataSet
    def OffsetXyzAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgToolDataSet
    def OffsetXyzLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataSet
    def OffsetXyzIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
    # SysCfgToolDataSet
    def Orientation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgToolDataSet
    def OrientationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgToolDataSet
    def OrientationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataSet
    def OrientationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # offsets for radius
    # SysCfgToolDataSet
    def ToolRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # edge orientation value
    # SysCfgToolDataSet
    def ToolDataEdgeOri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Units for XYZ offsets (must be exactly three values)
    # SysCfgToolDataSet
    def OffsetXyzunits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgToolDataSet
    def OffsetXyzunitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataSet
    def OffsetXyzunitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Units for rotation offsets (must be exactly three values)
    # SysCfgToolDataSet
    def OrientationUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgToolDataSet
    def OrientationUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataSet
    def OrientationUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Unit for the tool radius
    # SysCfgToolDataSet
    def ToolRadiusUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SysCfgToolDataSetStart(builder): builder.StartObject(8)
def Start(builder):
    return SysCfgToolDataSetStart(builder)
def SysCfgToolDataSetAddSetName(builder, setName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(setName), 0)
def AddSetName(builder, setName):
    return SysCfgToolDataSetAddSetName(builder, setName)
def SysCfgToolDataSetAddOffsetXyz(builder, offsetXyz): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(offsetXyz), 0)
def AddOffsetXyz(builder, offsetXyz):
    return SysCfgToolDataSetAddOffsetXyz(builder, offsetXyz)
def SysCfgToolDataSetStartOffsetXyzVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOffsetXyzVector(builder, numElems):
    return SysCfgToolDataSetStartOffsetXyzVector(builder, numElems)
def SysCfgToolDataSetAddOrientation(builder, orientation): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)
def AddOrientation(builder, orientation):
    return SysCfgToolDataSetAddOrientation(builder, orientation)
def SysCfgToolDataSetStartOrientationVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOrientationVector(builder, numElems):
    return SysCfgToolDataSetStartOrientationVector(builder, numElems)
def SysCfgToolDataSetAddToolRadius(builder, toolRadius): builder.PrependFloat64Slot(3, toolRadius, 0.0)
def AddToolRadius(builder, toolRadius):
    return SysCfgToolDataSetAddToolRadius(builder, toolRadius)
def SysCfgToolDataSetAddToolDataEdgeOri(builder, toolDataEdgeOri): builder.PrependInt8Slot(4, toolDataEdgeOri, 0)
def AddToolDataEdgeOri(builder, toolDataEdgeOri):
    return SysCfgToolDataSetAddToolDataEdgeOri(builder, toolDataEdgeOri)
def SysCfgToolDataSetAddOffsetXyzunits(builder, offsetXyzunits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(offsetXyzunits), 0)
def AddOffsetXyzunits(builder, offsetXyzunits):
    return SysCfgToolDataSetAddOffsetXyzunits(builder, offsetXyzunits)
def SysCfgToolDataSetStartOffsetXyzunitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOffsetXyzunitsVector(builder, numElems):
    return SysCfgToolDataSetStartOffsetXyzunitsVector(builder, numElems)
def SysCfgToolDataSetAddOrientationUnits(builder, orientationUnits): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(orientationUnits), 0)
def AddOrientationUnits(builder, orientationUnits):
    return SysCfgToolDataSetAddOrientationUnits(builder, orientationUnits)
def SysCfgToolDataSetStartOrientationUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOrientationUnitsVector(builder, numElems):
    return SysCfgToolDataSetStartOrientationUnitsVector(builder, numElems)
def SysCfgToolDataSetAddToolRadiusUnit(builder, toolRadiusUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(toolRadiusUnit), 0)
def AddToolRadiusUnit(builder, toolRadiusUnit):
    return SysCfgToolDataSetAddToolRadiusUnit(builder, toolRadiusUnit)
def SysCfgToolDataSetEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgToolDataSetEnd(builder)
try:
    from typing import List
except:
    pass

class SysCfgToolDataSetT(object):

    # SysCfgToolDataSetT
    def __init__(self):
        self.setName = None  # type: str
        self.offsetXyz = None  # type: List[float]
        self.orientation = None  # type: List[float]
        self.toolRadius = 0.0  # type: float
        self.toolDataEdgeOri = 0  # type: int
        self.offsetXyzunits = None  # type: List[str]
        self.orientationUnits = None  # type: List[str]
        self.toolRadiusUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgToolDataSet = SysCfgToolDataSet()
        sysCfgToolDataSet.Init(buf, pos)
        return cls.InitFromObj(sysCfgToolDataSet)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgToolDataSet):
        x = SysCfgToolDataSetT()
        x._UnPack(sysCfgToolDataSet)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.setName == other.setName and \
            self.offsetXyz == other.offsetXyz and \
            self.orientation == other.orientation and \
            self.toolRadius == other.toolRadius and \
            self.toolDataEdgeOri == other.toolDataEdgeOri and \
            self.offsetXyzunits == other.offsetXyzunits and \
            self.orientationUnits == other.orientationUnits and \
            self.toolRadiusUnit == other.toolRadiusUnit

    # SysCfgToolDataSetT
    def _UnPack(self, sysCfgToolDataSet):
        if sysCfgToolDataSet is None:
            return
        self.setName = sysCfgToolDataSet.SetName()
        if not sysCfgToolDataSet.OffsetXyzIsNone():
            if np is None:
                self.offsetXyz = []
                for i in range(sysCfgToolDataSet.OffsetXyzLength()):
                    self.offsetXyz.append(sysCfgToolDataSet.OffsetXyz(i))
            else:
                self.offsetXyz = sysCfgToolDataSet.OffsetXyzAsNumpy()
        if not sysCfgToolDataSet.OrientationIsNone():
            if np is None:
                self.orientation = []
                for i in range(sysCfgToolDataSet.OrientationLength()):
                    self.orientation.append(sysCfgToolDataSet.Orientation(i))
            else:
                self.orientation = sysCfgToolDataSet.OrientationAsNumpy()
        self.toolRadius = sysCfgToolDataSet.ToolRadius()
        self.toolDataEdgeOri = sysCfgToolDataSet.ToolDataEdgeOri()
        if not sysCfgToolDataSet.OffsetXyzunitsIsNone():
            self.offsetXyzunits = []
            for i in range(sysCfgToolDataSet.OffsetXyzunitsLength()):
                self.offsetXyzunits.append(sysCfgToolDataSet.OffsetXyzunits(i))
        if not sysCfgToolDataSet.OrientationUnitsIsNone():
            self.orientationUnits = []
            for i in range(sysCfgToolDataSet.OrientationUnitsLength()):
                self.orientationUnits.append(sysCfgToolDataSet.OrientationUnits(i))
        self.toolRadiusUnit = sysCfgToolDataSet.ToolRadiusUnit()

    # SysCfgToolDataSetT
    def Pack(self, builder):
        if self.setName is not None:
            setName = builder.CreateString(self.setName)
        if self.offsetXyz is not None:
            if np is not None and type(self.offsetXyz) is np.ndarray:
                offsetXyz = builder.CreateNumpyVector(self.offsetXyz)
            else:
                SysCfgToolDataSetStartOffsetXyzVector(builder, len(self.offsetXyz))
                for i in reversed(range(len(self.offsetXyz))):
                    builder.PrependFloat64(self.offsetXyz[i])
                offsetXyz = builder.EndVector()
        if self.orientation is not None:
            if np is not None and type(self.orientation) is np.ndarray:
                orientation = builder.CreateNumpyVector(self.orientation)
            else:
                SysCfgToolDataSetStartOrientationVector(builder, len(self.orientation))
                for i in reversed(range(len(self.orientation))):
                    builder.PrependFloat64(self.orientation[i])
                orientation = builder.EndVector()
        if self.offsetXyzunits is not None:
            offsetXyzunitslist = []
            for i in range(len(self.offsetXyzunits)):
                offsetXyzunitslist.append(builder.CreateString(self.offsetXyzunits[i]))
            SysCfgToolDataSetStartOffsetXyzunitsVector(builder, len(self.offsetXyzunits))
            for i in reversed(range(len(self.offsetXyzunits))):
                builder.PrependUOffsetTRelative(offsetXyzunitslist[i])
            offsetXyzunits = builder.EndVector()
        if self.orientationUnits is not None:
            orientationUnitslist = []
            for i in range(len(self.orientationUnits)):
                orientationUnitslist.append(builder.CreateString(self.orientationUnits[i]))
            SysCfgToolDataSetStartOrientationUnitsVector(builder, len(self.orientationUnits))
            for i in reversed(range(len(self.orientationUnits))):
                builder.PrependUOffsetTRelative(orientationUnitslist[i])
            orientationUnits = builder.EndVector()
        if self.toolRadiusUnit is not None:
            toolRadiusUnit = builder.CreateString(self.toolRadiusUnit)
        SysCfgToolDataSetStart(builder)
        if self.setName is not None:
            SysCfgToolDataSetAddSetName(builder, setName)
        if self.offsetXyz is not None:
            SysCfgToolDataSetAddOffsetXyz(builder, offsetXyz)
        if self.orientation is not None:
            SysCfgToolDataSetAddOrientation(builder, orientation)
        SysCfgToolDataSetAddToolRadius(builder, self.toolRadius)
        SysCfgToolDataSetAddToolDataEdgeOri(builder, self.toolDataEdgeOri)
        if self.offsetXyzunits is not None:
            SysCfgToolDataSetAddOffsetXyzunits(builder, offsetXyzunits)
        if self.orientationUnits is not None:
            SysCfgToolDataSetAddOrientationUnits(builder, orientationUnits)
        if self.toolRadiusUnit is not None:
            SysCfgToolDataSetAddToolRadiusUnit(builder, toolRadiusUnit)
        sysCfgToolDataSet = SysCfgToolDataSetEnd(builder)
        return sysCfgToolDataSet
