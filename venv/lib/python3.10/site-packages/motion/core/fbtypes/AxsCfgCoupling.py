# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for coupling functions for a single axis
class AxsCfgCoupling(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgCoupling()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgCoupling(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgCoupling
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # configuration for gantry coupling function of a single axis
    # AxsCfgCoupling
    def Gantry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCfgGantry import AxsCfgGantry
            obj = AxsCfgGantry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration for sync motion functionality for a single axis
    # AxsCfgCoupling
    def Syncmotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.sync.fbtypes.AxsCfgSyncMotion import AxsCfgSyncMotion
            obj = AxsCfgSyncMotion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCfgCouplingStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgCouplingStart(builder)
def AxsCfgCouplingAddGantry(builder, gantry): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gantry), 0)
def AddGantry(builder, gantry):
    return AxsCfgCouplingAddGantry(builder, gantry)
def AxsCfgCouplingAddSyncmotion(builder, syncmotion): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(syncmotion), 0)
def AddSyncmotion(builder, syncmotion):
    return AxsCfgCouplingAddSyncmotion(builder, syncmotion)
def AxsCfgCouplingEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgCouplingEnd(builder)
import motion.core.fbtypes.AxsCfgGantry
import motion.sync.fbtypes.AxsCfgSyncMotion
try:
    from typing import Optional
except:
    pass

class AxsCfgCouplingT(object):

    # AxsCfgCouplingT
    def __init__(self):
        self.gantry = None  # type: Optional[motion.core.fbtypes.AxsCfgGantry.AxsCfgGantryT]
        self.syncmotion = None  # type: Optional[motion.sync.fbtypes.AxsCfgSyncMotion.AxsCfgSyncMotionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgCoupling = AxsCfgCoupling()
        axsCfgCoupling.Init(buf, pos)
        return cls.InitFromObj(axsCfgCoupling)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgCoupling):
        x = AxsCfgCouplingT()
        x._UnPack(axsCfgCoupling)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.gantry == other.gantry and \
            self.syncmotion == other.syncmotion

    # AxsCfgCouplingT
    def _UnPack(self, axsCfgCoupling):
        if axsCfgCoupling is None:
            return
        if axsCfgCoupling.Gantry() is not None:
            self.gantry = motion.core.fbtypes.AxsCfgGantry.AxsCfgGantryT.InitFromObj(axsCfgCoupling.Gantry())
        if axsCfgCoupling.Syncmotion() is not None:
            self.syncmotion = motion.sync.fbtypes.AxsCfgSyncMotion.AxsCfgSyncMotionT.InitFromObj(axsCfgCoupling.Syncmotion())

    # AxsCfgCouplingT
    def Pack(self, builder):
        if self.gantry is not None:
            gantry = self.gantry.Pack(builder)
        if self.syncmotion is not None:
            syncmotion = self.syncmotion.Pack(builder)
        AxsCfgCouplingStart(builder)
        if self.gantry is not None:
            AxsCfgCouplingAddGantry(builder, gantry)
        if self.syncmotion is not None:
            AxsCfgCouplingAddSyncmotion(builder, syncmotion)
        axsCfgCoupling = AxsCfgCouplingEnd(builder)
        return axsCfgCoupling
