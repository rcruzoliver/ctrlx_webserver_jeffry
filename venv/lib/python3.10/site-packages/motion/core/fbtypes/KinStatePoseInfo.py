# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Kinematics position information of the currently active command
class KinStatePoseInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinStatePoseInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinStatePoseInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinStatePoseInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of the axis in the current position calculation of the kinematics, e.g. TRAFO_MEMBER
    # KinStatePoseInfo
    def AxisInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinStatePoseInfo
    def AxisInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinStatePoseInfo
    def AxisInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Position capability of the active joint transformations, e.g. POS_3D
    # KinStatePoseInfo
    def PosCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Orientation capability of the active joint transformations, e.g. ORI_3D
    # KinStatePoseInfo
    def OriCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Referring coordinate system, e.g. PCS
    # KinStatePoseInfo
    def Cos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinStatePoseInfoStart(builder): builder.StartObject(4)
def Start(builder):
    return KinStatePoseInfoStart(builder)
def KinStatePoseInfoAddAxisInfo(builder, axisInfo): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axisInfo), 0)
def AddAxisInfo(builder, axisInfo):
    return KinStatePoseInfoAddAxisInfo(builder, axisInfo)
def KinStatePoseInfoStartAxisInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAxisInfoVector(builder, numElems):
    return KinStatePoseInfoStartAxisInfoVector(builder, numElems)
def KinStatePoseInfoAddPosCap(builder, posCap): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(posCap), 0)
def AddPosCap(builder, posCap):
    return KinStatePoseInfoAddPosCap(builder, posCap)
def KinStatePoseInfoAddOriCap(builder, oriCap): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(oriCap), 0)
def AddOriCap(builder, oriCap):
    return KinStatePoseInfoAddOriCap(builder, oriCap)
def KinStatePoseInfoAddCos(builder, cos): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cos), 0)
def AddCos(builder, cos):
    return KinStatePoseInfoAddCos(builder, cos)
def KinStatePoseInfoEnd(builder): return builder.EndObject()
def End(builder):
    return KinStatePoseInfoEnd(builder)
try:
    from typing import List
except:
    pass

class KinStatePoseInfoT(object):

    # KinStatePoseInfoT
    def __init__(self):
        self.axisInfo = None  # type: List[str]
        self.posCap = None  # type: str
        self.oriCap = None  # type: str
        self.cos = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinStatePoseInfo = KinStatePoseInfo()
        kinStatePoseInfo.Init(buf, pos)
        return cls.InitFromObj(kinStatePoseInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinStatePoseInfo):
        x = KinStatePoseInfoT()
        x._UnPack(kinStatePoseInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axisInfo == other.axisInfo and \
            self.posCap == other.posCap and \
            self.oriCap == other.oriCap and \
            self.cos == other.cos

    # KinStatePoseInfoT
    def _UnPack(self, kinStatePoseInfo):
        if kinStatePoseInfo is None:
            return
        if not kinStatePoseInfo.AxisInfoIsNone():
            self.axisInfo = []
            for i in range(kinStatePoseInfo.AxisInfoLength()):
                self.axisInfo.append(kinStatePoseInfo.AxisInfo(i))
        self.posCap = kinStatePoseInfo.PosCap()
        self.oriCap = kinStatePoseInfo.OriCap()
        self.cos = kinStatePoseInfo.Cos()

    # KinStatePoseInfoT
    def Pack(self, builder):
        if self.axisInfo is not None:
            axisInfolist = []
            for i in range(len(self.axisInfo)):
                axisInfolist.append(builder.CreateString(self.axisInfo[i]))
            KinStatePoseInfoStartAxisInfoVector(builder, len(self.axisInfo))
            for i in reversed(range(len(self.axisInfo))):
                builder.PrependUOffsetTRelative(axisInfolist[i])
            axisInfo = builder.EndVector()
        if self.posCap is not None:
            posCap = builder.CreateString(self.posCap)
        if self.oriCap is not None:
            oriCap = builder.CreateString(self.oriCap)
        if self.cos is not None:
            cos = builder.CreateString(self.cos)
        KinStatePoseInfoStart(builder)
        if self.axisInfo is not None:
            KinStatePoseInfoAddAxisInfo(builder, axisInfo)
        if self.posCap is not None:
            KinStatePoseInfoAddPosCap(builder, posCap)
        if self.oriCap is not None:
            KinStatePoseInfoAddOriCap(builder, oriCap)
        if self.cos is not None:
            KinStatePoseInfoAddCos(builder, cos)
        kinStatePoseInfo = KinStatePoseInfoEnd(builder)
        return kinStatePoseInfo
