# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# complete configuration of a single kinematics
class KinCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # object type (must be "Kinematics"), required for save/load
    # KinCfg
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # all configured limits of this kinematics
    # KinCfg
    def Limits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgLimits import KinCfgLimits
            obj = KinCfgLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # data of all axes, that can be added to this kinematics
    # KinCfg
    def AxsCfg(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgAxs import KinCfgAxs
            obj = KinCfgAxs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfg
    def AxsCfgLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfg
    def AxsCfgIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # configuration of all joint transformations (ACS <--> MCS)
    # KinCfg
    def Mcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgJntTrafoAllSets import KinCfgJntTrafoAllSets
            obj = KinCfgJntTrafoAllSets()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # general unit configuration of this kinematics
    # KinCfg
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.UnitCfgKin import UnitCfgKin
            obj = UnitCfgKin()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # preparation limits of a kinematics
    # KinCfg
    def PrepLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgPrepLimits import KinCfgPrepLimits
            obj = KinCfgPrepLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the real-time inputs of the kinematics
    # KinCfg
    def RtInputs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.RTInputsCfg import RTInputsCfg
            obj = RTInputsCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the dynamics of the kinematics
    # KinCfg
    def Dynamics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgDynamics import KinCfgDynamics
            obj = KinCfgDynamics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration of the geometry functions of the kinematics
    # KinCfg
    def Geometry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinGeoCfg import KinGeoCfg
            obj = KinGeoCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgStart(builder): builder.StartObject(9)
def Start(builder):
    return KinCfgStart(builder)
def KinCfgAddObjectType(builder, objectType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectType), 0)
def AddObjectType(builder, objectType):
    return KinCfgAddObjectType(builder, objectType)
def KinCfgAddLimits(builder, limits): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limits), 0)
def AddLimits(builder, limits):
    return KinCfgAddLimits(builder, limits)
def KinCfgAddAxsCfg(builder, axsCfg): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(axsCfg), 0)
def AddAxsCfg(builder, axsCfg):
    return KinCfgAddAxsCfg(builder, axsCfg)
def KinCfgStartAxsCfgVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAxsCfgVector(builder, numElems):
    return KinCfgStartAxsCfgVector(builder, numElems)
def KinCfgAddMcs(builder, mcs): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mcs), 0)
def AddMcs(builder, mcs):
    return KinCfgAddMcs(builder, mcs)
def KinCfgAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def AddUnits(builder, units):
    return KinCfgAddUnits(builder, units)
def KinCfgAddPrepLimits(builder, prepLimits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(prepLimits), 0)
def AddPrepLimits(builder, prepLimits):
    return KinCfgAddPrepLimits(builder, prepLimits)
def KinCfgAddRtInputs(builder, rtInputs): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rtInputs), 0)
def AddRtInputs(builder, rtInputs):
    return KinCfgAddRtInputs(builder, rtInputs)
def KinCfgAddDynamics(builder, dynamics): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dynamics), 0)
def AddDynamics(builder, dynamics):
    return KinCfgAddDynamics(builder, dynamics)
def KinCfgAddGeometry(builder, geometry): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(geometry), 0)
def AddGeometry(builder, geometry):
    return KinCfgAddGeometry(builder, geometry)
def KinCfgEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgEnd(builder)
import motion.core.fbtypes.KinCfgAxs
import motion.core.fbtypes.KinCfgDynamics
import motion.core.fbtypes.KinCfgJntTrafoAllSets
import motion.core.fbtypes.KinCfgLimits
import motion.core.fbtypes.KinCfgPrepLimits
import motion.core.fbtypes.KinGeoCfg
import motion.core.fbtypes.RTInputsCfg
import motion.core.fbtypes.UnitCfgKin
try:
    from typing import List, Optional
except:
    pass

class KinCfgT(object):

    # KinCfgT
    def __init__(self):
        self.objectType = None  # type: str
        self.limits = None  # type: Optional[motion.core.fbtypes.KinCfgLimits.KinCfgLimitsT]
        self.axsCfg = None  # type: List[motion.core.fbtypes.KinCfgAxs.KinCfgAxsT]
        self.mcs = None  # type: Optional[motion.core.fbtypes.KinCfgJntTrafoAllSets.KinCfgJntTrafoAllSetsT]
        self.units = None  # type: Optional[motion.core.fbtypes.UnitCfgKin.UnitCfgKinT]
        self.prepLimits = None  # type: Optional[motion.core.fbtypes.KinCfgPrepLimits.KinCfgPrepLimitsT]
        self.rtInputs = None  # type: Optional[motion.core.fbtypes.RTInputsCfg.RTInputsCfgT]
        self.dynamics = None  # type: Optional[motion.core.fbtypes.KinCfgDynamics.KinCfgDynamicsT]
        self.geometry = None  # type: Optional[motion.core.fbtypes.KinGeoCfg.KinGeoCfgT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfg = KinCfg()
        kinCfg.Init(buf, pos)
        return cls.InitFromObj(kinCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfg):
        x = KinCfgT()
        x._UnPack(kinCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.objectType == other.objectType and \
            self.limits == other.limits and \
            self.axsCfg == other.axsCfg and \
            self.mcs == other.mcs and \
            self.units == other.units and \
            self.prepLimits == other.prepLimits and \
            self.rtInputs == other.rtInputs and \
            self.dynamics == other.dynamics and \
            self.geometry == other.geometry

    # KinCfgT
    def _UnPack(self, kinCfg):
        if kinCfg is None:
            return
        self.objectType = kinCfg.ObjectType()
        if kinCfg.Limits() is not None:
            self.limits = motion.core.fbtypes.KinCfgLimits.KinCfgLimitsT.InitFromObj(kinCfg.Limits())
        if not kinCfg.AxsCfgIsNone():
            self.axsCfg = []
            for i in range(kinCfg.AxsCfgLength()):
                if kinCfg.AxsCfg(i) is None:
                    self.axsCfg.append(None)
                else:
                    kinCfgAxs_ = motion.core.fbtypes.KinCfgAxs.KinCfgAxsT.InitFromObj(kinCfg.AxsCfg(i))
                    self.axsCfg.append(kinCfgAxs_)
        if kinCfg.Mcs() is not None:
            self.mcs = motion.core.fbtypes.KinCfgJntTrafoAllSets.KinCfgJntTrafoAllSetsT.InitFromObj(kinCfg.Mcs())
        if kinCfg.Units() is not None:
            self.units = motion.core.fbtypes.UnitCfgKin.UnitCfgKinT.InitFromObj(kinCfg.Units())
        if kinCfg.PrepLimits() is not None:
            self.prepLimits = motion.core.fbtypes.KinCfgPrepLimits.KinCfgPrepLimitsT.InitFromObj(kinCfg.PrepLimits())
        if kinCfg.RtInputs() is not None:
            self.rtInputs = motion.core.fbtypes.RTInputsCfg.RTInputsCfgT.InitFromObj(kinCfg.RtInputs())
        if kinCfg.Dynamics() is not None:
            self.dynamics = motion.core.fbtypes.KinCfgDynamics.KinCfgDynamicsT.InitFromObj(kinCfg.Dynamics())
        if kinCfg.Geometry() is not None:
            self.geometry = motion.core.fbtypes.KinGeoCfg.KinGeoCfgT.InitFromObj(kinCfg.Geometry())

    # KinCfgT
    def Pack(self, builder):
        if self.objectType is not None:
            objectType = builder.CreateString(self.objectType)
        if self.limits is not None:
            limits = self.limits.Pack(builder)
        if self.axsCfg is not None:
            axsCfglist = []
            for i in range(len(self.axsCfg)):
                axsCfglist.append(self.axsCfg[i].Pack(builder))
            KinCfgStartAxsCfgVector(builder, len(self.axsCfg))
            for i in reversed(range(len(self.axsCfg))):
                builder.PrependUOffsetTRelative(axsCfglist[i])
            axsCfg = builder.EndVector()
        if self.mcs is not None:
            mcs = self.mcs.Pack(builder)
        if self.units is not None:
            units = self.units.Pack(builder)
        if self.prepLimits is not None:
            prepLimits = self.prepLimits.Pack(builder)
        if self.rtInputs is not None:
            rtInputs = self.rtInputs.Pack(builder)
        if self.dynamics is not None:
            dynamics = self.dynamics.Pack(builder)
        if self.geometry is not None:
            geometry = self.geometry.Pack(builder)
        KinCfgStart(builder)
        if self.objectType is not None:
            KinCfgAddObjectType(builder, objectType)
        if self.limits is not None:
            KinCfgAddLimits(builder, limits)
        if self.axsCfg is not None:
            KinCfgAddAxsCfg(builder, axsCfg)
        if self.mcs is not None:
            KinCfgAddMcs(builder, mcs)
        if self.units is not None:
            KinCfgAddUnits(builder, units)
        if self.prepLimits is not None:
            KinCfgAddPrepLimits(builder, prepLimits)
        if self.rtInputs is not None:
            KinCfgAddRtInputs(builder, rtInputs)
        if self.dynamics is not None:
            KinCfgAddDynamics(builder, dynamics)
        if self.geometry is not None:
            KinCfgAddGeometry(builder, geometry)
        kinCfg = KinCfgEnd(builder)
        return kinCfg
