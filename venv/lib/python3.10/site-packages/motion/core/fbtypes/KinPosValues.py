# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# position of a kinematics
class KinPosValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinPosValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinPosValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinPosValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # array of 16 positions
    # KinPosValues
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinPosValues
    def PosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinPosValues
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinPosValues
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # units of the 16 positions
    # KinPosValues
    def Units(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinPosValues
    def UnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinPosValues
    def UnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinPosValuesStart(builder): builder.StartObject(2)
def Start(builder):
    return KinPosValuesStart(builder)
def KinPosValuesAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def AddPos(builder, pos):
    return KinPosValuesAddPos(builder, pos)
def KinPosValuesStartPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPosVector(builder, numElems):
    return KinPosValuesStartPosVector(builder, numElems)
def KinPosValuesAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def AddUnits(builder, units):
    return KinPosValuesAddUnits(builder, units)
def KinPosValuesStartUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartUnitsVector(builder, numElems):
    return KinPosValuesStartUnitsVector(builder, numElems)
def KinPosValuesEnd(builder): return builder.EndObject()
def End(builder):
    return KinPosValuesEnd(builder)
try:
    from typing import List
except:
    pass

class KinPosValuesT(object):

    # KinPosValuesT
    def __init__(self):
        self.pos = None  # type: List[float]
        self.units = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinPosValues = KinPosValues()
        kinPosValues.Init(buf, pos)
        return cls.InitFromObj(kinPosValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinPosValues):
        x = KinPosValuesT()
        x._UnPack(kinPosValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pos == other.pos and \
            self.units == other.units

    # KinPosValuesT
    def _UnPack(self, kinPosValues):
        if kinPosValues is None:
            return
        if not kinPosValues.PosIsNone():
            if np is None:
                self.pos = []
                for i in range(kinPosValues.PosLength()):
                    self.pos.append(kinPosValues.Pos(i))
            else:
                self.pos = kinPosValues.PosAsNumpy()
        if not kinPosValues.UnitsIsNone():
            self.units = []
            for i in range(kinPosValues.UnitsLength()):
                self.units.append(kinPosValues.Units(i))

    # KinPosValuesT
    def Pack(self, builder):
        if self.pos is not None:
            if np is not None and type(self.pos) is np.ndarray:
                pos = builder.CreateNumpyVector(self.pos)
            else:
                KinPosValuesStartPosVector(builder, len(self.pos))
                for i in reversed(range(len(self.pos))):
                    builder.PrependFloat64(self.pos[i])
                pos = builder.EndVector()
        if self.units is not None:
            unitslist = []
            for i in range(len(self.units)):
                unitslist.append(builder.CreateString(self.units[i]))
            KinPosValuesStartUnitsVector(builder, len(self.units))
            for i in reversed(range(len(self.units))):
                builder.PrependUOffsetTRelative(unitslist[i])
            units = builder.EndVector()
        KinPosValuesStart(builder)
        if self.pos is not None:
            KinPosValuesAddPos(builder, pos)
        if self.units is not None:
            KinPosValuesAddUnits(builder, units)
        kinPosValues = KinPosValuesEnd(builder)
        return kinPosValues
