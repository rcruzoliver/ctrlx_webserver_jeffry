# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for gantry coupling function of a single axis
class AxsCfgGantry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgGantry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgGantry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgGantry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # is this axis a gantry member?
    # AxsCfgGantry
    def IsMember(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # is moving of this axis allowed, even when it's a gantry member and the gantry connection is not closed?
    # This value can be read/written when accessing the whole structure, but (file-)loading will always set to FALSE.
    # AxsCfgGantry
    def MoveAllowed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # is enable the multipe brake dynamic
    # AxsCfgGantry
    def MultiBrakeDyn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCfgGantryStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgGantryStart(builder)
def AxsCfgGantryAddIsMember(builder, isMember): builder.PrependBoolSlot(0, isMember, 0)
def AddIsMember(builder, isMember):
    return AxsCfgGantryAddIsMember(builder, isMember)
def AxsCfgGantryAddMoveAllowed(builder, moveAllowed): builder.PrependBoolSlot(1, moveAllowed, 0)
def AddMoveAllowed(builder, moveAllowed):
    return AxsCfgGantryAddMoveAllowed(builder, moveAllowed)
def AxsCfgGantryAddMultiBrakeDyn(builder, multiBrakeDyn): builder.PrependBoolSlot(2, multiBrakeDyn, 0)
def AddMultiBrakeDyn(builder, multiBrakeDyn):
    return AxsCfgGantryAddMultiBrakeDyn(builder, multiBrakeDyn)
def AxsCfgGantryEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgGantryEnd(builder)

class AxsCfgGantryT(object):

    # AxsCfgGantryT
    def __init__(self):
        self.isMember = False  # type: bool
        self.moveAllowed = False  # type: bool
        self.multiBrakeDyn = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgGantry = AxsCfgGantry()
        axsCfgGantry.Init(buf, pos)
        return cls.InitFromObj(axsCfgGantry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgGantry):
        x = AxsCfgGantryT()
        x._UnPack(axsCfgGantry)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.isMember == other.isMember and \
            self.moveAllowed == other.moveAllowed and \
            self.multiBrakeDyn == other.multiBrakeDyn

    # AxsCfgGantryT
    def _UnPack(self, axsCfgGantry):
        if axsCfgGantry is None:
            return
        self.isMember = axsCfgGantry.IsMember()
        self.moveAllowed = axsCfgGantry.MoveAllowed()
        self.multiBrakeDyn = axsCfgGantry.MultiBrakeDyn()

    # AxsCfgGantryT
    def Pack(self, builder):
        AxsCfgGantryStart(builder)
        AxsCfgGantryAddIsMember(builder, self.isMember)
        AxsCfgGantryAddMoveAllowed(builder, self.moveAllowed)
        AxsCfgGantryAddMultiBrakeDyn(builder, self.multiBrakeDyn)
        axsCfgGantry = AxsCfgGantryEnd(builder)
        return axsCfgGantry
