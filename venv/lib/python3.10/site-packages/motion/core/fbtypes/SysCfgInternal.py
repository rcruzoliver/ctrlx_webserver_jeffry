# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# internal system configuration items
class SysCfgInternal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgInternal()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgInternal(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgInternal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # save the internal system configuration items also, when saving the system config to file?
    # SysCfgInternal
    def Save(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # use the new ipo IVAJ?
    # SysCfgInternal
    def UseIpoIvaj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # enable time measurement?
    # SysCfgInternal
    def TimeMeasurement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Change the timeout for the drive reset
    # SysCfgInternal
    def DriveResetTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 4.0

def SysCfgInternalStart(builder): builder.StartObject(4)
def Start(builder):
    return SysCfgInternalStart(builder)
def SysCfgInternalAddSave(builder, save): builder.PrependBoolSlot(0, save, 0)
def AddSave(builder, save):
    return SysCfgInternalAddSave(builder, save)
def SysCfgInternalAddUseIpoIvaj(builder, useIpoIvaj): builder.PrependBoolSlot(1, useIpoIvaj, 0)
def AddUseIpoIvaj(builder, useIpoIvaj):
    return SysCfgInternalAddUseIpoIvaj(builder, useIpoIvaj)
def SysCfgInternalAddTimeMeasurement(builder, timeMeasurement): builder.PrependBoolSlot(2, timeMeasurement, 0)
def AddTimeMeasurement(builder, timeMeasurement):
    return SysCfgInternalAddTimeMeasurement(builder, timeMeasurement)
def SysCfgInternalAddDriveResetTimeout(builder, driveResetTimeout): builder.PrependFloat64Slot(3, driveResetTimeout, 4.0)
def AddDriveResetTimeout(builder, driveResetTimeout):
    return SysCfgInternalAddDriveResetTimeout(builder, driveResetTimeout)
def SysCfgInternalEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgInternalEnd(builder)

class SysCfgInternalT(object):

    # SysCfgInternalT
    def __init__(self):
        self.save = False  # type: bool
        self.useIpoIvaj = False  # type: bool
        self.timeMeasurement = False  # type: bool
        self.driveResetTimeout = 4.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgInternal = SysCfgInternal()
        sysCfgInternal.Init(buf, pos)
        return cls.InitFromObj(sysCfgInternal)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgInternal):
        x = SysCfgInternalT()
        x._UnPack(sysCfgInternal)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.save == other.save and \
            self.useIpoIvaj == other.useIpoIvaj and \
            self.timeMeasurement == other.timeMeasurement and \
            self.driveResetTimeout == other.driveResetTimeout

    # SysCfgInternalT
    def _UnPack(self, sysCfgInternal):
        if sysCfgInternal is None:
            return
        self.save = sysCfgInternal.Save()
        self.useIpoIvaj = sysCfgInternal.UseIpoIvaj()
        self.timeMeasurement = sysCfgInternal.TimeMeasurement()
        self.driveResetTimeout = sysCfgInternal.DriveResetTimeout()

    # SysCfgInternalT
    def Pack(self, builder):
        SysCfgInternalStart(builder)
        SysCfgInternalAddSave(builder, self.save)
        SysCfgInternalAddUseIpoIvaj(builder, self.useIpoIvaj)
        SysCfgInternalAddTimeMeasurement(builder, self.timeMeasurement)
        SysCfgInternalAddDriveResetTimeout(builder, self.driveResetTimeout)
        sysCfgInternal = SysCfgInternalEnd(builder)
        return sysCfgInternal
