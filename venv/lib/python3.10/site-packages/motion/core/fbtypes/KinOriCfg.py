# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# common configuration of orientation
class KinOriCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinOriCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinOriCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinOriCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DEPRECATED; Do not use! Values in this structure are ignored.
    # KinOriCfg
    def EffectiveRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinOriRadius import KinOriRadius
            obj = KinOriRadius()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # max orientation vel
    # KinOriCfg
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgLimits import KinCfgLimits
            obj = KinCfgLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # general orientation unit configuration of this kinematics
    # KinOriCfg
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.UnitCfgObj import UnitCfgObj
            obj = UnitCfgObj()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Rotation to Linear conversion factor
    # KinOriCfg
    def RotToLinConversion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgRotToLinConversion import KinCfgRotToLinConversion
            obj = KinCfgRotToLinConversion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinOriCfgStart(builder): builder.StartObject(4)
def Start(builder):
    return KinOriCfgStart(builder)
def KinOriCfgAddEffectiveRadius(builder, effectiveRadius): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveRadius), 0)
def AddEffectiveRadius(builder, effectiveRadius):
    return KinOriCfgAddEffectiveRadius(builder, effectiveRadius)
def KinOriCfgAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return KinOriCfgAddLim(builder, lim)
def KinOriCfgAddUnits(builder, units): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)
def AddUnits(builder, units):
    return KinOriCfgAddUnits(builder, units)
def KinOriCfgAddRotToLinConversion(builder, rotToLinConversion): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rotToLinConversion), 0)
def AddRotToLinConversion(builder, rotToLinConversion):
    return KinOriCfgAddRotToLinConversion(builder, rotToLinConversion)
def KinOriCfgEnd(builder): return builder.EndObject()
def End(builder):
    return KinOriCfgEnd(builder)
import motion.core.fbtypes.KinCfgLimits
import motion.core.fbtypes.KinCfgRotToLinConversion
import motion.core.fbtypes.KinOriRadius
import motion.core.fbtypes.UnitCfgObj
try:
    from typing import Optional
except:
    pass

class KinOriCfgT(object):

    # KinOriCfgT
    def __init__(self):
        self.effectiveRadius = None  # type: Optional[motion.core.fbtypes.KinOriRadius.KinOriRadiusT]
        self.lim = None  # type: Optional[motion.core.fbtypes.KinCfgLimits.KinCfgLimitsT]
        self.units = None  # type: Optional[motion.core.fbtypes.UnitCfgObj.UnitCfgObjT]
        self.rotToLinConversion = None  # type: Optional[motion.core.fbtypes.KinCfgRotToLinConversion.KinCfgRotToLinConversionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinOriCfg = KinOriCfg()
        kinOriCfg.Init(buf, pos)
        return cls.InitFromObj(kinOriCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinOriCfg):
        x = KinOriCfgT()
        x._UnPack(kinOriCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.effectiveRadius == other.effectiveRadius and \
            self.lim == other.lim and \
            self.units == other.units and \
            self.rotToLinConversion == other.rotToLinConversion

    # KinOriCfgT
    def _UnPack(self, kinOriCfg):
        if kinOriCfg is None:
            return
        if kinOriCfg.EffectiveRadius() is not None:
            self.effectiveRadius = motion.core.fbtypes.KinOriRadius.KinOriRadiusT.InitFromObj(kinOriCfg.EffectiveRadius())
        if kinOriCfg.Lim() is not None:
            self.lim = motion.core.fbtypes.KinCfgLimits.KinCfgLimitsT.InitFromObj(kinOriCfg.Lim())
        if kinOriCfg.Units() is not None:
            self.units = motion.core.fbtypes.UnitCfgObj.UnitCfgObjT.InitFromObj(kinOriCfg.Units())
        if kinOriCfg.RotToLinConversion() is not None:
            self.rotToLinConversion = motion.core.fbtypes.KinCfgRotToLinConversion.KinCfgRotToLinConversionT.InitFromObj(kinOriCfg.RotToLinConversion())

    # KinOriCfgT
    def Pack(self, builder):
        if self.effectiveRadius is not None:
            effectiveRadius = self.effectiveRadius.Pack(builder)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        if self.units is not None:
            units = self.units.Pack(builder)
        if self.rotToLinConversion is not None:
            rotToLinConversion = self.rotToLinConversion.Pack(builder)
        KinOriCfgStart(builder)
        if self.effectiveRadius is not None:
            KinOriCfgAddEffectiveRadius(builder, effectiveRadius)
        if self.lim is not None:
            KinOriCfgAddLim(builder, lim)
        if self.units is not None:
            KinOriCfgAddUnits(builder, units)
        if self.rotToLinConversion is not None:
            KinOriCfgAddRotToLinConversion(builder, rotToLinConversion)
        kinOriCfg = KinOriCfgEnd(builder)
        return kinOriCfg
