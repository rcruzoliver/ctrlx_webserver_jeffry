# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# axis braking distance
class AxsBrakingDistanceEx(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsBrakingDistanceEx()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsBrakingDistanceEx(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsBrakingDistanceEx
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # selected braking distance types in the calculation
    # default value is [SOFT_STOP, ESTOP]
    # AxsBrakingDistanceEx
    def SelectedTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AxsBrakingDistanceEx
    def SelectedTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # AxsBrakingDistanceEx
    def SelectedTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AxsBrakingDistanceEx
    def SelectedTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # unit in which braking distance value should be calculated
    # default value is the configured unit for the axis
    # AxsBrakingDistanceEx
    def DistanceUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # calculated braking distance
    # AxsBrakingDistanceEx
    def Distance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # the distance type of the calculated braking distance
    # AxsBrakingDistanceEx
    def DistanceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AxsBrakingDistanceExStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsBrakingDistanceExStart(builder)
def AxsBrakingDistanceExAddSelectedTypes(builder, selectedTypes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(selectedTypes), 0)
def AddSelectedTypes(builder, selectedTypes):
    return AxsBrakingDistanceExAddSelectedTypes(builder, selectedTypes)
def AxsBrakingDistanceExStartSelectedTypesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartSelectedTypesVector(builder, numElems):
    return AxsBrakingDistanceExStartSelectedTypesVector(builder, numElems)
def AxsBrakingDistanceExAddDistanceUnit(builder, distanceUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(distanceUnit), 0)
def AddDistanceUnit(builder, distanceUnit):
    return AxsBrakingDistanceExAddDistanceUnit(builder, distanceUnit)
def AxsBrakingDistanceExAddDistance(builder, distance): builder.PrependFloat64Slot(2, distance, 0.0)
def AddDistance(builder, distance):
    return AxsBrakingDistanceExAddDistance(builder, distance)
def AxsBrakingDistanceExAddDistanceType(builder, distanceType): builder.PrependInt8Slot(3, distanceType, 0)
def AddDistanceType(builder, distanceType):
    return AxsBrakingDistanceExAddDistanceType(builder, distanceType)
def AxsBrakingDistanceExEnd(builder): return builder.EndObject()
def End(builder):
    return AxsBrakingDistanceExEnd(builder)
try:
    from typing import List
except:
    pass

class AxsBrakingDistanceExT(object):

    # AxsBrakingDistanceExT
    def __init__(self):
        self.selectedTypes = None  # type: List[int]
        self.distanceUnit = None  # type: str
        self.distance = 0.0  # type: float
        self.distanceType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsBrakingDistanceEx = AxsBrakingDistanceEx()
        axsBrakingDistanceEx.Init(buf, pos)
        return cls.InitFromObj(axsBrakingDistanceEx)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsBrakingDistanceEx):
        x = AxsBrakingDistanceExT()
        x._UnPack(axsBrakingDistanceEx)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.selectedTypes == other.selectedTypes and \
            self.distanceUnit == other.distanceUnit and \
            self.distance == other.distance and \
            self.distanceType == other.distanceType

    # AxsBrakingDistanceExT
    def _UnPack(self, axsBrakingDistanceEx):
        if axsBrakingDistanceEx is None:
            return
        if not axsBrakingDistanceEx.SelectedTypesIsNone():
            if np is None:
                self.selectedTypes = []
                for i in range(axsBrakingDistanceEx.SelectedTypesLength()):
                    self.selectedTypes.append(axsBrakingDistanceEx.SelectedTypes(i))
            else:
                self.selectedTypes = axsBrakingDistanceEx.SelectedTypesAsNumpy()
        self.distanceUnit = axsBrakingDistanceEx.DistanceUnit()
        self.distance = axsBrakingDistanceEx.Distance()
        self.distanceType = axsBrakingDistanceEx.DistanceType()

    # AxsBrakingDistanceExT
    def Pack(self, builder):
        if self.selectedTypes is not None:
            if np is not None and type(self.selectedTypes) is np.ndarray:
                selectedTypes = builder.CreateNumpyVector(self.selectedTypes)
            else:
                AxsBrakingDistanceExStartSelectedTypesVector(builder, len(self.selectedTypes))
                for i in reversed(range(len(self.selectedTypes))):
                    builder.PrependByte(self.selectedTypes[i])
                selectedTypes = builder.EndVector()
        if self.distanceUnit is not None:
            distanceUnit = builder.CreateString(self.distanceUnit)
        AxsBrakingDistanceExStart(builder)
        if self.selectedTypes is not None:
            AxsBrakingDistanceExAddSelectedTypes(builder, selectedTypes)
        if self.distanceUnit is not None:
            AxsBrakingDistanceExAddDistanceUnit(builder, distanceUnit)
        AxsBrakingDistanceExAddDistance(builder, self.distance)
        AxsBrakingDistanceExAddDistanceType(builder, self.distanceType)
        axsBrakingDistanceEx = AxsBrakingDistanceExEnd(builder)
        return axsBrakingDistanceEx
