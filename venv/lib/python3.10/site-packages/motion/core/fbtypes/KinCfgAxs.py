# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of an axis that can be added to a kinematics
class KinCfgAxs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgAxs()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgAxs(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgAxs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the axis
    # KinCfgAxs
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DEPRECATED; (geometric) meaning of the axis in the kinematics when added (only useful for simple Cartesian kinematics); use "acsIndex" for all other cases and leave this out
    # KinCfgAxs
    def AxsMeaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # direction ("+" or "-") of the axis referring to the kinematics coordinate system
    # KinCfgAxs
    def AxsDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # index of the axis in the ACS (axis coordinate system) array of the kinematics (value 255 means "use the axsMeaning")
    # KinCfgAxs
    def AcsIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 255

def KinCfgAxsStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCfgAxsStart(builder)
def KinCfgAxsAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def AddAxsName(builder, axsName):
    return KinCfgAxsAddAxsName(builder, axsName)
def KinCfgAxsAddAxsMeaning(builder, axsMeaning): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(axsMeaning), 0)
def AddAxsMeaning(builder, axsMeaning):
    return KinCfgAxsAddAxsMeaning(builder, axsMeaning)
def KinCfgAxsAddAxsDir(builder, axsDir): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(axsDir), 0)
def AddAxsDir(builder, axsDir):
    return KinCfgAxsAddAxsDir(builder, axsDir)
def KinCfgAxsAddAcsIndex(builder, acsIndex): builder.PrependUint8Slot(3, acsIndex, 255)
def AddAcsIndex(builder, acsIndex):
    return KinCfgAxsAddAcsIndex(builder, acsIndex)
def KinCfgAxsEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgAxsEnd(builder)

class KinCfgAxsT(object):

    # KinCfgAxsT
    def __init__(self):
        self.axsName = None  # type: str
        self.axsMeaning = None  # type: str
        self.axsDir = None  # type: str
        self.acsIndex = 255  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgAxs = KinCfgAxs()
        kinCfgAxs.Init(buf, pos)
        return cls.InitFromObj(kinCfgAxs)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgAxs):
        x = KinCfgAxsT()
        x._UnPack(kinCfgAxs)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axsName == other.axsName and \
            self.axsMeaning == other.axsMeaning and \
            self.axsDir == other.axsDir and \
            self.acsIndex == other.acsIndex

    # KinCfgAxsT
    def _UnPack(self, kinCfgAxs):
        if kinCfgAxs is None:
            return
        self.axsName = kinCfgAxs.AxsName()
        self.axsMeaning = kinCfgAxs.AxsMeaning()
        self.axsDir = kinCfgAxs.AxsDir()
        self.acsIndex = kinCfgAxs.AcsIndex()

    # KinCfgAxsT
    def Pack(self, builder):
        if self.axsName is not None:
            axsName = builder.CreateString(self.axsName)
        if self.axsMeaning is not None:
            axsMeaning = builder.CreateString(self.axsMeaning)
        if self.axsDir is not None:
            axsDir = builder.CreateString(self.axsDir)
        KinCfgAxsStart(builder)
        if self.axsName is not None:
            KinCfgAxsAddAxsName(builder, axsName)
        if self.axsMeaning is not None:
            KinCfgAxsAddAxsMeaning(builder, axsMeaning)
        if self.axsDir is not None:
            KinCfgAxsAddAxsDir(builder, axsDir)
        KinCfgAxsAddAcsIndex(builder, self.acsIndex)
        kinCfgAxs = KinCfgAxsEnd(builder)
        return kinCfgAxs
