# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the move direct commands for a kinematics
class KinCmdMoveDirectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdMoveDirectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdMoveDirectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdMoveDirectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position (or increment for relative position command)
    # KinCmdMoveDirectData
    def KinPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdMoveDirectData
    def KinPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdMoveDirectData
    def KinPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdMoveDirectData
    def KinPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordSys for commanded target position
    # KinCmdMoveDirectData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # should this be a buffered command?
    # KinCmdMoveDirectData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def KinCmdMoveDirectDataStart(builder): builder.StartObject(3)
def Start(builder):
    return KinCmdMoveDirectDataStart(builder)
def KinCmdMoveDirectDataAddKinPos(builder, kinPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kinPos), 0)
def AddKinPos(builder, kinPos):
    return KinCmdMoveDirectDataAddKinPos(builder, kinPos)
def KinCmdMoveDirectDataStartKinPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartKinPosVector(builder, numElems):
    return KinCmdMoveDirectDataStartKinPosVector(builder, numElems)
def KinCmdMoveDirectDataAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def AddCoordSys(builder, coordSys):
    return KinCmdMoveDirectDataAddCoordSys(builder, coordSys)
def KinCmdMoveDirectDataAddBuffered(builder, buffered): builder.PrependBoolSlot(2, buffered, 1)
def AddBuffered(builder, buffered):
    return KinCmdMoveDirectDataAddBuffered(builder, buffered)
def KinCmdMoveDirectDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdMoveDirectDataEnd(builder)
try:
    from typing import List
except:
    pass

class KinCmdMoveDirectDataT(object):

    # KinCmdMoveDirectDataT
    def __init__(self):
        self.kinPos = None  # type: List[float]
        self.coordSys = None  # type: str
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdMoveDirectData = KinCmdMoveDirectData()
        kinCmdMoveDirectData.Init(buf, pos)
        return cls.InitFromObj(kinCmdMoveDirectData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdMoveDirectData):
        x = KinCmdMoveDirectDataT()
        x._UnPack(kinCmdMoveDirectData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.kinPos == other.kinPos and \
            self.coordSys == other.coordSys and \
            self.buffered == other.buffered

    # KinCmdMoveDirectDataT
    def _UnPack(self, kinCmdMoveDirectData):
        if kinCmdMoveDirectData is None:
            return
        if not kinCmdMoveDirectData.KinPosIsNone():
            if np is None:
                self.kinPos = []
                for i in range(kinCmdMoveDirectData.KinPosLength()):
                    self.kinPos.append(kinCmdMoveDirectData.KinPos(i))
            else:
                self.kinPos = kinCmdMoveDirectData.KinPosAsNumpy()
        self.coordSys = kinCmdMoveDirectData.CoordSys()
        self.buffered = kinCmdMoveDirectData.Buffered()

    # KinCmdMoveDirectDataT
    def Pack(self, builder):
        if self.kinPos is not None:
            if np is not None and type(self.kinPos) is np.ndarray:
                kinPos = builder.CreateNumpyVector(self.kinPos)
            else:
                KinCmdMoveDirectDataStartKinPosVector(builder, len(self.kinPos))
                for i in reversed(range(len(self.kinPos))):
                    builder.PrependFloat64(self.kinPos[i])
                kinPos = builder.EndVector()
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        KinCmdMoveDirectDataStart(builder)
        if self.kinPos is not None:
            KinCmdMoveDirectDataAddKinPos(builder, kinPos)
        if self.coordSys is not None:
            KinCmdMoveDirectDataAddCoordSys(builder, coordSys)
        KinCmdMoveDirectDataAddBuffered(builder, self.buffered)
        kinCmdMoveDirectData = KinCmdMoveDirectDataEnd(builder)
        return kinCmdMoveDirectData
