# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently interpolated values
class KinIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinIpoValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinIpoValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently interpolated position
    # KinIpoValues
    def IpoPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinIpoValues
    def IpoPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinIpoValues
    def IpoPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinIpoValues
    def IpoPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # currently interpolated velocity
    # KinIpoValues
    def IpoVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated acceleration
    # KinIpoValues
    def IpoAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated jerk
    # KinIpoValues
    def IpoJrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # units of the currently interpolated position
    # KinIpoValues
    def IpoPosUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinIpoValues
    def IpoPosUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinIpoValues
    def IpoPosUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # unit of the currently interpolated velocity
    # KinIpoValues
    def IpoVelUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the currently interpolated acceleration
    # KinIpoValues
    def IpoAccUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the currently interpolated jerk
    # KinIpoValues
    def IpoJrkUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinIpoValuesStart(builder): builder.StartObject(8)
def Start(builder):
    return KinIpoValuesStart(builder)
def KinIpoValuesAddIpoPos(builder, ipoPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ipoPos), 0)
def AddIpoPos(builder, ipoPos):
    return KinIpoValuesAddIpoPos(builder, ipoPos)
def KinIpoValuesStartIpoPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartIpoPosVector(builder, numElems):
    return KinIpoValuesStartIpoPosVector(builder, numElems)
def KinIpoValuesAddIpoVel(builder, ipoVel): builder.PrependFloat64Slot(1, ipoVel, 0.0)
def AddIpoVel(builder, ipoVel):
    return KinIpoValuesAddIpoVel(builder, ipoVel)
def KinIpoValuesAddIpoAcc(builder, ipoAcc): builder.PrependFloat64Slot(2, ipoAcc, 0.0)
def AddIpoAcc(builder, ipoAcc):
    return KinIpoValuesAddIpoAcc(builder, ipoAcc)
def KinIpoValuesAddIpoJrk(builder, ipoJrk): builder.PrependFloat64Slot(3, ipoJrk, 0.0)
def AddIpoJrk(builder, ipoJrk):
    return KinIpoValuesAddIpoJrk(builder, ipoJrk)
def KinIpoValuesAddIpoPosUnits(builder, ipoPosUnits): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ipoPosUnits), 0)
def AddIpoPosUnits(builder, ipoPosUnits):
    return KinIpoValuesAddIpoPosUnits(builder, ipoPosUnits)
def KinIpoValuesStartIpoPosUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartIpoPosUnitsVector(builder, numElems):
    return KinIpoValuesStartIpoPosUnitsVector(builder, numElems)
def KinIpoValuesAddIpoVelUnits(builder, ipoVelUnits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ipoVelUnits), 0)
def AddIpoVelUnits(builder, ipoVelUnits):
    return KinIpoValuesAddIpoVelUnits(builder, ipoVelUnits)
def KinIpoValuesAddIpoAccUnits(builder, ipoAccUnits): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ipoAccUnits), 0)
def AddIpoAccUnits(builder, ipoAccUnits):
    return KinIpoValuesAddIpoAccUnits(builder, ipoAccUnits)
def KinIpoValuesAddIpoJrkUnits(builder, ipoJrkUnits): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ipoJrkUnits), 0)
def AddIpoJrkUnits(builder, ipoJrkUnits):
    return KinIpoValuesAddIpoJrkUnits(builder, ipoJrkUnits)
def KinIpoValuesEnd(builder): return builder.EndObject()
def End(builder):
    return KinIpoValuesEnd(builder)
try:
    from typing import List
except:
    pass

class KinIpoValuesT(object):

    # KinIpoValuesT
    def __init__(self):
        self.ipoPos = None  # type: List[float]
        self.ipoVel = 0.0  # type: float
        self.ipoAcc = 0.0  # type: float
        self.ipoJrk = 0.0  # type: float
        self.ipoPosUnits = None  # type: List[str]
        self.ipoVelUnits = None  # type: str
        self.ipoAccUnits = None  # type: str
        self.ipoJrkUnits = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinIpoValues = KinIpoValues()
        kinIpoValues.Init(buf, pos)
        return cls.InitFromObj(kinIpoValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinIpoValues):
        x = KinIpoValuesT()
        x._UnPack(kinIpoValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ipoPos == other.ipoPos and \
            self.ipoVel == other.ipoVel and \
            self.ipoAcc == other.ipoAcc and \
            self.ipoJrk == other.ipoJrk and \
            self.ipoPosUnits == other.ipoPosUnits and \
            self.ipoVelUnits == other.ipoVelUnits and \
            self.ipoAccUnits == other.ipoAccUnits and \
            self.ipoJrkUnits == other.ipoJrkUnits

    # KinIpoValuesT
    def _UnPack(self, kinIpoValues):
        if kinIpoValues is None:
            return
        if not kinIpoValues.IpoPosIsNone():
            if np is None:
                self.ipoPos = []
                for i in range(kinIpoValues.IpoPosLength()):
                    self.ipoPos.append(kinIpoValues.IpoPos(i))
            else:
                self.ipoPos = kinIpoValues.IpoPosAsNumpy()
        self.ipoVel = kinIpoValues.IpoVel()
        self.ipoAcc = kinIpoValues.IpoAcc()
        self.ipoJrk = kinIpoValues.IpoJrk()
        if not kinIpoValues.IpoPosUnitsIsNone():
            self.ipoPosUnits = []
            for i in range(kinIpoValues.IpoPosUnitsLength()):
                self.ipoPosUnits.append(kinIpoValues.IpoPosUnits(i))
        self.ipoVelUnits = kinIpoValues.IpoVelUnits()
        self.ipoAccUnits = kinIpoValues.IpoAccUnits()
        self.ipoJrkUnits = kinIpoValues.IpoJrkUnits()

    # KinIpoValuesT
    def Pack(self, builder):
        if self.ipoPos is not None:
            if np is not None and type(self.ipoPos) is np.ndarray:
                ipoPos = builder.CreateNumpyVector(self.ipoPos)
            else:
                KinIpoValuesStartIpoPosVector(builder, len(self.ipoPos))
                for i in reversed(range(len(self.ipoPos))):
                    builder.PrependFloat64(self.ipoPos[i])
                ipoPos = builder.EndVector()
        if self.ipoPosUnits is not None:
            ipoPosUnitslist = []
            for i in range(len(self.ipoPosUnits)):
                ipoPosUnitslist.append(builder.CreateString(self.ipoPosUnits[i]))
            KinIpoValuesStartIpoPosUnitsVector(builder, len(self.ipoPosUnits))
            for i in reversed(range(len(self.ipoPosUnits))):
                builder.PrependUOffsetTRelative(ipoPosUnitslist[i])
            ipoPosUnits = builder.EndVector()
        if self.ipoVelUnits is not None:
            ipoVelUnits = builder.CreateString(self.ipoVelUnits)
        if self.ipoAccUnits is not None:
            ipoAccUnits = builder.CreateString(self.ipoAccUnits)
        if self.ipoJrkUnits is not None:
            ipoJrkUnits = builder.CreateString(self.ipoJrkUnits)
        KinIpoValuesStart(builder)
        if self.ipoPos is not None:
            KinIpoValuesAddIpoPos(builder, ipoPos)
        KinIpoValuesAddIpoVel(builder, self.ipoVel)
        KinIpoValuesAddIpoAcc(builder, self.ipoAcc)
        KinIpoValuesAddIpoJrk(builder, self.ipoJrk)
        if self.ipoPosUnits is not None:
            KinIpoValuesAddIpoPosUnits(builder, ipoPosUnits)
        if self.ipoVelUnits is not None:
            KinIpoValuesAddIpoVelUnits(builder, ipoVelUnits)
        if self.ipoAccUnits is not None:
            KinIpoValuesAddIpoAccUnits(builder, ipoAccUnits)
        if self.ipoJrkUnits is not None:
            KinIpoValuesAddIpoJrkUnits(builder, ipoJrkUnits)
        kinIpoValues = KinIpoValuesEnd(builder)
        return kinIpoValues
