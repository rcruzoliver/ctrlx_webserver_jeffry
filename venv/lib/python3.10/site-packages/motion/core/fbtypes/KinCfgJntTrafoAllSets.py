# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration values of all joint transformation sets
class KinCfgJntTrafoAllSets(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoAllSets()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoAllSets(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoAllSets
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # configuration values of all joint transformation sets
    # KinCfgJntTrafoAllSets
    def AxsTrafoSets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgJntTrafoSet import KinCfgJntTrafoSet
            obj = KinCfgJntTrafoSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgJntTrafoAllSets
    def AxsTrafoSetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgJntTrafoAllSets
    def AxsTrafoSetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgJntTrafoAllSetsStart(builder): builder.StartObject(1)
def Start(builder):
    return KinCfgJntTrafoAllSetsStart(builder)
def KinCfgJntTrafoAllSetsAddAxsTrafoSets(builder, axsTrafoSets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsTrafoSets), 0)
def AddAxsTrafoSets(builder, axsTrafoSets):
    return KinCfgJntTrafoAllSetsAddAxsTrafoSets(builder, axsTrafoSets)
def KinCfgJntTrafoAllSetsStartAxsTrafoSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAxsTrafoSetsVector(builder, numElems):
    return KinCfgJntTrafoAllSetsStartAxsTrafoSetsVector(builder, numElems)
def KinCfgJntTrafoAllSetsEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoAllSetsEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoSet
try:
    from typing import List
except:
    pass

class KinCfgJntTrafoAllSetsT(object):

    # KinCfgJntTrafoAllSetsT
    def __init__(self):
        self.axsTrafoSets = None  # type: List[motion.core.fbtypes.KinCfgJntTrafoSet.KinCfgJntTrafoSetT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoAllSets = KinCfgJntTrafoAllSets()
        kinCfgJntTrafoAllSets.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoAllSets)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoAllSets):
        x = KinCfgJntTrafoAllSetsT()
        x._UnPack(kinCfgJntTrafoAllSets)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axsTrafoSets == other.axsTrafoSets

    # KinCfgJntTrafoAllSetsT
    def _UnPack(self, kinCfgJntTrafoAllSets):
        if kinCfgJntTrafoAllSets is None:
            return
        if not kinCfgJntTrafoAllSets.AxsTrafoSetsIsNone():
            self.axsTrafoSets = []
            for i in range(kinCfgJntTrafoAllSets.AxsTrafoSetsLength()):
                if kinCfgJntTrafoAllSets.AxsTrafoSets(i) is None:
                    self.axsTrafoSets.append(None)
                else:
                    kinCfgJntTrafoSet_ = motion.core.fbtypes.KinCfgJntTrafoSet.KinCfgJntTrafoSetT.InitFromObj(kinCfgJntTrafoAllSets.AxsTrafoSets(i))
                    self.axsTrafoSets.append(kinCfgJntTrafoSet_)

    # KinCfgJntTrafoAllSetsT
    def Pack(self, builder):
        if self.axsTrafoSets is not None:
            axsTrafoSetslist = []
            for i in range(len(self.axsTrafoSets)):
                axsTrafoSetslist.append(self.axsTrafoSets[i].Pack(builder))
            KinCfgJntTrafoAllSetsStartAxsTrafoSetsVector(builder, len(self.axsTrafoSets))
            for i in reversed(range(len(self.axsTrafoSets))):
                builder.PrependUOffsetTRelative(axsTrafoSetslist[i])
            axsTrafoSets = builder.EndVector()
        KinCfgJntTrafoAllSetsStart(builder)
        if self.axsTrafoSets is not None:
            KinCfgJntTrafoAllSetsAddAxsTrafoSets(builder, axsTrafoSets)
        kinCfgJntTrafoAllSets = KinCfgJntTrafoAllSetsEnd(builder)
        return kinCfgJntTrafoAllSets
