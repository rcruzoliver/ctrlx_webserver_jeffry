# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently interpolated values
class IpoAddData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IpoAddData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIpoAddData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IpoAddData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # distance from start position
    # IpoAddData
    def DistFromStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # distance to target position
    # IpoAddData
    def DistToTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # time from start position
    # IpoAddData
    def TimeFromStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # time to target position
    # IpoAddData
    def TimeToTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the distance from start position
    # IpoAddData
    def DistFromStartUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the distance to target position
    # IpoAddData
    def DistToTargetUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the time from start position
    # IpoAddData
    def TimeFromStartUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the time to target position
    # IpoAddData
    def TimeToTargetUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IpoAddDataStart(builder): builder.StartObject(8)
def Start(builder):
    return IpoAddDataStart(builder)
def IpoAddDataAddDistFromStart(builder, distFromStart): builder.PrependFloat64Slot(0, distFromStart, 0.0)
def AddDistFromStart(builder, distFromStart):
    return IpoAddDataAddDistFromStart(builder, distFromStart)
def IpoAddDataAddDistToTarget(builder, distToTarget): builder.PrependFloat64Slot(1, distToTarget, 0.0)
def AddDistToTarget(builder, distToTarget):
    return IpoAddDataAddDistToTarget(builder, distToTarget)
def IpoAddDataAddTimeFromStart(builder, timeFromStart): builder.PrependFloat64Slot(2, timeFromStart, 0.0)
def AddTimeFromStart(builder, timeFromStart):
    return IpoAddDataAddTimeFromStart(builder, timeFromStart)
def IpoAddDataAddTimeToTarget(builder, timeToTarget): builder.PrependFloat64Slot(3, timeToTarget, 0.0)
def AddTimeToTarget(builder, timeToTarget):
    return IpoAddDataAddTimeToTarget(builder, timeToTarget)
def IpoAddDataAddDistFromStartUnit(builder, distFromStartUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(distFromStartUnit), 0)
def AddDistFromStartUnit(builder, distFromStartUnit):
    return IpoAddDataAddDistFromStartUnit(builder, distFromStartUnit)
def IpoAddDataAddDistToTargetUnit(builder, distToTargetUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(distToTargetUnit), 0)
def AddDistToTargetUnit(builder, distToTargetUnit):
    return IpoAddDataAddDistToTargetUnit(builder, distToTargetUnit)
def IpoAddDataAddTimeFromStartUnit(builder, timeFromStartUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(timeFromStartUnit), 0)
def AddTimeFromStartUnit(builder, timeFromStartUnit):
    return IpoAddDataAddTimeFromStartUnit(builder, timeFromStartUnit)
def IpoAddDataAddTimeToTargetUnit(builder, timeToTargetUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(timeToTargetUnit), 0)
def AddTimeToTargetUnit(builder, timeToTargetUnit):
    return IpoAddDataAddTimeToTargetUnit(builder, timeToTargetUnit)
def IpoAddDataEnd(builder): return builder.EndObject()
def End(builder):
    return IpoAddDataEnd(builder)

class IpoAddDataT(object):

    # IpoAddDataT
    def __init__(self):
        self.distFromStart = 0.0  # type: float
        self.distToTarget = 0.0  # type: float
        self.timeFromStart = 0.0  # type: float
        self.timeToTarget = 0.0  # type: float
        self.distFromStartUnit = None  # type: str
        self.distToTargetUnit = None  # type: str
        self.timeFromStartUnit = None  # type: str
        self.timeToTargetUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ipoAddData = IpoAddData()
        ipoAddData.Init(buf, pos)
        return cls.InitFromObj(ipoAddData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ipoAddData):
        x = IpoAddDataT()
        x._UnPack(ipoAddData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.distFromStart == other.distFromStart and \
            self.distToTarget == other.distToTarget and \
            self.timeFromStart == other.timeFromStart and \
            self.timeToTarget == other.timeToTarget and \
            self.distFromStartUnit == other.distFromStartUnit and \
            self.distToTargetUnit == other.distToTargetUnit and \
            self.timeFromStartUnit == other.timeFromStartUnit and \
            self.timeToTargetUnit == other.timeToTargetUnit

    # IpoAddDataT
    def _UnPack(self, ipoAddData):
        if ipoAddData is None:
            return
        self.distFromStart = ipoAddData.DistFromStart()
        self.distToTarget = ipoAddData.DistToTarget()
        self.timeFromStart = ipoAddData.TimeFromStart()
        self.timeToTarget = ipoAddData.TimeToTarget()
        self.distFromStartUnit = ipoAddData.DistFromStartUnit()
        self.distToTargetUnit = ipoAddData.DistToTargetUnit()
        self.timeFromStartUnit = ipoAddData.TimeFromStartUnit()
        self.timeToTargetUnit = ipoAddData.TimeToTargetUnit()

    # IpoAddDataT
    def Pack(self, builder):
        if self.distFromStartUnit is not None:
            distFromStartUnit = builder.CreateString(self.distFromStartUnit)
        if self.distToTargetUnit is not None:
            distToTargetUnit = builder.CreateString(self.distToTargetUnit)
        if self.timeFromStartUnit is not None:
            timeFromStartUnit = builder.CreateString(self.timeFromStartUnit)
        if self.timeToTargetUnit is not None:
            timeToTargetUnit = builder.CreateString(self.timeToTargetUnit)
        IpoAddDataStart(builder)
        IpoAddDataAddDistFromStart(builder, self.distFromStart)
        IpoAddDataAddDistToTarget(builder, self.distToTarget)
        IpoAddDataAddTimeFromStart(builder, self.timeFromStart)
        IpoAddDataAddTimeToTarget(builder, self.timeToTarget)
        if self.distFromStartUnit is not None:
            IpoAddDataAddDistFromStartUnit(builder, distFromStartUnit)
        if self.distToTargetUnit is not None:
            IpoAddDataAddDistToTargetUnit(builder, distToTargetUnit)
        if self.timeFromStartUnit is not None:
            IpoAddDataAddTimeFromStartUnit(builder, timeFromStartUnit)
        if self.timeToTargetUnit is not None:
            IpoAddDataAddTimeToTargetUnit(builder, timeToTargetUnit)
        ipoAddData = IpoAddDataEnd(builder)
        return ipoAddData
