# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option SafeArea (monitoring of safe zones and work areas) for kinematics
class KinCmdOptSafeAreaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptSafeAreaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdOptSafeAreaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdOptSafeAreaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # KinCmdOptSafeAreaData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the safe zone or work area that should become active/disabled as set in the configuration
    # KinCmdOptSafeAreaData
    def SafeArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCmdOptSafeAreaDataStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCmdOptSafeAreaDataStart(builder)
def KinCmdOptSafeAreaDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def AddPermType(builder, permType):
    return KinCmdOptSafeAreaDataAddPermType(builder, permType)
def KinCmdOptSafeAreaDataAddSafeArea(builder, safeArea): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(safeArea), 0)
def AddSafeArea(builder, safeArea):
    return KinCmdOptSafeAreaDataAddSafeArea(builder, safeArea)
def KinCmdOptSafeAreaDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdOptSafeAreaDataEnd(builder)

class KinCmdOptSafeAreaDataT(object):

    # KinCmdOptSafeAreaDataT
    def __init__(self):
        self.permType = None  # type: str
        self.safeArea = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptSafeAreaData = KinCmdOptSafeAreaData()
        kinCmdOptSafeAreaData.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptSafeAreaData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdOptSafeAreaData):
        x = KinCmdOptSafeAreaDataT()
        x._UnPack(kinCmdOptSafeAreaData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.permType == other.permType and \
            self.safeArea == other.safeArea

    # KinCmdOptSafeAreaDataT
    def _UnPack(self, kinCmdOptSafeAreaData):
        if kinCmdOptSafeAreaData is None:
            return
        self.permType = kinCmdOptSafeAreaData.PermType()
        self.safeArea = kinCmdOptSafeAreaData.SafeArea()

    # KinCmdOptSafeAreaDataT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        if self.safeArea is not None:
            safeArea = builder.CreateString(self.safeArea)
        KinCmdOptSafeAreaDataStart(builder)
        if self.permType is not None:
            KinCmdOptSafeAreaDataAddPermType(builder, permType)
        if self.safeArea is not None:
            KinCmdOptSafeAreaDataAddSafeArea(builder, safeArea)
        kinCmdOptSafeAreaData = KinCmdOptSafeAreaDataEnd(builder)
        return kinCmdOptSafeAreaData
