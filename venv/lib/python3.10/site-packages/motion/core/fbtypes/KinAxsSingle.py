# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# informations of an axis that is part of a kinematics
class KinAxsSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinAxsSingle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinAxsSingle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinAxsSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DEPRECATED; (geometric) meaning of the axis in the kinematics (only useful for simple Cartesian kinematics); use "acsIndex" for all other cases
    # KinAxsSingle
    def Meaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the axis
    # KinAxsSingle
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # direction ("+" or "-") of the axis referring to the kinematics coordinate system
    # KinAxsSingle
    def Dir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # index of the axis in the ACS (axis coordinate system) array of the kinematics
    # KinAxsSingle
    def AcsIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def KinAxsSingleStart(builder): builder.StartObject(4)
def Start(builder):
    return KinAxsSingleStart(builder)
def KinAxsSingleAddMeaning(builder, meaning): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(meaning), 0)
def AddMeaning(builder, meaning):
    return KinAxsSingleAddMeaning(builder, meaning)
def KinAxsSingleAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinAxsSingleAddName(builder, name)
def KinAxsSingleAddDir(builder, dir): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dir), 0)
def AddDir(builder, dir):
    return KinAxsSingleAddDir(builder, dir)
def KinAxsSingleAddAcsIndex(builder, acsIndex): builder.PrependUint8Slot(3, acsIndex, 0)
def AddAcsIndex(builder, acsIndex):
    return KinAxsSingleAddAcsIndex(builder, acsIndex)
def KinAxsSingleEnd(builder): return builder.EndObject()
def End(builder):
    return KinAxsSingleEnd(builder)

class KinAxsSingleT(object):

    # KinAxsSingleT
    def __init__(self):
        self.meaning = None  # type: str
        self.name = None  # type: str
        self.dir = None  # type: str
        self.acsIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinAxsSingle = KinAxsSingle()
        kinAxsSingle.Init(buf, pos)
        return cls.InitFromObj(kinAxsSingle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinAxsSingle):
        x = KinAxsSingleT()
        x._UnPack(kinAxsSingle)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.meaning == other.meaning and \
            self.name == other.name and \
            self.dir == other.dir and \
            self.acsIndex == other.acsIndex

    # KinAxsSingleT
    def _UnPack(self, kinAxsSingle):
        if kinAxsSingle is None:
            return
        self.meaning = kinAxsSingle.Meaning()
        self.name = kinAxsSingle.Name()
        self.dir = kinAxsSingle.Dir()
        self.acsIndex = kinAxsSingle.AcsIndex()

    # KinAxsSingleT
    def Pack(self, builder):
        if self.meaning is not None:
            meaning = builder.CreateString(self.meaning)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.dir is not None:
            dir = builder.CreateString(self.dir)
        KinAxsSingleStart(builder)
        if self.meaning is not None:
            KinAxsSingleAddMeaning(builder, meaning)
        if self.name is not None:
            KinAxsSingleAddName(builder, name)
        if self.dir is not None:
            KinAxsSingleAddDir(builder, dir)
        KinAxsSingleAddAcsIndex(builder, self.acsIndex)
        kinAxsSingle = KinAxsSingleEnd(builder)
        return kinAxsSingle
