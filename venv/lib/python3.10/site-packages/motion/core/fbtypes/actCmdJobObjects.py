# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# get informations of a single active command
class actCmdJobObjects(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = actCmdJobObjects()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsactCmdJobObjects(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # actCmdJobObjects
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command type name (e.g. PosAbs)
    # actCmdJobObjects
    def CmdName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # array of the strings of the jobObjects (including parameters)
    # actCmdJobObjects
    def JobObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # actCmdJobObjects
    def JobObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # actCmdJobObjects
    def JobObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def actCmdJobObjectsStart(builder): builder.StartObject(2)
def Start(builder):
    return actCmdJobObjectsStart(builder)
def actCmdJobObjectsAddCmdName(builder, cmdName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmdName), 0)
def AddCmdName(builder, cmdName):
    return actCmdJobObjectsAddCmdName(builder, cmdName)
def actCmdJobObjectsAddJobObjects(builder, jobObjects): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(jobObjects), 0)
def AddJobObjects(builder, jobObjects):
    return actCmdJobObjectsAddJobObjects(builder, jobObjects)
def actCmdJobObjectsStartJobObjectsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartJobObjectsVector(builder, numElems):
    return actCmdJobObjectsStartJobObjectsVector(builder, numElems)
def actCmdJobObjectsEnd(builder): return builder.EndObject()
def End(builder):
    return actCmdJobObjectsEnd(builder)
try:
    from typing import List
except:
    pass

class actCmdJobObjectsT(object):

    # actCmdJobObjectsT
    def __init__(self):
        self.cmdName = None  # type: str
        self.jobObjects = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        actCmdJobObjects = actCmdJobObjects()
        actCmdJobObjects.Init(buf, pos)
        return cls.InitFromObj(actCmdJobObjects)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, actCmdJobObjects):
        x = actCmdJobObjectsT()
        x._UnPack(actCmdJobObjects)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cmdName == other.cmdName and \
            self.jobObjects == other.jobObjects

    # actCmdJobObjectsT
    def _UnPack(self, actCmdJobObjects):
        if actCmdJobObjects is None:
            return
        self.cmdName = actCmdJobObjects.CmdName()
        if not actCmdJobObjects.JobObjectsIsNone():
            self.jobObjects = []
            for i in range(actCmdJobObjects.JobObjectsLength()):
                self.jobObjects.append(actCmdJobObjects.JobObjects(i))

    # actCmdJobObjectsT
    def Pack(self, builder):
        if self.cmdName is not None:
            cmdName = builder.CreateString(self.cmdName)
        if self.jobObjects is not None:
            jobObjectslist = []
            for i in range(len(self.jobObjects)):
                jobObjectslist.append(builder.CreateString(self.jobObjects[i]))
            actCmdJobObjectsStartJobObjectsVector(builder, len(self.jobObjects))
            for i in reversed(range(len(self.jobObjects))):
                builder.PrependUOffsetTRelative(jobObjectslist[i])
            jobObjects = builder.EndVector()
        actCmdJobObjectsStart(builder)
        if self.cmdName is not None:
            actCmdJobObjectsAddCmdName(builder, cmdName)
        if self.jobObjects is not None:
            actCmdJobObjectsAddJobObjects(builder, jobObjects)
        actCmdJobObjects = actCmdJobObjectsEnd(builder)
        return actCmdJobObjects
