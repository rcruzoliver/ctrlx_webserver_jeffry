# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# get informations of all active commands and commands that were recently executed of a single motion object
class allDebugCmdInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = allDebugCmdInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsallDebugCmdInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # allDebugCmdInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all main motion commands (starting with the most recent active command)
    # allDebugCmdInfo
    def MainCmds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.debugCmdInfo import debugCmdInfo
            obj = debugCmdInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # allDebugCmdInfo
    def MainCmdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # allDebugCmdInfo
    def MainCmdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # vector of all additional active motion commands
    # allDebugCmdInfo
    def AddCmds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.debugCmdInfo import debugCmdInfo
            obj = debugCmdInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # allDebugCmdInfo
    def AddCmdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # allDebugCmdInfo
    def AddCmdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def allDebugCmdInfoStart(builder): builder.StartObject(2)
def Start(builder):
    return allDebugCmdInfoStart(builder)
def allDebugCmdInfoAddMainCmds(builder, mainCmds): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainCmds), 0)
def AddMainCmds(builder, mainCmds):
    return allDebugCmdInfoAddMainCmds(builder, mainCmds)
def allDebugCmdInfoStartMainCmdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMainCmdsVector(builder, numElems):
    return allDebugCmdInfoStartMainCmdsVector(builder, numElems)
def allDebugCmdInfoAddAddCmds(builder, addCmds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(addCmds), 0)
def AddAddCmds(builder, addCmds):
    return allDebugCmdInfoAddAddCmds(builder, addCmds)
def allDebugCmdInfoStartAddCmdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAddCmdsVector(builder, numElems):
    return allDebugCmdInfoStartAddCmdsVector(builder, numElems)
def allDebugCmdInfoEnd(builder): return builder.EndObject()
def End(builder):
    return allDebugCmdInfoEnd(builder)
import motion.core.fbtypes.debugCmdInfo
try:
    from typing import List
except:
    pass

class allDebugCmdInfoT(object):

    # allDebugCmdInfoT
    def __init__(self):
        self.mainCmds = None  # type: List[motion.core.fbtypes.debugCmdInfo.debugCmdInfoT]
        self.addCmds = None  # type: List[motion.core.fbtypes.debugCmdInfo.debugCmdInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        allDebugCmdInfo = allDebugCmdInfo()
        allDebugCmdInfo.Init(buf, pos)
        return cls.InitFromObj(allDebugCmdInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, allDebugCmdInfo):
        x = allDebugCmdInfoT()
        x._UnPack(allDebugCmdInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainCmds == other.mainCmds and \
            self.addCmds == other.addCmds

    # allDebugCmdInfoT
    def _UnPack(self, allDebugCmdInfo):
        if allDebugCmdInfo is None:
            return
        if not allDebugCmdInfo.MainCmdsIsNone():
            self.mainCmds = []
            for i in range(allDebugCmdInfo.MainCmdsLength()):
                if allDebugCmdInfo.MainCmds(i) is None:
                    self.mainCmds.append(None)
                else:
                    debugCmdInfo_ = motion.core.fbtypes.debugCmdInfo.debugCmdInfoT.InitFromObj(allDebugCmdInfo.MainCmds(i))
                    self.mainCmds.append(debugCmdInfo_)
        if not allDebugCmdInfo.AddCmdsIsNone():
            self.addCmds = []
            for i in range(allDebugCmdInfo.AddCmdsLength()):
                if allDebugCmdInfo.AddCmds(i) is None:
                    self.addCmds.append(None)
                else:
                    debugCmdInfo_ = motion.core.fbtypes.debugCmdInfo.debugCmdInfoT.InitFromObj(allDebugCmdInfo.AddCmds(i))
                    self.addCmds.append(debugCmdInfo_)

    # allDebugCmdInfoT
    def Pack(self, builder):
        if self.mainCmds is not None:
            mainCmdslist = []
            for i in range(len(self.mainCmds)):
                mainCmdslist.append(self.mainCmds[i].Pack(builder))
            allDebugCmdInfoStartMainCmdsVector(builder, len(self.mainCmds))
            for i in reversed(range(len(self.mainCmds))):
                builder.PrependUOffsetTRelative(mainCmdslist[i])
            mainCmds = builder.EndVector()
        if self.addCmds is not None:
            addCmdslist = []
            for i in range(len(self.addCmds)):
                addCmdslist.append(self.addCmds[i].Pack(builder))
            allDebugCmdInfoStartAddCmdsVector(builder, len(self.addCmds))
            for i in reversed(range(len(self.addCmds))):
                builder.PrependUOffsetTRelative(addCmdslist[i])
            addCmds = builder.EndVector()
        allDebugCmdInfoStart(builder)
        if self.mainCmds is not None:
            allDebugCmdInfoAddMainCmds(builder, mainCmds)
        if self.addCmds is not None:
            allDebugCmdInfoAddAddCmds(builder, addCmds)
        allDebugCmdInfo = allDebugCmdInfoEnd(builder)
        return allDebugCmdInfo
