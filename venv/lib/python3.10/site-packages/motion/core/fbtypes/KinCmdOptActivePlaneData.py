# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option ActivePlane for kinematics
class KinCmdOptActivePlaneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptActivePlaneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdOptActivePlaneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdOptActivePlaneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # KinCmdOptActivePlaneData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # type of the new active plane
    # KinCmdOptActivePlaneData
    def Plane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def KinCmdOptActivePlaneDataStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCmdOptActivePlaneDataStart(builder)
def KinCmdOptActivePlaneDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def AddPermType(builder, permType):
    return KinCmdOptActivePlaneDataAddPermType(builder, permType)
def KinCmdOptActivePlaneDataAddPlane(builder, plane): builder.PrependInt8Slot(1, plane, 0)
def AddPlane(builder, plane):
    return KinCmdOptActivePlaneDataAddPlane(builder, plane)
def KinCmdOptActivePlaneDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdOptActivePlaneDataEnd(builder)

class KinCmdOptActivePlaneDataT(object):

    # KinCmdOptActivePlaneDataT
    def __init__(self):
        self.permType = None  # type: str
        self.plane = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptActivePlaneData = KinCmdOptActivePlaneData()
        kinCmdOptActivePlaneData.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptActivePlaneData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdOptActivePlaneData):
        x = KinCmdOptActivePlaneDataT()
        x._UnPack(kinCmdOptActivePlaneData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.permType == other.permType and \
            self.plane == other.plane

    # KinCmdOptActivePlaneDataT
    def _UnPack(self, kinCmdOptActivePlaneData):
        if kinCmdOptActivePlaneData is None:
            return
        self.permType = kinCmdOptActivePlaneData.PermType()
        self.plane = kinCmdOptActivePlaneData.Plane()

    # KinCmdOptActivePlaneDataT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        KinCmdOptActivePlaneDataStart(builder)
        if self.permType is not None:
            KinCmdOptActivePlaneDataAddPermType(builder, permType)
        KinCmdOptActivePlaneDataAddPlane(builder, self.plane)
        kinCmdOptActivePlaneData = KinCmdOptActivePlaneDataEnd(builder)
        return kinCmdOptActivePlaneData
