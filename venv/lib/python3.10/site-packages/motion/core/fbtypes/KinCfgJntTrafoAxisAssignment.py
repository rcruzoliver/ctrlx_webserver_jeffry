# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a all axis assignments for a joint transformation
class KinCfgJntTrafoAxisAssignment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoAxisAssignment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoAxisAssignment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoAxisAssignment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # assignment as pairs of <axis name; ACS index>
    # KinCfgJntTrafoAxisAssignment
    def Assignment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgJntTrafoSingleAxisAssignment import KinCfgJntTrafoSingleAxisAssignment
            obj = KinCfgJntTrafoSingleAxisAssignment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgJntTrafoAxisAssignment
    def AssignmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgJntTrafoAxisAssignment
    def AssignmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgJntTrafoAxisAssignmentStart(builder): builder.StartObject(1)
def Start(builder):
    return KinCfgJntTrafoAxisAssignmentStart(builder)
def KinCfgJntTrafoAxisAssignmentAddAssignment(builder, assignment): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(assignment), 0)
def AddAssignment(builder, assignment):
    return KinCfgJntTrafoAxisAssignmentAddAssignment(builder, assignment)
def KinCfgJntTrafoAxisAssignmentStartAssignmentVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAssignmentVector(builder, numElems):
    return KinCfgJntTrafoAxisAssignmentStartAssignmentVector(builder, numElems)
def KinCfgJntTrafoAxisAssignmentEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoAxisAssignmentEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoSingleAxisAssignment
try:
    from typing import List
except:
    pass

class KinCfgJntTrafoAxisAssignmentT(object):

    # KinCfgJntTrafoAxisAssignmentT
    def __init__(self):
        self.assignment = None  # type: List[motion.core.fbtypes.KinCfgJntTrafoSingleAxisAssignment.KinCfgJntTrafoSingleAxisAssignmentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoAxisAssignment = KinCfgJntTrafoAxisAssignment()
        kinCfgJntTrafoAxisAssignment.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoAxisAssignment)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoAxisAssignment):
        x = KinCfgJntTrafoAxisAssignmentT()
        x._UnPack(kinCfgJntTrafoAxisAssignment)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.assignment == other.assignment

    # KinCfgJntTrafoAxisAssignmentT
    def _UnPack(self, kinCfgJntTrafoAxisAssignment):
        if kinCfgJntTrafoAxisAssignment is None:
            return
        if not kinCfgJntTrafoAxisAssignment.AssignmentIsNone():
            self.assignment = []
            for i in range(kinCfgJntTrafoAxisAssignment.AssignmentLength()):
                if kinCfgJntTrafoAxisAssignment.Assignment(i) is None:
                    self.assignment.append(None)
                else:
                    kinCfgJntTrafoSingleAxisAssignment_ = motion.core.fbtypes.KinCfgJntTrafoSingleAxisAssignment.KinCfgJntTrafoSingleAxisAssignmentT.InitFromObj(kinCfgJntTrafoAxisAssignment.Assignment(i))
                    self.assignment.append(kinCfgJntTrafoSingleAxisAssignment_)

    # KinCfgJntTrafoAxisAssignmentT
    def Pack(self, builder):
        if self.assignment is not None:
            assignmentlist = []
            for i in range(len(self.assignment)):
                assignmentlist.append(self.assignment[i].Pack(builder))
            KinCfgJntTrafoAxisAssignmentStartAssignmentVector(builder, len(self.assignment))
            for i in reversed(range(len(self.assignment))):
                builder.PrependUOffsetTRelative(assignmentlist[i])
            assignment = builder.EndVector()
        KinCfgJntTrafoAxisAssignmentStart(builder)
        if self.assignment is not None:
            KinCfgJntTrafoAxisAssignmentAddAssignment(builder, assignment)
        kinCfgJntTrafoAxisAssignment = KinCfgJntTrafoAxisAssignmentEnd(builder)
        return kinCfgJntTrafoAxisAssignment
