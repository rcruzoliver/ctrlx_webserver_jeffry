# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration parameter of a single joint transformation
class KinCfgJntTrafoAllParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoAllParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoAllParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoAllParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # axis assignment 
    # KinCfgJntTrafoAllParam
    def AxisAssignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgJntTrafoAxisAssignment import KinCfgJntTrafoAxisAssignment
            obj = KinCfgJntTrafoAxisAssignment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # all configuration parameter groups of this joint transformation
    # KinCfgJntTrafoAllParam
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgJntTrafoParamGroup import KinCfgJntTrafoParamGroup
            obj = KinCfgJntTrafoParamGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgJntTrafoAllParam
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgJntTrafoAllParam
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # axis zero point offsets
    # KinCfgJntTrafoAllParam
    def AxisOffsets(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgJntTrafoAxisOffsets import KinCfgJntTrafoAxisOffsets
            obj = KinCfgJntTrafoAxisOffsets()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgJntTrafoAllParamStart(builder): builder.StartObject(3)
def Start(builder):
    return KinCfgJntTrafoAllParamStart(builder)
def KinCfgJntTrafoAllParamAddAxisAssignment(builder, axisAssignment): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axisAssignment), 0)
def AddAxisAssignment(builder, axisAssignment):
    return KinCfgJntTrafoAllParamAddAxisAssignment(builder, axisAssignment)
def KinCfgJntTrafoAllParamAddGroups(builder, groups): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)
def AddGroups(builder, groups):
    return KinCfgJntTrafoAllParamAddGroups(builder, groups)
def KinCfgJntTrafoAllParamStartGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupsVector(builder, numElems):
    return KinCfgJntTrafoAllParamStartGroupsVector(builder, numElems)
def KinCfgJntTrafoAllParamAddAxisOffsets(builder, axisOffsets): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(axisOffsets), 0)
def AddAxisOffsets(builder, axisOffsets):
    return KinCfgJntTrafoAllParamAddAxisOffsets(builder, axisOffsets)
def KinCfgJntTrafoAllParamEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoAllParamEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoAxisAssignment
import motion.core.fbtypes.KinCfgJntTrafoAxisOffsets
import motion.core.fbtypes.KinCfgJntTrafoParamGroup
try:
    from typing import List, Optional
except:
    pass

class KinCfgJntTrafoAllParamT(object):

    # KinCfgJntTrafoAllParamT
    def __init__(self):
        self.axisAssignment = None  # type: Optional[motion.core.fbtypes.KinCfgJntTrafoAxisAssignment.KinCfgJntTrafoAxisAssignmentT]
        self.groups = None  # type: List[motion.core.fbtypes.KinCfgJntTrafoParamGroup.KinCfgJntTrafoParamGroupT]
        self.axisOffsets = None  # type: Optional[motion.core.fbtypes.KinCfgJntTrafoAxisOffsets.KinCfgJntTrafoAxisOffsetsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoAllParam = KinCfgJntTrafoAllParam()
        kinCfgJntTrafoAllParam.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoAllParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoAllParam):
        x = KinCfgJntTrafoAllParamT()
        x._UnPack(kinCfgJntTrafoAllParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axisAssignment == other.axisAssignment and \
            self.groups == other.groups and \
            self.axisOffsets == other.axisOffsets

    # KinCfgJntTrafoAllParamT
    def _UnPack(self, kinCfgJntTrafoAllParam):
        if kinCfgJntTrafoAllParam is None:
            return
        if kinCfgJntTrafoAllParam.AxisAssignment() is not None:
            self.axisAssignment = motion.core.fbtypes.KinCfgJntTrafoAxisAssignment.KinCfgJntTrafoAxisAssignmentT.InitFromObj(kinCfgJntTrafoAllParam.AxisAssignment())
        if not kinCfgJntTrafoAllParam.GroupsIsNone():
            self.groups = []
            for i in range(kinCfgJntTrafoAllParam.GroupsLength()):
                if kinCfgJntTrafoAllParam.Groups(i) is None:
                    self.groups.append(None)
                else:
                    kinCfgJntTrafoParamGroup_ = motion.core.fbtypes.KinCfgJntTrafoParamGroup.KinCfgJntTrafoParamGroupT.InitFromObj(kinCfgJntTrafoAllParam.Groups(i))
                    self.groups.append(kinCfgJntTrafoParamGroup_)
        if kinCfgJntTrafoAllParam.AxisOffsets() is not None:
            self.axisOffsets = motion.core.fbtypes.KinCfgJntTrafoAxisOffsets.KinCfgJntTrafoAxisOffsetsT.InitFromObj(kinCfgJntTrafoAllParam.AxisOffsets())

    # KinCfgJntTrafoAllParamT
    def Pack(self, builder):
        if self.axisAssignment is not None:
            axisAssignment = self.axisAssignment.Pack(builder)
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(self.groups[i].Pack(builder))
            KinCfgJntTrafoAllParamStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector()
        if self.axisOffsets is not None:
            axisOffsets = self.axisOffsets.Pack(builder)
        KinCfgJntTrafoAllParamStart(builder)
        if self.axisAssignment is not None:
            KinCfgJntTrafoAllParamAddAxisAssignment(builder, axisAssignment)
        if self.groups is not None:
            KinCfgJntTrafoAllParamAddGroups(builder, groups)
        if self.axisOffsets is not None:
            KinCfgJntTrafoAllParamAddAxisOffsets(builder, axisOffsets)
        kinCfgJntTrafoAllParam = KinCfgJntTrafoAllParamEnd(builder)
        return kinCfgJntTrafoAllParam
