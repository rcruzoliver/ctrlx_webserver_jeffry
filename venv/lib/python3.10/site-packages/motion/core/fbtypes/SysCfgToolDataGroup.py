# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single group of sets for tool data
class SysCfgToolDataGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgToolDataGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgToolDataGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgToolDataGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the group (required for load/save)
    # SysCfgToolDataGroup
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # vector of tool data sets in this group (sequence matters!)
    # SysCfgToolDataGroup
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgToolDataGroup
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataGroup
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SysCfgToolDataGroupStart(builder): builder.StartObject(2)
def Start(builder):
    return SysCfgToolDataGroupStart(builder)
def SysCfgToolDataGroupAddGroupName(builder, groupName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)
def AddGroupName(builder, groupName):
    return SysCfgToolDataGroupAddGroupName(builder, groupName)
def SysCfgToolDataGroupAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def AddSets(builder, sets):
    return SysCfgToolDataGroupAddSets(builder, sets)
def SysCfgToolDataGroupStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSetsVector(builder, numElems):
    return SysCfgToolDataGroupStartSetsVector(builder, numElems)
def SysCfgToolDataGroupEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgToolDataGroupEnd(builder)
try:
    from typing import List
except:
    pass

class SysCfgToolDataGroupT(object):

    # SysCfgToolDataGroupT
    def __init__(self):
        self.groupName = None  # type: str
        self.sets = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgToolDataGroup = SysCfgToolDataGroup()
        sysCfgToolDataGroup.Init(buf, pos)
        return cls.InitFromObj(sysCfgToolDataGroup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgToolDataGroup):
        x = SysCfgToolDataGroupT()
        x._UnPack(sysCfgToolDataGroup)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groupName == other.groupName and \
            self.sets == other.sets

    # SysCfgToolDataGroupT
    def _UnPack(self, sysCfgToolDataGroup):
        if sysCfgToolDataGroup is None:
            return
        self.groupName = sysCfgToolDataGroup.GroupName()
        if not sysCfgToolDataGroup.SetsIsNone():
            self.sets = []
            for i in range(sysCfgToolDataGroup.SetsLength()):
                self.sets.append(sysCfgToolDataGroup.Sets(i))

    # SysCfgToolDataGroupT
    def Pack(self, builder):
        if self.groupName is not None:
            groupName = builder.CreateString(self.groupName)
        if self.sets is not None:
            setslist = []
            for i in range(len(self.sets)):
                setslist.append(builder.CreateString(self.sets[i]))
            SysCfgToolDataGroupStartSetsVector(builder, len(self.sets))
            for i in reversed(range(len(self.sets))):
                builder.PrependUOffsetTRelative(setslist[i])
            sets = builder.EndVector()
        SysCfgToolDataGroupStart(builder)
        if self.groupName is not None:
            SysCfgToolDataGroupAddGroupName(builder, groupName)
        if self.sets is not None:
            SysCfgToolDataGroupAddSets(builder, sets)
        sysCfgToolDataGroup = SysCfgToolDataGroupEnd(builder)
        return sysCfgToolDataGroup
