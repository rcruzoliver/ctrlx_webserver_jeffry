# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# common configuration of orientation
class KinGeoCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinGeoCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinGeoCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinGeoCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # orientation config
    # KinGeoCfg
    def Orientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinOriCfg import KinOriCfg
            obj = KinOriCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # configuration for singularity handling
    # KinGeoCfg
    def Singularity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgSingularity import KinCfgSingularity
            obj = KinCfgSingularity()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinGeoCfgStart(builder): builder.StartObject(2)
def Start(builder):
    return KinGeoCfgStart(builder)
def KinGeoCfgAddOrientation(builder, orientation): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)
def AddOrientation(builder, orientation):
    return KinGeoCfgAddOrientation(builder, orientation)
def KinGeoCfgAddSingularity(builder, singularity): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(singularity), 0)
def AddSingularity(builder, singularity):
    return KinGeoCfgAddSingularity(builder, singularity)
def KinGeoCfgEnd(builder): return builder.EndObject()
def End(builder):
    return KinGeoCfgEnd(builder)
import motion.core.fbtypes.KinCfgSingularity
import motion.core.fbtypes.KinOriCfg
try:
    from typing import Optional
except:
    pass

class KinGeoCfgT(object):

    # KinGeoCfgT
    def __init__(self):
        self.orientation = None  # type: Optional[motion.core.fbtypes.KinOriCfg.KinOriCfgT]
        self.singularity = None  # type: Optional[motion.core.fbtypes.KinCfgSingularity.KinCfgSingularityT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinGeoCfg = KinGeoCfg()
        kinGeoCfg.Init(buf, pos)
        return cls.InitFromObj(kinGeoCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinGeoCfg):
        x = KinGeoCfgT()
        x._UnPack(kinGeoCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.orientation == other.orientation and \
            self.singularity == other.singularity

    # KinGeoCfgT
    def _UnPack(self, kinGeoCfg):
        if kinGeoCfg is None:
            return
        if kinGeoCfg.Orientation() is not None:
            self.orientation = motion.core.fbtypes.KinOriCfg.KinOriCfgT.InitFromObj(kinGeoCfg.Orientation())
        if kinGeoCfg.Singularity() is not None:
            self.singularity = motion.core.fbtypes.KinCfgSingularity.KinCfgSingularityT.InitFromObj(kinGeoCfg.Singularity())

    # KinGeoCfgT
    def Pack(self, builder):
        if self.orientation is not None:
            orientation = self.orientation.Pack(builder)
        if self.singularity is not None:
            singularity = self.singularity.Pack(builder)
        KinGeoCfgStart(builder)
        if self.orientation is not None:
            KinGeoCfgAddOrientation(builder, orientation)
        if self.singularity is not None:
            KinGeoCfgAddSingularity(builder, singularity)
        kinGeoCfg = KinGeoCfgEnd(builder)
        return kinGeoCfg
