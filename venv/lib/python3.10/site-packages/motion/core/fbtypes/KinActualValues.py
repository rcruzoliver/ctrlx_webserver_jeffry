# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# actual values of the kinematics
class KinActualValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinActualValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinActualValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinActualValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # actual position
    # KinActualValues
    def ActualPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinActualValues
    def ActualPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinActualValues
    def ActualPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinActualValues
    def ActualPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # actual velocity (currently not supported)
    # KinActualValues
    def ActualVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual acceleration (currently not supported)
    # KinActualValues
    def ActualAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual jerk (currently not supported)
    # KinActualValues
    def ActualJerk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # units of the actual position
    # KinActualValues
    def ActualPosUnit(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinActualValues
    def ActualPosUnitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinActualValues
    def ActualPosUnitIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # unit of the actual velocity (currently not supported)
    # KinActualValues
    def ActualVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual acceleration (currently not supported)
    # KinActualValues
    def ActualAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual jerk (currently not supported)
    # KinActualValues
    def ActualJerkUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinActualValuesStart(builder): builder.StartObject(8)
def Start(builder):
    return KinActualValuesStart(builder)
def KinActualValuesAddActualPos(builder, actualPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actualPos), 0)
def AddActualPos(builder, actualPos):
    return KinActualValuesAddActualPos(builder, actualPos)
def KinActualValuesStartActualPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartActualPosVector(builder, numElems):
    return KinActualValuesStartActualPosVector(builder, numElems)
def KinActualValuesAddActualVel(builder, actualVel): builder.PrependFloat64Slot(1, actualVel, 0.0)
def AddActualVel(builder, actualVel):
    return KinActualValuesAddActualVel(builder, actualVel)
def KinActualValuesAddActualAcc(builder, actualAcc): builder.PrependFloat64Slot(2, actualAcc, 0.0)
def AddActualAcc(builder, actualAcc):
    return KinActualValuesAddActualAcc(builder, actualAcc)
def KinActualValuesAddActualJerk(builder, actualJerk): builder.PrependFloat64Slot(3, actualJerk, 0.0)
def AddActualJerk(builder, actualJerk):
    return KinActualValuesAddActualJerk(builder, actualJerk)
def KinActualValuesAddActualPosUnit(builder, actualPosUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actualPosUnit), 0)
def AddActualPosUnit(builder, actualPosUnit):
    return KinActualValuesAddActualPosUnit(builder, actualPosUnit)
def KinActualValuesStartActualPosUnitVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartActualPosUnitVector(builder, numElems):
    return KinActualValuesStartActualPosUnitVector(builder, numElems)
def KinActualValuesAddActualVelUnit(builder, actualVelUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actualVelUnit), 0)
def AddActualVelUnit(builder, actualVelUnit):
    return KinActualValuesAddActualVelUnit(builder, actualVelUnit)
def KinActualValuesAddActualAccUnit(builder, actualAccUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actualAccUnit), 0)
def AddActualAccUnit(builder, actualAccUnit):
    return KinActualValuesAddActualAccUnit(builder, actualAccUnit)
def KinActualValuesAddActualJerkUnit(builder, actualJerkUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actualJerkUnit), 0)
def AddActualJerkUnit(builder, actualJerkUnit):
    return KinActualValuesAddActualJerkUnit(builder, actualJerkUnit)
def KinActualValuesEnd(builder): return builder.EndObject()
def End(builder):
    return KinActualValuesEnd(builder)
try:
    from typing import List
except:
    pass

class KinActualValuesT(object):

    # KinActualValuesT
    def __init__(self):
        self.actualPos = None  # type: List[float]
        self.actualVel = 0.0  # type: float
        self.actualAcc = 0.0  # type: float
        self.actualJerk = 0.0  # type: float
        self.actualPosUnit = None  # type: List[str]
        self.actualVelUnit = None  # type: str
        self.actualAccUnit = None  # type: str
        self.actualJerkUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinActualValues = KinActualValues()
        kinActualValues.Init(buf, pos)
        return cls.InitFromObj(kinActualValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinActualValues):
        x = KinActualValuesT()
        x._UnPack(kinActualValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.actualPos == other.actualPos and \
            self.actualVel == other.actualVel and \
            self.actualAcc == other.actualAcc and \
            self.actualJerk == other.actualJerk and \
            self.actualPosUnit == other.actualPosUnit and \
            self.actualVelUnit == other.actualVelUnit and \
            self.actualAccUnit == other.actualAccUnit and \
            self.actualJerkUnit == other.actualJerkUnit

    # KinActualValuesT
    def _UnPack(self, kinActualValues):
        if kinActualValues is None:
            return
        if not kinActualValues.ActualPosIsNone():
            if np is None:
                self.actualPos = []
                for i in range(kinActualValues.ActualPosLength()):
                    self.actualPos.append(kinActualValues.ActualPos(i))
            else:
                self.actualPos = kinActualValues.ActualPosAsNumpy()
        self.actualVel = kinActualValues.ActualVel()
        self.actualAcc = kinActualValues.ActualAcc()
        self.actualJerk = kinActualValues.ActualJerk()
        if not kinActualValues.ActualPosUnitIsNone():
            self.actualPosUnit = []
            for i in range(kinActualValues.ActualPosUnitLength()):
                self.actualPosUnit.append(kinActualValues.ActualPosUnit(i))
        self.actualVelUnit = kinActualValues.ActualVelUnit()
        self.actualAccUnit = kinActualValues.ActualAccUnit()
        self.actualJerkUnit = kinActualValues.ActualJerkUnit()

    # KinActualValuesT
    def Pack(self, builder):
        if self.actualPos is not None:
            if np is not None and type(self.actualPos) is np.ndarray:
                actualPos = builder.CreateNumpyVector(self.actualPos)
            else:
                KinActualValuesStartActualPosVector(builder, len(self.actualPos))
                for i in reversed(range(len(self.actualPos))):
                    builder.PrependFloat64(self.actualPos[i])
                actualPos = builder.EndVector()
        if self.actualPosUnit is not None:
            actualPosUnitlist = []
            for i in range(len(self.actualPosUnit)):
                actualPosUnitlist.append(builder.CreateString(self.actualPosUnit[i]))
            KinActualValuesStartActualPosUnitVector(builder, len(self.actualPosUnit))
            for i in reversed(range(len(self.actualPosUnit))):
                builder.PrependUOffsetTRelative(actualPosUnitlist[i])
            actualPosUnit = builder.EndVector()
        if self.actualVelUnit is not None:
            actualVelUnit = builder.CreateString(self.actualVelUnit)
        if self.actualAccUnit is not None:
            actualAccUnit = builder.CreateString(self.actualAccUnit)
        if self.actualJerkUnit is not None:
            actualJerkUnit = builder.CreateString(self.actualJerkUnit)
        KinActualValuesStart(builder)
        if self.actualPos is not None:
            KinActualValuesAddActualPos(builder, actualPos)
        KinActualValuesAddActualVel(builder, self.actualVel)
        KinActualValuesAddActualAcc(builder, self.actualAcc)
        KinActualValuesAddActualJerk(builder, self.actualJerk)
        if self.actualPosUnit is not None:
            KinActualValuesAddActualPosUnit(builder, actualPosUnit)
        if self.actualVelUnit is not None:
            KinActualValuesAddActualVelUnit(builder, actualVelUnit)
        if self.actualAccUnit is not None:
            KinActualValuesAddActualAccUnit(builder, actualAccUnit)
        if self.actualJerkUnit is not None:
            KinActualValuesAddActualJerkUnit(builder, actualJerkUnit)
        kinActualValues = KinActualValuesEnd(builder)
        return kinActualValues
