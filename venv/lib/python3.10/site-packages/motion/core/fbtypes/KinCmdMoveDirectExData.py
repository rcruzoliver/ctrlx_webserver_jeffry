# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the extended move direct command for a kinematics
class KinCmdMoveDirectExData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdMoveDirectExData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdMoveDirectExData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdMoveDirectExData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position with meanings
    # KinCmdMoveDirectExData
    def CmdKinPose(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCmdPosePair import KinCmdPosePair
            obj = KinCmdPosePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCmdMoveDirectExData
    def CmdKinPoseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdMoveDirectExData
    def CmdKinPoseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordSys for commanded target position
    # KinCmdMoveDirectExData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dynamic limits for the motion of this command
    # KinCmdMoveDirectExData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # should this be a buffered command?
    # KinCmdMoveDirectExData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def KinCmdMoveDirectExDataStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCmdMoveDirectExDataStart(builder)
def KinCmdMoveDirectExDataAddCmdKinPose(builder, cmdKinPose): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmdKinPose), 0)
def AddCmdKinPose(builder, cmdKinPose):
    return KinCmdMoveDirectExDataAddCmdKinPose(builder, cmdKinPose)
def KinCmdMoveDirectExDataStartCmdKinPoseVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdKinPoseVector(builder, numElems):
    return KinCmdMoveDirectExDataStartCmdKinPoseVector(builder, numElems)
def KinCmdMoveDirectExDataAddCoordSys(builder, coordSys): builder.PrependInt8Slot(1, coordSys, 0)
def AddCoordSys(builder, coordSys):
    return KinCmdMoveDirectExDataAddCoordSys(builder, coordSys)
def KinCmdMoveDirectExDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return KinCmdMoveDirectExDataAddLim(builder, lim)
def KinCmdMoveDirectExDataAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 1)
def AddBuffered(builder, buffered):
    return KinCmdMoveDirectExDataAddBuffered(builder, buffered)
def KinCmdMoveDirectExDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdMoveDirectExDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
import motion.core.fbtypes.KinCmdPosePair
try:
    from typing import List, Optional
except:
    pass

class KinCmdMoveDirectExDataT(object):

    # KinCmdMoveDirectExDataT
    def __init__(self):
        self.cmdKinPose = None  # type: List[motion.core.fbtypes.KinCmdPosePair.KinCmdPosePairT]
        self.coordSys = 0  # type: int
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdMoveDirectExData = KinCmdMoveDirectExData()
        kinCmdMoveDirectExData.Init(buf, pos)
        return cls.InitFromObj(kinCmdMoveDirectExData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdMoveDirectExData):
        x = KinCmdMoveDirectExDataT()
        x._UnPack(kinCmdMoveDirectExData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cmdKinPose == other.cmdKinPose and \
            self.coordSys == other.coordSys and \
            self.lim == other.lim and \
            self.buffered == other.buffered

    # KinCmdMoveDirectExDataT
    def _UnPack(self, kinCmdMoveDirectExData):
        if kinCmdMoveDirectExData is None:
            return
        if not kinCmdMoveDirectExData.CmdKinPoseIsNone():
            self.cmdKinPose = []
            for i in range(kinCmdMoveDirectExData.CmdKinPoseLength()):
                if kinCmdMoveDirectExData.CmdKinPose(i) is None:
                    self.cmdKinPose.append(None)
                else:
                    kinCmdPosePair_ = motion.core.fbtypes.KinCmdPosePair.KinCmdPosePairT.InitFromObj(kinCmdMoveDirectExData.CmdKinPose(i))
                    self.cmdKinPose.append(kinCmdPosePair_)
        self.coordSys = kinCmdMoveDirectExData.CoordSys()
        if kinCmdMoveDirectExData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmdMoveDirectExData.Lim())
        self.buffered = kinCmdMoveDirectExData.Buffered()

    # KinCmdMoveDirectExDataT
    def Pack(self, builder):
        if self.cmdKinPose is not None:
            cmdKinPoselist = []
            for i in range(len(self.cmdKinPose)):
                cmdKinPoselist.append(self.cmdKinPose[i].Pack(builder))
            KinCmdMoveDirectExDataStartCmdKinPoseVector(builder, len(self.cmdKinPose))
            for i in reversed(range(len(self.cmdKinPose))):
                builder.PrependUOffsetTRelative(cmdKinPoselist[i])
            cmdKinPose = builder.EndVector()
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        KinCmdMoveDirectExDataStart(builder)
        if self.cmdKinPose is not None:
            KinCmdMoveDirectExDataAddCmdKinPose(builder, cmdKinPose)
        KinCmdMoveDirectExDataAddCoordSys(builder, self.coordSys)
        if self.lim is not None:
            KinCmdMoveDirectExDataAddLim(builder, lim)
        KinCmdMoveDirectExDataAddBuffered(builder, self.buffered)
        kinCmdMoveDirectExData = KinCmdMoveDirectExDataEnd(builder)
        return kinCmdMoveDirectExData
