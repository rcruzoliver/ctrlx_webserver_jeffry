# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# General unit configuration for a motion object
class UnitCfgObj(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitCfgObj()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnitCfgObj(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UnitCfgObj
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # default units
    # UnitCfgObj
    def Default(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.UnitCfgObjSingle import UnitCfgObjSingle
            obj = UnitCfgObjSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnitCfgObj
    def DefaultLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnitCfgObj
    def DefaultIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def UnitCfgObjStart(builder): builder.StartObject(1)
def Start(builder):
    return UnitCfgObjStart(builder)
def UnitCfgObjAddDefault(builder, default): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(default), 0)
def AddDefault(builder, default):
    return UnitCfgObjAddDefault(builder, default)
def UnitCfgObjStartDefaultVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDefaultVector(builder, numElems):
    return UnitCfgObjStartDefaultVector(builder, numElems)
def UnitCfgObjEnd(builder): return builder.EndObject()
def End(builder):
    return UnitCfgObjEnd(builder)
import motion.core.fbtypes.UnitCfgObjSingle
try:
    from typing import List
except:
    pass

class UnitCfgObjT(object):

    # UnitCfgObjT
    def __init__(self):
        self.default = None  # type: List[motion.core.fbtypes.UnitCfgObjSingle.UnitCfgObjSingleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        unitCfgObj = UnitCfgObj()
        unitCfgObj.Init(buf, pos)
        return cls.InitFromObj(unitCfgObj)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, unitCfgObj):
        x = UnitCfgObjT()
        x._UnPack(unitCfgObj)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.default == other.default

    # UnitCfgObjT
    def _UnPack(self, unitCfgObj):
        if unitCfgObj is None:
            return
        if not unitCfgObj.DefaultIsNone():
            self.default = []
            for i in range(unitCfgObj.DefaultLength()):
                if unitCfgObj.Default(i) is None:
                    self.default.append(None)
                else:
                    unitCfgObjSingle_ = motion.core.fbtypes.UnitCfgObjSingle.UnitCfgObjSingleT.InitFromObj(unitCfgObj.Default(i))
                    self.default.append(unitCfgObjSingle_)

    # UnitCfgObjT
    def Pack(self, builder):
        if self.default is not None:
            defaultlist = []
            for i in range(len(self.default)):
                defaultlist.append(self.default[i].Pack(builder))
            UnitCfgObjStartDefaultVector(builder, len(self.default))
            for i in reversed(range(len(self.default))):
                builder.PrependUOffsetTRelative(defaultlist[i])
            default = builder.EndVector()
        UnitCfgObjStart(builder)
        if self.default is not None:
            UnitCfgObjAddDefault(builder, default)
        unitCfgObj = UnitCfgObjEnd(builder)
        return unitCfgObj
