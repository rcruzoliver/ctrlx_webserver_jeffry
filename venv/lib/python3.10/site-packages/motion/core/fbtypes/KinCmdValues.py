# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters and data of the active command
class KinCmdValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position as vector
    # KinCmdValues
    def TargetPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdValues
    def TargetPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdValues
    def TargetPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdValues
    def TargetPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # dynamic limits for the motion of this command
    # KinCmdValues
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimitsState import DynamicLimitsState
            obj = DynamicLimitsState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # coordinate system of the target position
    # KinCmdValues
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # command ID of the active command
    # KinCmdValues
    def CmdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # command source (by which interface was this command inserted into the system (e.g. "PLC"))
    # KinCmdValues
    def Src(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.CmdSource import CmdSource
            obj = CmdSource()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdValuesStart(builder): builder.StartObject(5)
def Start(builder):
    return KinCmdValuesStart(builder)
def KinCmdValuesAddTargetPos(builder, targetPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(targetPos), 0)
def AddTargetPos(builder, targetPos):
    return KinCmdValuesAddTargetPos(builder, targetPos)
def KinCmdValuesStartTargetPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartTargetPosVector(builder, numElems):
    return KinCmdValuesStartTargetPosVector(builder, numElems)
def KinCmdValuesAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return KinCmdValuesAddLim(builder, lim)
def KinCmdValuesAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def AddCoordSys(builder, coordSys):
    return KinCmdValuesAddCoordSys(builder, coordSys)
def KinCmdValuesAddCmdId(builder, cmdId): builder.PrependUint64Slot(3, cmdId, 0)
def AddCmdId(builder, cmdId):
    return KinCmdValuesAddCmdId(builder, cmdId)
def KinCmdValuesAddSrc(builder, src): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(src), 0)
def AddSrc(builder, src):
    return KinCmdValuesAddSrc(builder, src)
def KinCmdValuesEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdValuesEnd(builder)
import motion.core.fbtypes.CmdSource
import motion.core.fbtypes.DynamicLimitsState
try:
    from typing import List, Optional
except:
    pass

class KinCmdValuesT(object):

    # KinCmdValuesT
    def __init__(self):
        self.targetPos = None  # type: List[float]
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimitsState.DynamicLimitsStateT]
        self.coordSys = None  # type: str
        self.cmdId = 0  # type: int
        self.src = None  # type: Optional[motion.core.fbtypes.CmdSource.CmdSourceT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdValues = KinCmdValues()
        kinCmdValues.Init(buf, pos)
        return cls.InitFromObj(kinCmdValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdValues):
        x = KinCmdValuesT()
        x._UnPack(kinCmdValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.targetPos == other.targetPos and \
            self.lim == other.lim and \
            self.coordSys == other.coordSys and \
            self.cmdId == other.cmdId and \
            self.src == other.src

    # KinCmdValuesT
    def _UnPack(self, kinCmdValues):
        if kinCmdValues is None:
            return
        if not kinCmdValues.TargetPosIsNone():
            if np is None:
                self.targetPos = []
                for i in range(kinCmdValues.TargetPosLength()):
                    self.targetPos.append(kinCmdValues.TargetPos(i))
            else:
                self.targetPos = kinCmdValues.TargetPosAsNumpy()
        if kinCmdValues.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimitsState.DynamicLimitsStateT.InitFromObj(kinCmdValues.Lim())
        self.coordSys = kinCmdValues.CoordSys()
        self.cmdId = kinCmdValues.CmdId()
        if kinCmdValues.Src() is not None:
            self.src = motion.core.fbtypes.CmdSource.CmdSourceT.InitFromObj(kinCmdValues.Src())

    # KinCmdValuesT
    def Pack(self, builder):
        if self.targetPos is not None:
            if np is not None and type(self.targetPos) is np.ndarray:
                targetPos = builder.CreateNumpyVector(self.targetPos)
            else:
                KinCmdValuesStartTargetPosVector(builder, len(self.targetPos))
                for i in reversed(range(len(self.targetPos))):
                    builder.PrependFloat64(self.targetPos[i])
                targetPos = builder.EndVector()
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.src is not None:
            src = self.src.Pack(builder)
        KinCmdValuesStart(builder)
        if self.targetPos is not None:
            KinCmdValuesAddTargetPos(builder, targetPos)
        if self.lim is not None:
            KinCmdValuesAddLim(builder, lim)
        if self.coordSys is not None:
            KinCmdValuesAddCoordSys(builder, coordSys)
        KinCmdValuesAddCmdId(builder, self.cmdId)
        if self.src is not None:
            KinCmdValuesAddSrc(builder, src)
        kinCmdValues = KinCmdValuesEnd(builder)
        return kinCmdValues
