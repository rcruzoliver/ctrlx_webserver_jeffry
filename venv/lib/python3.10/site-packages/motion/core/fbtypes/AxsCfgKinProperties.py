# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# kinematic properties for axes
class AxsCfgKinProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgKinProperties()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgKinProperties(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgKinProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # acceleration reserve as factor of acceleration
    # AxsCfgKinProperties
    def AccReserve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # jerk reserve as factor of jerk
    # AxsCfgKinProperties
    def JrkReserve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AxsCfgKinPropertiesStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgKinPropertiesStart(builder)
def AxsCfgKinPropertiesAddAccReserve(builder, accReserve): builder.PrependFloat64Slot(0, accReserve, 0.0)
def AddAccReserve(builder, accReserve):
    return AxsCfgKinPropertiesAddAccReserve(builder, accReserve)
def AxsCfgKinPropertiesAddJrkReserve(builder, jrkReserve): builder.PrependFloat64Slot(1, jrkReserve, 0.0)
def AddJrkReserve(builder, jrkReserve):
    return AxsCfgKinPropertiesAddJrkReserve(builder, jrkReserve)
def AxsCfgKinPropertiesEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgKinPropertiesEnd(builder)

class AxsCfgKinPropertiesT(object):

    # AxsCfgKinPropertiesT
    def __init__(self):
        self.accReserve = 0.0  # type: float
        self.jrkReserve = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgKinProperties = AxsCfgKinProperties()
        axsCfgKinProperties.Init(buf, pos)
        return cls.InitFromObj(axsCfgKinProperties)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgKinProperties):
        x = AxsCfgKinPropertiesT()
        x._UnPack(axsCfgKinProperties)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.accReserve == other.accReserve and \
            self.jrkReserve == other.jrkReserve

    # AxsCfgKinPropertiesT
    def _UnPack(self, axsCfgKinProperties):
        if axsCfgKinProperties is None:
            return
        self.accReserve = axsCfgKinProperties.AccReserve()
        self.jrkReserve = axsCfgKinProperties.JrkReserve()

    # AxsCfgKinPropertiesT
    def Pack(self, builder):
        AxsCfgKinPropertiesStart(builder)
        AxsCfgKinPropertiesAddAccReserve(builder, self.accReserve)
        AxsCfgKinPropertiesAddJrkReserve(builder, self.jrkReserve)
        axsCfgKinProperties = AxsCfgKinPropertiesEnd(builder)
        return axsCfgKinProperties
