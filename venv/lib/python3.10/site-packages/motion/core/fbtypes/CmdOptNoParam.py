# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for all command options, that have no parameters (except the perm. type)
class CmdOptNoParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdOptNoParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdOptNoParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdOptNoParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # CmdOptNoParam
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CmdOptNoParamStart(builder): builder.StartObject(1)
def Start(builder):
    return CmdOptNoParamStart(builder)
def CmdOptNoParamAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def AddPermType(builder, permType):
    return CmdOptNoParamAddPermType(builder, permType)
def CmdOptNoParamEnd(builder): return builder.EndObject()
def End(builder):
    return CmdOptNoParamEnd(builder)

class CmdOptNoParamT(object):

    # CmdOptNoParamT
    def __init__(self):
        self.permType = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdOptNoParam = CmdOptNoParam()
        cmdOptNoParam.Init(buf, pos)
        return cls.InitFromObj(cmdOptNoParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdOptNoParam):
        x = CmdOptNoParamT()
        x._UnPack(cmdOptNoParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.permType == other.permType

    # CmdOptNoParamT
    def _UnPack(self, cmdOptNoParam):
        if cmdOptNoParam is None:
            return
        self.permType = cmdOptNoParam.PermType()

    # CmdOptNoParamT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        CmdOptNoParamStart(builder)
        if self.permType is not None:
            CmdOptNoParamAddPermType(builder, permType)
        cmdOptNoParam = CmdOptNoParamEnd(builder)
        return cmdOptNoParam
