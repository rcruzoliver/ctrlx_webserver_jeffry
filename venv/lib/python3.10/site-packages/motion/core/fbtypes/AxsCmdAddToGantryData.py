# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis command add-to-gantry
class AxsCmdAddToGantryData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdAddToGantryData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCmdAddToGantryData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCmdAddToGantryData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the gantry master axis
    # AxsCmdAddToGantryData
    def MasterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # should this be a buffered command?
    # AxsCmdAddToGantryData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsCmdAddToGantryDataStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCmdAddToGantryDataStart(builder)
def AxsCmdAddToGantryDataAddMasterName(builder, masterName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(masterName), 0)
def AddMasterName(builder, masterName):
    return AxsCmdAddToGantryDataAddMasterName(builder, masterName)
def AxsCmdAddToGantryDataAddBuffered(builder, buffered): builder.PrependBoolSlot(1, buffered, 0)
def AddBuffered(builder, buffered):
    return AxsCmdAddToGantryDataAddBuffered(builder, buffered)
def AxsCmdAddToGantryDataEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCmdAddToGantryDataEnd(builder)

class AxsCmdAddToGantryDataT(object):

    # AxsCmdAddToGantryDataT
    def __init__(self):
        self.masterName = None  # type: str
        self.buffered = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdAddToGantryData = AxsCmdAddToGantryData()
        axsCmdAddToGantryData.Init(buf, pos)
        return cls.InitFromObj(axsCmdAddToGantryData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCmdAddToGantryData):
        x = AxsCmdAddToGantryDataT()
        x._UnPack(axsCmdAddToGantryData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.masterName == other.masterName and \
            self.buffered == other.buffered

    # AxsCmdAddToGantryDataT
    def _UnPack(self, axsCmdAddToGantryData):
        if axsCmdAddToGantryData is None:
            return
        self.masterName = axsCmdAddToGantryData.MasterName()
        self.buffered = axsCmdAddToGantryData.Buffered()

    # AxsCmdAddToGantryDataT
    def Pack(self, builder):
        if self.masterName is not None:
            masterName = builder.CreateString(self.masterName)
        AxsCmdAddToGantryDataStart(builder)
        if self.masterName is not None:
            AxsCmdAddToGantryDataAddMasterName(builder, masterName)
        AxsCmdAddToGantryDataAddBuffered(builder, self.buffered)
        axsCmdAddToGantryData = AxsCmdAddToGantryDataEnd(builder)
        return axsCmdAddToGantryData
