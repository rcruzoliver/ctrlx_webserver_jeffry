# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single configuration parameter of a joint transformation when reading all data of an implemented joint transformation
class KinStateJntTrafoDataParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinStateJntTrafoDataParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinStateJntTrafoDataParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinStateJntTrafoDataParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the parameter
    # KinStateJntTrafoDataParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the parameter
    # KinStateJntTrafoDataParam
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Image (link) of the parameter
    # KinStateJntTrafoDataParam
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference to the documentation of the parameter
    # KinStateJntTrafoDataParam
    def DocRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Group of the parameter (might be empty, when this parameter is not part of a group)
    # KinStateJntTrafoDataParam
    def Group(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Expected unit value type of the parameter (can be empty for unitless parameters)
    # KinStateJntTrafoDataParam
    def UnitValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Expected unit object type of the parameter (can be empty for unitless parameters; "linear" or "rotational" else)
    # KinStateJntTrafoDataParam
    def UnitObjType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Valid values for the parameter (when it's a string parameter and a kind of enumeration, else empty)
    # KinStateJntTrafoDataParam
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KinStateJntTrafoDataParam
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinStateJntTrafoDataParam
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Type of the variable
    # KinStateJntTrafoDataParam
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # Is this parameter mandatory?
    # KinStateJntTrafoDataParam
    def Mandatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # SubGroup of the parameter (for advanced grouping in the HMI)
    # KinStateJntTrafoDataParam
    def Subgroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinStateJntTrafoDataParamStart(builder): builder.StartObject(11)
def Start(builder):
    return KinStateJntTrafoDataParamStart(builder)
def KinStateJntTrafoDataParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinStateJntTrafoDataParamAddName(builder, name)
def KinStateJntTrafoDataParamAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return KinStateJntTrafoDataParamAddDescription(builder, description)
def KinStateJntTrafoDataParamAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def AddImage(builder, image):
    return KinStateJntTrafoDataParamAddImage(builder, image)
def KinStateJntTrafoDataParamAddDocRef(builder, docRef): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(docRef), 0)
def AddDocRef(builder, docRef):
    return KinStateJntTrafoDataParamAddDocRef(builder, docRef)
def KinStateJntTrafoDataParamAddGroup(builder, group): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(group), 0)
def AddGroup(builder, group):
    return KinStateJntTrafoDataParamAddGroup(builder, group)
def KinStateJntTrafoDataParamAddUnitValueType(builder, unitValueType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unitValueType), 0)
def AddUnitValueType(builder, unitValueType):
    return KinStateJntTrafoDataParamAddUnitValueType(builder, unitValueType)
def KinStateJntTrafoDataParamAddUnitObjType(builder, unitObjType): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(unitObjType), 0)
def AddUnitObjType(builder, unitObjType):
    return KinStateJntTrafoDataParamAddUnitObjType(builder, unitObjType)
def KinStateJntTrafoDataParamAddValues(builder, values): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def AddValues(builder, values):
    return KinStateJntTrafoDataParamAddValues(builder, values)
def KinStateJntTrafoDataParamStartValuesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartValuesVector(builder, numElems):
    return KinStateJntTrafoDataParamStartValuesVector(builder, numElems)
def KinStateJntTrafoDataParamAddType(builder, type): builder.PrependInt8Slot(8, type, 1)
def AddType(builder, type):
    return KinStateJntTrafoDataParamAddType(builder, type)
def KinStateJntTrafoDataParamAddMandatory(builder, mandatory): builder.PrependBoolSlot(9, mandatory, 1)
def AddMandatory(builder, mandatory):
    return KinStateJntTrafoDataParamAddMandatory(builder, mandatory)
def KinStateJntTrafoDataParamAddSubgroup(builder, subgroup): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(subgroup), 0)
def AddSubgroup(builder, subgroup):
    return KinStateJntTrafoDataParamAddSubgroup(builder, subgroup)
def KinStateJntTrafoDataParamEnd(builder): return builder.EndObject()
def End(builder):
    return KinStateJntTrafoDataParamEnd(builder)
try:
    from typing import List
except:
    pass

class KinStateJntTrafoDataParamT(object):

    # KinStateJntTrafoDataParamT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.image = None  # type: str
        self.docRef = None  # type: str
        self.group = None  # type: str
        self.unitValueType = None  # type: str
        self.unitObjType = None  # type: str
        self.values = None  # type: List[str]
        self.type = 1  # type: int
        self.mandatory = True  # type: bool
        self.subgroup = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinStateJntTrafoDataParam = KinStateJntTrafoDataParam()
        kinStateJntTrafoDataParam.Init(buf, pos)
        return cls.InitFromObj(kinStateJntTrafoDataParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinStateJntTrafoDataParam):
        x = KinStateJntTrafoDataParamT()
        x._UnPack(kinStateJntTrafoDataParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.image == other.image and \
            self.docRef == other.docRef and \
            self.group == other.group and \
            self.unitValueType == other.unitValueType and \
            self.unitObjType == other.unitObjType and \
            self.values == other.values and \
            self.type == other.type and \
            self.mandatory == other.mandatory and \
            self.subgroup == other.subgroup

    # KinStateJntTrafoDataParamT
    def _UnPack(self, kinStateJntTrafoDataParam):
        if kinStateJntTrafoDataParam is None:
            return
        self.name = kinStateJntTrafoDataParam.Name()
        self.description = kinStateJntTrafoDataParam.Description()
        self.image = kinStateJntTrafoDataParam.Image()
        self.docRef = kinStateJntTrafoDataParam.DocRef()
        self.group = kinStateJntTrafoDataParam.Group()
        self.unitValueType = kinStateJntTrafoDataParam.UnitValueType()
        self.unitObjType = kinStateJntTrafoDataParam.UnitObjType()
        if not kinStateJntTrafoDataParam.ValuesIsNone():
            self.values = []
            for i in range(kinStateJntTrafoDataParam.ValuesLength()):
                self.values.append(kinStateJntTrafoDataParam.Values(i))
        self.type = kinStateJntTrafoDataParam.Type()
        self.mandatory = kinStateJntTrafoDataParam.Mandatory()
        self.subgroup = kinStateJntTrafoDataParam.Subgroup()

    # KinStateJntTrafoDataParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.image is not None:
            image = builder.CreateString(self.image)
        if self.docRef is not None:
            docRef = builder.CreateString(self.docRef)
        if self.group is not None:
            group = builder.CreateString(self.group)
        if self.unitValueType is not None:
            unitValueType = builder.CreateString(self.unitValueType)
        if self.unitObjType is not None:
            unitObjType = builder.CreateString(self.unitObjType)
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(builder.CreateString(self.values[i]))
            KinStateJntTrafoDataParamStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        if self.subgroup is not None:
            subgroup = builder.CreateString(self.subgroup)
        KinStateJntTrafoDataParamStart(builder)
        if self.name is not None:
            KinStateJntTrafoDataParamAddName(builder, name)
        if self.description is not None:
            KinStateJntTrafoDataParamAddDescription(builder, description)
        if self.image is not None:
            KinStateJntTrafoDataParamAddImage(builder, image)
        if self.docRef is not None:
            KinStateJntTrafoDataParamAddDocRef(builder, docRef)
        if self.group is not None:
            KinStateJntTrafoDataParamAddGroup(builder, group)
        if self.unitValueType is not None:
            KinStateJntTrafoDataParamAddUnitValueType(builder, unitValueType)
        if self.unitObjType is not None:
            KinStateJntTrafoDataParamAddUnitObjType(builder, unitObjType)
        if self.values is not None:
            KinStateJntTrafoDataParamAddValues(builder, values)
        KinStateJntTrafoDataParamAddType(builder, self.type)
        KinStateJntTrafoDataParamAddMandatory(builder, self.mandatory)
        if self.subgroup is not None:
            KinStateJntTrafoDataParamAddSubgroup(builder, subgroup)
        kinStateJntTrafoDataParam = KinStateJntTrafoDataParamEnd(builder)
        return kinStateJntTrafoDataParam
