# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of all registered joint transformations when reading all data of implemented joint transformations
class KinStateJntTrafoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinStateJntTrafoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinStateJntTrafoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinStateJntTrafoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # data of all registered joint transformations
    # KinStateJntTrafoData
    def JntTrafoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinStateJntTrafoDataSingle import KinStateJntTrafoDataSingle
            obj = KinStateJntTrafoDataSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinStateJntTrafoData
    def JntTrafoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinStateJntTrafoData
    def JntTrafoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinStateJntTrafoDataStart(builder): builder.StartObject(1)
def Start(builder):
    return KinStateJntTrafoDataStart(builder)
def KinStateJntTrafoDataAddJntTrafoData(builder, jntTrafoData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jntTrafoData), 0)
def AddJntTrafoData(builder, jntTrafoData):
    return KinStateJntTrafoDataAddJntTrafoData(builder, jntTrafoData)
def KinStateJntTrafoDataStartJntTrafoDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartJntTrafoDataVector(builder, numElems):
    return KinStateJntTrafoDataStartJntTrafoDataVector(builder, numElems)
def KinStateJntTrafoDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinStateJntTrafoDataEnd(builder)
import motion.core.fbtypes.KinStateJntTrafoDataSingle
try:
    from typing import List
except:
    pass

class KinStateJntTrafoDataT(object):

    # KinStateJntTrafoDataT
    def __init__(self):
        self.jntTrafoData = None  # type: List[motion.core.fbtypes.KinStateJntTrafoDataSingle.KinStateJntTrafoDataSingleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinStateJntTrafoData = KinStateJntTrafoData()
        kinStateJntTrafoData.Init(buf, pos)
        return cls.InitFromObj(kinStateJntTrafoData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinStateJntTrafoData):
        x = KinStateJntTrafoDataT()
        x._UnPack(kinStateJntTrafoData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.jntTrafoData == other.jntTrafoData

    # KinStateJntTrafoDataT
    def _UnPack(self, kinStateJntTrafoData):
        if kinStateJntTrafoData is None:
            return
        if not kinStateJntTrafoData.JntTrafoDataIsNone():
            self.jntTrafoData = []
            for i in range(kinStateJntTrafoData.JntTrafoDataLength()):
                if kinStateJntTrafoData.JntTrafoData(i) is None:
                    self.jntTrafoData.append(None)
                else:
                    kinStateJntTrafoDataSingle_ = motion.core.fbtypes.KinStateJntTrafoDataSingle.KinStateJntTrafoDataSingleT.InitFromObj(kinStateJntTrafoData.JntTrafoData(i))
                    self.jntTrafoData.append(kinStateJntTrafoDataSingle_)

    # KinStateJntTrafoDataT
    def Pack(self, builder):
        if self.jntTrafoData is not None:
            jntTrafoDatalist = []
            for i in range(len(self.jntTrafoData)):
                jntTrafoDatalist.append(self.jntTrafoData[i].Pack(builder))
            KinStateJntTrafoDataStartJntTrafoDataVector(builder, len(self.jntTrafoData))
            for i in reversed(range(len(self.jntTrafoData))):
                builder.PrependUOffsetTRelative(jntTrafoDatalist[i])
            jntTrafoData = builder.EndVector()
        KinStateJntTrafoDataStart(builder)
        if self.jntTrafoData is not None:
            KinStateJntTrafoDataAddJntTrafoData(builder, jntTrafoData)
        kinStateJntTrafoData = KinStateJntTrafoDataEnd(builder)
        return kinStateJntTrafoData
