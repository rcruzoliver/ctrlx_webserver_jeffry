# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single joint transformation set
class KinCfgJntTrafoSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the joint transformation set
    # KinCfgJntTrafoSet
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the joint transformation
    # KinCfgJntTrafoSet
    def JntTrafo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # configuration parameter of the joint transformation
    # KinCfgJntTrafoSet
    def Param(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinCfgJntTrafoAllParam import KinCfgJntTrafoAllParam
            obj = KinCfgJntTrafoAllParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgJntTrafoSetStart(builder): builder.StartObject(3)
def Start(builder):
    return KinCfgJntTrafoSetStart(builder)
def KinCfgJntTrafoSetAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinCfgJntTrafoSetAddName(builder, name)
def KinCfgJntTrafoSetAddJntTrafo(builder, jntTrafo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(jntTrafo), 0)
def AddJntTrafo(builder, jntTrafo):
    return KinCfgJntTrafoSetAddJntTrafo(builder, jntTrafo)
def KinCfgJntTrafoSetAddParam(builder, param): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)
def AddParam(builder, param):
    return KinCfgJntTrafoSetAddParam(builder, param)
def KinCfgJntTrafoSetEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoSetEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoAllParam
try:
    from typing import Optional
except:
    pass

class KinCfgJntTrafoSetT(object):

    # KinCfgJntTrafoSetT
    def __init__(self):
        self.name = None  # type: str
        self.jntTrafo = None  # type: str
        self.param = None  # type: Optional[motion.core.fbtypes.KinCfgJntTrafoAllParam.KinCfgJntTrafoAllParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoSet = KinCfgJntTrafoSet()
        kinCfgJntTrafoSet.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoSet)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoSet):
        x = KinCfgJntTrafoSetT()
        x._UnPack(kinCfgJntTrafoSet)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.jntTrafo == other.jntTrafo and \
            self.param == other.param

    # KinCfgJntTrafoSetT
    def _UnPack(self, kinCfgJntTrafoSet):
        if kinCfgJntTrafoSet is None:
            return
        self.name = kinCfgJntTrafoSet.Name()
        self.jntTrafo = kinCfgJntTrafoSet.JntTrafo()
        if kinCfgJntTrafoSet.Param() is not None:
            self.param = motion.core.fbtypes.KinCfgJntTrafoAllParam.KinCfgJntTrafoAllParamT.InitFromObj(kinCfgJntTrafoSet.Param())

    # KinCfgJntTrafoSetT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.jntTrafo is not None:
            jntTrafo = builder.CreateString(self.jntTrafo)
        if self.param is not None:
            param = self.param.Pack(builder)
        KinCfgJntTrafoSetStart(builder)
        if self.name is not None:
            KinCfgJntTrafoSetAddName(builder, name)
        if self.jntTrafo is not None:
            KinCfgJntTrafoSetAddJntTrafo(builder, jntTrafo)
        if self.param is not None:
            KinCfgJntTrafoSetAddParam(builder, param)
        kinCfgJntTrafoSet = KinCfgJntTrafoSetEnd(builder)
        return kinCfgJntTrafoSet
