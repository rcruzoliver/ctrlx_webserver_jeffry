# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the move linear commands for a kinematics
class KinCmdMoveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdMoveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdMoveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdMoveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position (or increment for relative position command)
    # KinCmdMoveData
    def KinPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdMoveData
    def KinPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdMoveData
    def KinPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdMoveData
    def KinPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordSys for commanded target position
    # KinCmdMoveData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dynamic limits for the motion of this command
    # KinCmdMoveData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # should this be a buffered command?
    # KinCmdMoveData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def KinCmdMoveDataStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCmdMoveDataStart(builder)
def KinCmdMoveDataAddKinPos(builder, kinPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kinPos), 0)
def AddKinPos(builder, kinPos):
    return KinCmdMoveDataAddKinPos(builder, kinPos)
def KinCmdMoveDataStartKinPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartKinPosVector(builder, numElems):
    return KinCmdMoveDataStartKinPosVector(builder, numElems)
def KinCmdMoveDataAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def AddCoordSys(builder, coordSys):
    return KinCmdMoveDataAddCoordSys(builder, coordSys)
def KinCmdMoveDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return KinCmdMoveDataAddLim(builder, lim)
def KinCmdMoveDataAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 1)
def AddBuffered(builder, buffered):
    return KinCmdMoveDataAddBuffered(builder, buffered)
def KinCmdMoveDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdMoveDataEnd(builder)
import motion.core.fbtypes.DynamicLimits
try:
    from typing import List, Optional
except:
    pass

class KinCmdMoveDataT(object):

    # KinCmdMoveDataT
    def __init__(self):
        self.kinPos = None  # type: List[float]
        self.coordSys = None  # type: str
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdMoveData = KinCmdMoveData()
        kinCmdMoveData.Init(buf, pos)
        return cls.InitFromObj(kinCmdMoveData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdMoveData):
        x = KinCmdMoveDataT()
        x._UnPack(kinCmdMoveData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.kinPos == other.kinPos and \
            self.coordSys == other.coordSys and \
            self.lim == other.lim and \
            self.buffered == other.buffered

    # KinCmdMoveDataT
    def _UnPack(self, kinCmdMoveData):
        if kinCmdMoveData is None:
            return
        if not kinCmdMoveData.KinPosIsNone():
            if np is None:
                self.kinPos = []
                for i in range(kinCmdMoveData.KinPosLength()):
                    self.kinPos.append(kinCmdMoveData.KinPos(i))
            else:
                self.kinPos = kinCmdMoveData.KinPosAsNumpy()
        self.coordSys = kinCmdMoveData.CoordSys()
        if kinCmdMoveData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmdMoveData.Lim())
        self.buffered = kinCmdMoveData.Buffered()

    # KinCmdMoveDataT
    def Pack(self, builder):
        if self.kinPos is not None:
            if np is not None and type(self.kinPos) is np.ndarray:
                kinPos = builder.CreateNumpyVector(self.kinPos)
            else:
                KinCmdMoveDataStartKinPosVector(builder, len(self.kinPos))
                for i in reversed(range(len(self.kinPos))):
                    builder.PrependFloat64(self.kinPos[i])
                kinPos = builder.EndVector()
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        KinCmdMoveDataStart(builder)
        if self.kinPos is not None:
            KinCmdMoveDataAddKinPos(builder, kinPos)
        if self.coordSys is not None:
            KinCmdMoveDataAddCoordSys(builder, coordSys)
        if self.lim is not None:
            KinCmdMoveDataAddLim(builder, lim)
        KinCmdMoveDataAddBuffered(builder, self.buffered)
        kinCmdMoveData = KinCmdMoveDataEnd(builder)
        return kinCmdMoveData
