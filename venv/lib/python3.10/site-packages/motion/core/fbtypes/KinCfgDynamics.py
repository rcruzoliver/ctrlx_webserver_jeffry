# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# preparation limits for kinematics
class KinCfgDynamics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgDynamics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgDynamics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgDynamics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the default feedGroup that should be used to define the path parameter (default FG_XYZ)
    # possible feedGroups are: "FG_XYZ", "FG_XYZ_O", "FG_XYZ_A", "FG_XYZ_O_A"
    # KinCfgDynamics
    def FeedGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.FeedGroupSettings import FeedGroupSettings
            obj = FeedGroupSettings()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCfgDynamicsStart(builder): builder.StartObject(1)
def Start(builder):
    return KinCfgDynamicsStart(builder)
def KinCfgDynamicsAddFeedGroup(builder, feedGroup): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(feedGroup), 0)
def AddFeedGroup(builder, feedGroup):
    return KinCfgDynamicsAddFeedGroup(builder, feedGroup)
def KinCfgDynamicsEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgDynamicsEnd(builder)
import motion.core.fbtypes.FeedGroupSettings
try:
    from typing import Optional
except:
    pass

class KinCfgDynamicsT(object):

    # KinCfgDynamicsT
    def __init__(self):
        self.feedGroup = None  # type: Optional[motion.core.fbtypes.FeedGroupSettings.FeedGroupSettingsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgDynamics = KinCfgDynamics()
        kinCfgDynamics.Init(buf, pos)
        return cls.InitFromObj(kinCfgDynamics)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgDynamics):
        x = KinCfgDynamicsT()
        x._UnPack(kinCfgDynamics)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.feedGroup == other.feedGroup

    # KinCfgDynamicsT
    def _UnPack(self, kinCfgDynamics):
        if kinCfgDynamics is None:
            return
        if kinCfgDynamics.FeedGroup() is not None:
            self.feedGroup = motion.core.fbtypes.FeedGroupSettings.FeedGroupSettingsT.InitFromObj(kinCfgDynamics.FeedGroup())

    # KinCfgDynamicsT
    def Pack(self, builder):
        if self.feedGroup is not None:
            feedGroup = self.feedGroup.Pack(builder)
        KinCfgDynamicsStart(builder)
        if self.feedGroup is not None:
            KinCfgDynamicsAddFeedGroup(builder, feedGroup)
        kinCfgDynamics = KinCfgDynamicsEnd(builder)
        return kinCfgDynamics
