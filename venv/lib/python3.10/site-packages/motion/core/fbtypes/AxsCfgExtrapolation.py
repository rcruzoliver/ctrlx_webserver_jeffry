# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# extrapolation parameters for a single axis
class AxsCfgExtrapolation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgExtrapolation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgExtrapolation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgExtrapolation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # is extrapolation of actual values activated for this axis?
    # AxsCfgExtrapolation
    def ExtrapolateActual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # the additive extrapolation time (can also be negative)
    # AxsCfgExtrapolation
    def ExtrapolationTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of extrapolationTime
    # AxsCfgExtrapolation
    def ExtrapolationTimeUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgExtrapolationStart(builder): builder.StartObject(3)
def Start(builder):
    return AxsCfgExtrapolationStart(builder)
def AxsCfgExtrapolationAddExtrapolateActual(builder, extrapolateActual): builder.PrependBoolSlot(0, extrapolateActual, 0)
def AddExtrapolateActual(builder, extrapolateActual):
    return AxsCfgExtrapolationAddExtrapolateActual(builder, extrapolateActual)
def AxsCfgExtrapolationAddExtrapolationTime(builder, extrapolationTime): builder.PrependFloat64Slot(1, extrapolationTime, 0.0)
def AddExtrapolationTime(builder, extrapolationTime):
    return AxsCfgExtrapolationAddExtrapolationTime(builder, extrapolationTime)
def AxsCfgExtrapolationAddExtrapolationTimeUnit(builder, extrapolationTimeUnit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(extrapolationTimeUnit), 0)
def AddExtrapolationTimeUnit(builder, extrapolationTimeUnit):
    return AxsCfgExtrapolationAddExtrapolationTimeUnit(builder, extrapolationTimeUnit)
def AxsCfgExtrapolationEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgExtrapolationEnd(builder)

class AxsCfgExtrapolationT(object):

    # AxsCfgExtrapolationT
    def __init__(self):
        self.extrapolateActual = False  # type: bool
        self.extrapolationTime = 0.0  # type: float
        self.extrapolationTimeUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgExtrapolation = AxsCfgExtrapolation()
        axsCfgExtrapolation.Init(buf, pos)
        return cls.InitFromObj(axsCfgExtrapolation)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgExtrapolation):
        x = AxsCfgExtrapolationT()
        x._UnPack(axsCfgExtrapolation)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.extrapolateActual == other.extrapolateActual and \
            self.extrapolationTime == other.extrapolationTime and \
            self.extrapolationTimeUnit == other.extrapolationTimeUnit

    # AxsCfgExtrapolationT
    def _UnPack(self, axsCfgExtrapolation):
        if axsCfgExtrapolation is None:
            return
        self.extrapolateActual = axsCfgExtrapolation.ExtrapolateActual()
        self.extrapolationTime = axsCfgExtrapolation.ExtrapolationTime()
        self.extrapolationTimeUnit = axsCfgExtrapolation.ExtrapolationTimeUnit()

    # AxsCfgExtrapolationT
    def Pack(self, builder):
        if self.extrapolationTimeUnit is not None:
            extrapolationTimeUnit = builder.CreateString(self.extrapolationTimeUnit)
        AxsCfgExtrapolationStart(builder)
        AxsCfgExtrapolationAddExtrapolateActual(builder, self.extrapolateActual)
        AxsCfgExtrapolationAddExtrapolationTime(builder, self.extrapolationTime)
        if self.extrapolationTimeUnit is not None:
            AxsCfgExtrapolationAddExtrapolationTimeUnit(builder, extrapolationTimeUnit)
        axsCfgExtrapolation = AxsCfgExtrapolationEnd(builder)
        return axsCfgExtrapolation
