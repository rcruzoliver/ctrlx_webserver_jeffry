# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single registered joint transformation when reading all data of an implemented joint transformation
class KinStateJntTrafoDataSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinStateJntTrafoDataSingle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinStateJntTrafoDataSingle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinStateJntTrafoDataSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ID of the joint transformation (to be used in the MCS set)
    # KinStateJntTrafoDataSingle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the joint transformation
    # KinStateJntTrafoDataSingle
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the joint transformation
    # KinStateJntTrafoDataSingle
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Image (link) of the joint transformation
    # KinStateJntTrafoDataSingle
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference to the documentation of the joint transformation
    # KinStateJntTrafoDataSingle
    def DocRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version string of the joint transformation
    # KinStateJntTrafoDataSingle
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point of work of the joint transformation
    # KinStateJntTrafoDataSingle
    def Pow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # All configuration parameters of the joint transformation
    # KinStateJntTrafoDataSingle
    def Parameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.KinStateJntTrafoDataAllParam import KinStateJntTrafoDataAllParam
            obj = KinStateJntTrafoDataAllParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Licence information of the joint transformation
    # KinStateJntTrafoDataSingle
    def License(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Icon image (link) of the joint transformation
    # KinStateJntTrafoDataSingle
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is the require license installed on the system?
    # KinStateJntTrafoDataSingle
    def LicenseInstalled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Position capability of this joint transformation (NO_POS, POS_3D, POS_XY, POS_ZX, POS_YZ, POS_X, POS_Y, POS_Z)
    # KinStateJntTrafoDataSingle
    def PosCapability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Orientation capability of this joint transformation (NO_ORI, ORI_3D, ORI_2D, ORI_1D_X, ORI_1D_Y, ORI_1D_Z)
    # KinStateJntTrafoDataSingle
    def OriCapability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinStateJntTrafoDataSingleStart(builder): builder.StartObject(13)
def Start(builder):
    return KinStateJntTrafoDataSingleStart(builder)
def KinStateJntTrafoDataSingleAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return KinStateJntTrafoDataSingleAddId(builder, id)
def KinStateJntTrafoDataSingleAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinStateJntTrafoDataSingleAddName(builder, name)
def KinStateJntTrafoDataSingleAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return KinStateJntTrafoDataSingleAddDescription(builder, description)
def KinStateJntTrafoDataSingleAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def AddImage(builder, image):
    return KinStateJntTrafoDataSingleAddImage(builder, image)
def KinStateJntTrafoDataSingleAddDocRef(builder, docRef): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(docRef), 0)
def AddDocRef(builder, docRef):
    return KinStateJntTrafoDataSingleAddDocRef(builder, docRef)
def KinStateJntTrafoDataSingleAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return KinStateJntTrafoDataSingleAddVersion(builder, version)
def KinStateJntTrafoDataSingleAddPow(builder, pow): builder.PrependInt8Slot(6, pow, 1)
def AddPow(builder, pow):
    return KinStateJntTrafoDataSingleAddPow(builder, pow)
def KinStateJntTrafoDataSingleAddParameters(builder, parameters): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def AddParameters(builder, parameters):
    return KinStateJntTrafoDataSingleAddParameters(builder, parameters)
def KinStateJntTrafoDataSingleAddLicense(builder, license): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(license), 0)
def AddLicense(builder, license):
    return KinStateJntTrafoDataSingleAddLicense(builder, license)
def KinStateJntTrafoDataSingleAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return KinStateJntTrafoDataSingleAddIcon(builder, icon)
def KinStateJntTrafoDataSingleAddLicenseInstalled(builder, licenseInstalled): builder.PrependBoolSlot(10, licenseInstalled, 0)
def AddLicenseInstalled(builder, licenseInstalled):
    return KinStateJntTrafoDataSingleAddLicenseInstalled(builder, licenseInstalled)
def KinStateJntTrafoDataSingleAddPosCapability(builder, posCapability): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(posCapability), 0)
def AddPosCapability(builder, posCapability):
    return KinStateJntTrafoDataSingleAddPosCapability(builder, posCapability)
def KinStateJntTrafoDataSingleAddOriCapability(builder, oriCapability): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(oriCapability), 0)
def AddOriCapability(builder, oriCapability):
    return KinStateJntTrafoDataSingleAddOriCapability(builder, oriCapability)
def KinStateJntTrafoDataSingleEnd(builder): return builder.EndObject()
def End(builder):
    return KinStateJntTrafoDataSingleEnd(builder)
import motion.core.fbtypes.KinStateJntTrafoDataAllParam
try:
    from typing import Optional
except:
    pass

class KinStateJntTrafoDataSingleT(object):

    # KinStateJntTrafoDataSingleT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.image = None  # type: str
        self.docRef = None  # type: str
        self.version = None  # type: str
        self.pow = 1  # type: int
        self.parameters = None  # type: Optional[motion.core.fbtypes.KinStateJntTrafoDataAllParam.KinStateJntTrafoDataAllParamT]
        self.license = None  # type: str
        self.icon = None  # type: str
        self.licenseInstalled = False  # type: bool
        self.posCapability = None  # type: str
        self.oriCapability = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinStateJntTrafoDataSingle = KinStateJntTrafoDataSingle()
        kinStateJntTrafoDataSingle.Init(buf, pos)
        return cls.InitFromObj(kinStateJntTrafoDataSingle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinStateJntTrafoDataSingle):
        x = KinStateJntTrafoDataSingleT()
        x._UnPack(kinStateJntTrafoDataSingle)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.name == other.name and \
            self.description == other.description and \
            self.image == other.image and \
            self.docRef == other.docRef and \
            self.version == other.version and \
            self.pow == other.pow and \
            self.parameters == other.parameters and \
            self.license == other.license and \
            self.icon == other.icon and \
            self.licenseInstalled == other.licenseInstalled and \
            self.posCapability == other.posCapability and \
            self.oriCapability == other.oriCapability

    # KinStateJntTrafoDataSingleT
    def _UnPack(self, kinStateJntTrafoDataSingle):
        if kinStateJntTrafoDataSingle is None:
            return
        self.id = kinStateJntTrafoDataSingle.Id()
        self.name = kinStateJntTrafoDataSingle.Name()
        self.description = kinStateJntTrafoDataSingle.Description()
        self.image = kinStateJntTrafoDataSingle.Image()
        self.docRef = kinStateJntTrafoDataSingle.DocRef()
        self.version = kinStateJntTrafoDataSingle.Version()
        self.pow = kinStateJntTrafoDataSingle.Pow()
        if kinStateJntTrafoDataSingle.Parameters() is not None:
            self.parameters = motion.core.fbtypes.KinStateJntTrafoDataAllParam.KinStateJntTrafoDataAllParamT.InitFromObj(kinStateJntTrafoDataSingle.Parameters())
        self.license = kinStateJntTrafoDataSingle.License()
        self.icon = kinStateJntTrafoDataSingle.Icon()
        self.licenseInstalled = kinStateJntTrafoDataSingle.LicenseInstalled()
        self.posCapability = kinStateJntTrafoDataSingle.PosCapability()
        self.oriCapability = kinStateJntTrafoDataSingle.OriCapability()

    # KinStateJntTrafoDataSingleT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.image is not None:
            image = builder.CreateString(self.image)
        if self.docRef is not None:
            docRef = builder.CreateString(self.docRef)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.parameters is not None:
            parameters = self.parameters.Pack(builder)
        if self.license is not None:
            license = builder.CreateString(self.license)
        if self.icon is not None:
            icon = builder.CreateString(self.icon)
        if self.posCapability is not None:
            posCapability = builder.CreateString(self.posCapability)
        if self.oriCapability is not None:
            oriCapability = builder.CreateString(self.oriCapability)
        KinStateJntTrafoDataSingleStart(builder)
        if self.id is not None:
            KinStateJntTrafoDataSingleAddId(builder, id)
        if self.name is not None:
            KinStateJntTrafoDataSingleAddName(builder, name)
        if self.description is not None:
            KinStateJntTrafoDataSingleAddDescription(builder, description)
        if self.image is not None:
            KinStateJntTrafoDataSingleAddImage(builder, image)
        if self.docRef is not None:
            KinStateJntTrafoDataSingleAddDocRef(builder, docRef)
        if self.version is not None:
            KinStateJntTrafoDataSingleAddVersion(builder, version)
        KinStateJntTrafoDataSingleAddPow(builder, self.pow)
        if self.parameters is not None:
            KinStateJntTrafoDataSingleAddParameters(builder, parameters)
        if self.license is not None:
            KinStateJntTrafoDataSingleAddLicense(builder, license)
        if self.icon is not None:
            KinStateJntTrafoDataSingleAddIcon(builder, icon)
        KinStateJntTrafoDataSingleAddLicenseInstalled(builder, self.licenseInstalled)
        if self.posCapability is not None:
            KinStateJntTrafoDataSingleAddPosCapability(builder, posCapability)
        if self.oriCapability is not None:
            KinStateJntTrafoDataSingleAddOriCapability(builder, oriCapability)
        kinStateJntTrafoDataSingle = KinStateJntTrafoDataSingleEnd(builder)
        return kinStateJntTrafoDataSingle
