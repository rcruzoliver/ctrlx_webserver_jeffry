# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# array of all (registered) motion components
class CompVersionInfos(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CompVersionInfos()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCompVersionInfos(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CompVersionInfos
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # array of all (registered) motion components
    # CompVersionInfos
    def Versions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.ComponentVersionInfo import ComponentVersionInfo
            obj = ComponentVersionInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CompVersionInfos
    def VersionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CompVersionInfos
    def VersionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CompVersionInfosStart(builder): builder.StartObject(1)
def Start(builder):
    return CompVersionInfosStart(builder)
def CompVersionInfosAddVersions(builder, versions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(versions), 0)
def AddVersions(builder, versions):
    return CompVersionInfosAddVersions(builder, versions)
def CompVersionInfosStartVersionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVersionsVector(builder, numElems):
    return CompVersionInfosStartVersionsVector(builder, numElems)
def CompVersionInfosEnd(builder): return builder.EndObject()
def End(builder):
    return CompVersionInfosEnd(builder)
import motion.core.fbtypes.ComponentVersionInfo
try:
    from typing import List
except:
    pass

class CompVersionInfosT(object):

    # CompVersionInfosT
    def __init__(self):
        self.versions = None  # type: List[motion.core.fbtypes.ComponentVersionInfo.ComponentVersionInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        compVersionInfos = CompVersionInfos()
        compVersionInfos.Init(buf, pos)
        return cls.InitFromObj(compVersionInfos)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, compVersionInfos):
        x = CompVersionInfosT()
        x._UnPack(compVersionInfos)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.versions == other.versions

    # CompVersionInfosT
    def _UnPack(self, compVersionInfos):
        if compVersionInfos is None:
            return
        if not compVersionInfos.VersionsIsNone():
            self.versions = []
            for i in range(compVersionInfos.VersionsLength()):
                if compVersionInfos.Versions(i) is None:
                    self.versions.append(None)
                else:
                    componentVersionInfo_ = motion.core.fbtypes.ComponentVersionInfo.ComponentVersionInfoT.InitFromObj(compVersionInfos.Versions(i))
                    self.versions.append(componentVersionInfo_)

    # CompVersionInfosT
    def Pack(self, builder):
        if self.versions is not None:
            versionslist = []
            for i in range(len(self.versions)):
                versionslist.append(self.versions[i].Pack(builder))
            CompVersionInfosStartVersionsVector(builder, len(self.versions))
            for i in reversed(range(len(self.versions))):
                builder.PrependUOffsetTRelative(versionslist[i])
            versions = builder.EndVector()
        CompVersionInfosStart(builder)
        if self.versions is not None:
            CompVersionInfosAddVersions(builder, versions)
        compVersionInfos = CompVersionInfosEnd(builder)
        return compVersionInfos
