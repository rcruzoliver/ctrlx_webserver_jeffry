# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# all currently acquired licenses (motion must be in state RUNNING)
class AcquiredLicenses(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AcquiredLicenses()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAcquiredLicenses(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AcquiredLicenses
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # array of all licenses
    # AcquiredLicenses
    def Licenses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SingleLicense import SingleLicense
            obj = SingleLicense()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AcquiredLicenses
    def LicensesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AcquiredLicenses
    def LicensesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AcquiredLicensesStart(builder): builder.StartObject(1)
def Start(builder):
    return AcquiredLicensesStart(builder)
def AcquiredLicensesAddLicenses(builder, licenses): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(licenses), 0)
def AddLicenses(builder, licenses):
    return AcquiredLicensesAddLicenses(builder, licenses)
def AcquiredLicensesStartLicensesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLicensesVector(builder, numElems):
    return AcquiredLicensesStartLicensesVector(builder, numElems)
def AcquiredLicensesEnd(builder): return builder.EndObject()
def End(builder):
    return AcquiredLicensesEnd(builder)
import motion.core.fbtypes.SingleLicense
try:
    from typing import List
except:
    pass

class AcquiredLicensesT(object):

    # AcquiredLicensesT
    def __init__(self):
        self.licenses = None  # type: List[motion.core.fbtypes.SingleLicense.SingleLicenseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        acquiredLicenses = AcquiredLicenses()
        acquiredLicenses.Init(buf, pos)
        return cls.InitFromObj(acquiredLicenses)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, acquiredLicenses):
        x = AcquiredLicensesT()
        x._UnPack(acquiredLicenses)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.licenses == other.licenses

    # AcquiredLicensesT
    def _UnPack(self, acquiredLicenses):
        if acquiredLicenses is None:
            return
        if not acquiredLicenses.LicensesIsNone():
            self.licenses = []
            for i in range(acquiredLicenses.LicensesLength()):
                if acquiredLicenses.Licenses(i) is None:
                    self.licenses.append(None)
                else:
                    singleLicense_ = motion.core.fbtypes.SingleLicense.SingleLicenseT.InitFromObj(acquiredLicenses.Licenses(i))
                    self.licenses.append(singleLicense_)

    # AcquiredLicensesT
    def Pack(self, builder):
        if self.licenses is not None:
            licenseslist = []
            for i in range(len(self.licenses)):
                licenseslist.append(self.licenses[i].Pack(builder))
            AcquiredLicensesStartLicensesVector(builder, len(self.licenses))
            for i in reversed(range(len(self.licenses))):
                builder.PrependUOffsetTRelative(licenseslist[i])
            licenses = builder.EndVector()
        AcquiredLicensesStart(builder)
        if self.licenses is not None:
            AcquiredLicensesAddLicenses(builder, licenses)
        acquiredLicenses = AcquiredLicensesEnd(builder)
        return acquiredLicenses
