# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of the tool data system
class SysCfgToolDataAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgToolDataAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgToolDataAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgToolDataAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured tool data sets
    # SysCfgToolDataAll
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgToolDataSet import SysCfgToolDataSet
            obj = SysCfgToolDataSet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgToolDataAll
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataAll
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # vector of all configured tool data groups
    # SysCfgToolDataAll
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgToolDataGroup import SysCfgToolDataGroup
            obj = SysCfgToolDataGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgToolDataAll
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgToolDataAll
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SysCfgToolDataAllStart(builder): builder.StartObject(2)
def Start(builder):
    return SysCfgToolDataAllStart(builder)
def SysCfgToolDataAllAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def AddSets(builder, sets):
    return SysCfgToolDataAllAddSets(builder, sets)
def SysCfgToolDataAllStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSetsVector(builder, numElems):
    return SysCfgToolDataAllStartSetsVector(builder, numElems)
def SysCfgToolDataAllAddGroups(builder, groups): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)
def AddGroups(builder, groups):
    return SysCfgToolDataAllAddGroups(builder, groups)
def SysCfgToolDataAllStartGroupsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartGroupsVector(builder, numElems):
    return SysCfgToolDataAllStartGroupsVector(builder, numElems)
def SysCfgToolDataAllEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgToolDataAllEnd(builder)
import motion.core.fbtypes.SysCfgToolDataGroup
import motion.core.fbtypes.SysCfgToolDataSet
try:
    from typing import List
except:
    pass

class SysCfgToolDataAllT(object):

    # SysCfgToolDataAllT
    def __init__(self):
        self.sets = None  # type: List[motion.core.fbtypes.SysCfgToolDataSet.SysCfgToolDataSetT]
        self.groups = None  # type: List[motion.core.fbtypes.SysCfgToolDataGroup.SysCfgToolDataGroupT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgToolDataAll = SysCfgToolDataAll()
        sysCfgToolDataAll.Init(buf, pos)
        return cls.InitFromObj(sysCfgToolDataAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgToolDataAll):
        x = SysCfgToolDataAllT()
        x._UnPack(sysCfgToolDataAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sets == other.sets and \
            self.groups == other.groups

    # SysCfgToolDataAllT
    def _UnPack(self, sysCfgToolDataAll):
        if sysCfgToolDataAll is None:
            return
        if not sysCfgToolDataAll.SetsIsNone():
            self.sets = []
            for i in range(sysCfgToolDataAll.SetsLength()):
                if sysCfgToolDataAll.Sets(i) is None:
                    self.sets.append(None)
                else:
                    sysCfgToolDataSet_ = motion.core.fbtypes.SysCfgToolDataSet.SysCfgToolDataSetT.InitFromObj(sysCfgToolDataAll.Sets(i))
                    self.sets.append(sysCfgToolDataSet_)
        if not sysCfgToolDataAll.GroupsIsNone():
            self.groups = []
            for i in range(sysCfgToolDataAll.GroupsLength()):
                if sysCfgToolDataAll.Groups(i) is None:
                    self.groups.append(None)
                else:
                    sysCfgToolDataGroup_ = motion.core.fbtypes.SysCfgToolDataGroup.SysCfgToolDataGroupT.InitFromObj(sysCfgToolDataAll.Groups(i))
                    self.groups.append(sysCfgToolDataGroup_)

    # SysCfgToolDataAllT
    def Pack(self, builder):
        if self.sets is not None:
            setslist = []
            for i in range(len(self.sets)):
                setslist.append(self.sets[i].Pack(builder))
            SysCfgToolDataAllStartSetsVector(builder, len(self.sets))
            for i in reversed(range(len(self.sets))):
                builder.PrependUOffsetTRelative(setslist[i])
            sets = builder.EndVector()
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(self.groups[i].Pack(builder))
            SysCfgToolDataAllStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector()
        SysCfgToolDataAllStart(builder)
        if self.sets is not None:
            SysCfgToolDataAllAddSets(builder, sets)
        if self.groups is not None:
            SysCfgToolDataAllAddGroups(builder, groups)
        sysCfgToolDataAll = SysCfgToolDataAllEnd(builder)
        return sysCfgToolDataAll
