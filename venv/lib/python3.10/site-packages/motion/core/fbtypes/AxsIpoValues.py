# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently interpolated values
class AxsIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsIpoValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsIpoValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently interpolated position
    # AxsIpoValues
    def IpoPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated velocity
    # AxsIpoValues
    def IpoVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated acceleration
    # AxsIpoValues
    def IpoAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently interpolated jerk
    # AxsIpoValues
    def IpoJrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of currently interpolated position
    # AxsIpoValues
    def IpoPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of currently interpolated velocity
    # AxsIpoValues
    def IpoVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of currently interpolated acceleration
    # AxsIpoValues
    def IpoAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of currently interpolated jerk
    # AxsIpoValues
    def IpoJrkUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsIpoValuesStart(builder): builder.StartObject(8)
def Start(builder):
    return AxsIpoValuesStart(builder)
def AxsIpoValuesAddIpoPos(builder, ipoPos): builder.PrependFloat64Slot(0, ipoPos, 0.0)
def AddIpoPos(builder, ipoPos):
    return AxsIpoValuesAddIpoPos(builder, ipoPos)
def AxsIpoValuesAddIpoVel(builder, ipoVel): builder.PrependFloat64Slot(1, ipoVel, 0.0)
def AddIpoVel(builder, ipoVel):
    return AxsIpoValuesAddIpoVel(builder, ipoVel)
def AxsIpoValuesAddIpoAcc(builder, ipoAcc): builder.PrependFloat64Slot(2, ipoAcc, 0.0)
def AddIpoAcc(builder, ipoAcc):
    return AxsIpoValuesAddIpoAcc(builder, ipoAcc)
def AxsIpoValuesAddIpoJrk(builder, ipoJrk): builder.PrependFloat64Slot(3, ipoJrk, 0.0)
def AddIpoJrk(builder, ipoJrk):
    return AxsIpoValuesAddIpoJrk(builder, ipoJrk)
def AxsIpoValuesAddIpoPosUnit(builder, ipoPosUnit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ipoPosUnit), 0)
def AddIpoPosUnit(builder, ipoPosUnit):
    return AxsIpoValuesAddIpoPosUnit(builder, ipoPosUnit)
def AxsIpoValuesAddIpoVelUnit(builder, ipoVelUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ipoVelUnit), 0)
def AddIpoVelUnit(builder, ipoVelUnit):
    return AxsIpoValuesAddIpoVelUnit(builder, ipoVelUnit)
def AxsIpoValuesAddIpoAccUnit(builder, ipoAccUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ipoAccUnit), 0)
def AddIpoAccUnit(builder, ipoAccUnit):
    return AxsIpoValuesAddIpoAccUnit(builder, ipoAccUnit)
def AxsIpoValuesAddIpoJrkUnit(builder, ipoJrkUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ipoJrkUnit), 0)
def AddIpoJrkUnit(builder, ipoJrkUnit):
    return AxsIpoValuesAddIpoJrkUnit(builder, ipoJrkUnit)
def AxsIpoValuesEnd(builder): return builder.EndObject()
def End(builder):
    return AxsIpoValuesEnd(builder)

class AxsIpoValuesT(object):

    # AxsIpoValuesT
    def __init__(self):
        self.ipoPos = 0.0  # type: float
        self.ipoVel = 0.0  # type: float
        self.ipoAcc = 0.0  # type: float
        self.ipoJrk = 0.0  # type: float
        self.ipoPosUnit = None  # type: str
        self.ipoVelUnit = None  # type: str
        self.ipoAccUnit = None  # type: str
        self.ipoJrkUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsIpoValues = AxsIpoValues()
        axsIpoValues.Init(buf, pos)
        return cls.InitFromObj(axsIpoValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsIpoValues):
        x = AxsIpoValuesT()
        x._UnPack(axsIpoValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ipoPos == other.ipoPos and \
            self.ipoVel == other.ipoVel and \
            self.ipoAcc == other.ipoAcc and \
            self.ipoJrk == other.ipoJrk and \
            self.ipoPosUnit == other.ipoPosUnit and \
            self.ipoVelUnit == other.ipoVelUnit and \
            self.ipoAccUnit == other.ipoAccUnit and \
            self.ipoJrkUnit == other.ipoJrkUnit

    # AxsIpoValuesT
    def _UnPack(self, axsIpoValues):
        if axsIpoValues is None:
            return
        self.ipoPos = axsIpoValues.IpoPos()
        self.ipoVel = axsIpoValues.IpoVel()
        self.ipoAcc = axsIpoValues.IpoAcc()
        self.ipoJrk = axsIpoValues.IpoJrk()
        self.ipoPosUnit = axsIpoValues.IpoPosUnit()
        self.ipoVelUnit = axsIpoValues.IpoVelUnit()
        self.ipoAccUnit = axsIpoValues.IpoAccUnit()
        self.ipoJrkUnit = axsIpoValues.IpoJrkUnit()

    # AxsIpoValuesT
    def Pack(self, builder):
        if self.ipoPosUnit is not None:
            ipoPosUnit = builder.CreateString(self.ipoPosUnit)
        if self.ipoVelUnit is not None:
            ipoVelUnit = builder.CreateString(self.ipoVelUnit)
        if self.ipoAccUnit is not None:
            ipoAccUnit = builder.CreateString(self.ipoAccUnit)
        if self.ipoJrkUnit is not None:
            ipoJrkUnit = builder.CreateString(self.ipoJrkUnit)
        AxsIpoValuesStart(builder)
        AxsIpoValuesAddIpoPos(builder, self.ipoPos)
        AxsIpoValuesAddIpoVel(builder, self.ipoVel)
        AxsIpoValuesAddIpoAcc(builder, self.ipoAcc)
        AxsIpoValuesAddIpoJrk(builder, self.ipoJrk)
        if self.ipoPosUnit is not None:
            AxsIpoValuesAddIpoPosUnit(builder, ipoPosUnit)
        if self.ipoVelUnit is not None:
            AxsIpoValuesAddIpoVelUnit(builder, ipoVelUnit)
        if self.ipoAccUnit is not None:
            AxsIpoValuesAddIpoAccUnit(builder, ipoAccUnit)
        if self.ipoJrkUnit is not None:
            AxsIpoValuesAddIpoJrkUnit(builder, ipoJrkUnit)
        axsIpoValues = AxsIpoValuesEnd(builder)
        return axsIpoValues
