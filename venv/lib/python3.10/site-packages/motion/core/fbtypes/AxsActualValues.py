# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# actual values from the drives
class AxsActualValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsActualValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsActualValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsActualValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # actual drive position
    # AxsActualValues
    def ActualPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual drive velocity (currently not supported for real drives)
    # AxsActualValues
    def ActualVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual drive acceleration (currently not supported for real drives)
    # AxsActualValues
    def ActualAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual drive torque (currently not supported for real drives)
    # AxsActualValues
    def ActualTorque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # actual distance left to the commanded target (currently not supported for real drives)
    # AxsActualValues
    def DistLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the actual drive position
    # AxsActualValues
    def ActualPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual drive velocity (currently not supported for real drives)
    # AxsActualValues
    def ActualVelUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual drive acceleration (currently not supported for real drives)
    # AxsActualValues
    def ActualAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual drive torque (currently not supported for real drives)
    # AxsActualValues
    def ActualTorqueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the actual distance left to the commanded target (currently not supported for real drives)
    # AxsActualValues
    def DistLeftUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsActualValuesStart(builder): builder.StartObject(10)
def Start(builder):
    return AxsActualValuesStart(builder)
def AxsActualValuesAddActualPos(builder, actualPos): builder.PrependFloat64Slot(0, actualPos, 0.0)
def AddActualPos(builder, actualPos):
    return AxsActualValuesAddActualPos(builder, actualPos)
def AxsActualValuesAddActualVel(builder, actualVel): builder.PrependFloat64Slot(1, actualVel, 0.0)
def AddActualVel(builder, actualVel):
    return AxsActualValuesAddActualVel(builder, actualVel)
def AxsActualValuesAddActualAcc(builder, actualAcc): builder.PrependFloat64Slot(2, actualAcc, 0.0)
def AddActualAcc(builder, actualAcc):
    return AxsActualValuesAddActualAcc(builder, actualAcc)
def AxsActualValuesAddActualTorque(builder, actualTorque): builder.PrependFloat64Slot(3, actualTorque, 0.0)
def AddActualTorque(builder, actualTorque):
    return AxsActualValuesAddActualTorque(builder, actualTorque)
def AxsActualValuesAddDistLeft(builder, distLeft): builder.PrependFloat64Slot(4, distLeft, 0.0)
def AddDistLeft(builder, distLeft):
    return AxsActualValuesAddDistLeft(builder, distLeft)
def AxsActualValuesAddActualPosUnit(builder, actualPosUnit): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actualPosUnit), 0)
def AddActualPosUnit(builder, actualPosUnit):
    return AxsActualValuesAddActualPosUnit(builder, actualPosUnit)
def AxsActualValuesAddActualVelUnit(builder, actualVelUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actualVelUnit), 0)
def AddActualVelUnit(builder, actualVelUnit):
    return AxsActualValuesAddActualVelUnit(builder, actualVelUnit)
def AxsActualValuesAddActualAccUnit(builder, actualAccUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actualAccUnit), 0)
def AddActualAccUnit(builder, actualAccUnit):
    return AxsActualValuesAddActualAccUnit(builder, actualAccUnit)
def AxsActualValuesAddActualTorqueUnit(builder, actualTorqueUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(actualTorqueUnit), 0)
def AddActualTorqueUnit(builder, actualTorqueUnit):
    return AxsActualValuesAddActualTorqueUnit(builder, actualTorqueUnit)
def AxsActualValuesAddDistLeftUnit(builder, distLeftUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(distLeftUnit), 0)
def AddDistLeftUnit(builder, distLeftUnit):
    return AxsActualValuesAddDistLeftUnit(builder, distLeftUnit)
def AxsActualValuesEnd(builder): return builder.EndObject()
def End(builder):
    return AxsActualValuesEnd(builder)

class AxsActualValuesT(object):

    # AxsActualValuesT
    def __init__(self):
        self.actualPos = 0.0  # type: float
        self.actualVel = 0.0  # type: float
        self.actualAcc = 0.0  # type: float
        self.actualTorque = 0.0  # type: float
        self.distLeft = 0.0  # type: float
        self.actualPosUnit = None  # type: str
        self.actualVelUnit = None  # type: str
        self.actualAccUnit = None  # type: str
        self.actualTorqueUnit = None  # type: str
        self.distLeftUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsActualValues = AxsActualValues()
        axsActualValues.Init(buf, pos)
        return cls.InitFromObj(axsActualValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsActualValues):
        x = AxsActualValuesT()
        x._UnPack(axsActualValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.actualPos == other.actualPos and \
            self.actualVel == other.actualVel and \
            self.actualAcc == other.actualAcc and \
            self.actualTorque == other.actualTorque and \
            self.distLeft == other.distLeft and \
            self.actualPosUnit == other.actualPosUnit and \
            self.actualVelUnit == other.actualVelUnit and \
            self.actualAccUnit == other.actualAccUnit and \
            self.actualTorqueUnit == other.actualTorqueUnit and \
            self.distLeftUnit == other.distLeftUnit

    # AxsActualValuesT
    def _UnPack(self, axsActualValues):
        if axsActualValues is None:
            return
        self.actualPos = axsActualValues.ActualPos()
        self.actualVel = axsActualValues.ActualVel()
        self.actualAcc = axsActualValues.ActualAcc()
        self.actualTorque = axsActualValues.ActualTorque()
        self.distLeft = axsActualValues.DistLeft()
        self.actualPosUnit = axsActualValues.ActualPosUnit()
        self.actualVelUnit = axsActualValues.ActualVelUnit()
        self.actualAccUnit = axsActualValues.ActualAccUnit()
        self.actualTorqueUnit = axsActualValues.ActualTorqueUnit()
        self.distLeftUnit = axsActualValues.DistLeftUnit()

    # AxsActualValuesT
    def Pack(self, builder):
        if self.actualPosUnit is not None:
            actualPosUnit = builder.CreateString(self.actualPosUnit)
        if self.actualVelUnit is not None:
            actualVelUnit = builder.CreateString(self.actualVelUnit)
        if self.actualAccUnit is not None:
            actualAccUnit = builder.CreateString(self.actualAccUnit)
        if self.actualTorqueUnit is not None:
            actualTorqueUnit = builder.CreateString(self.actualTorqueUnit)
        if self.distLeftUnit is not None:
            distLeftUnit = builder.CreateString(self.distLeftUnit)
        AxsActualValuesStart(builder)
        AxsActualValuesAddActualPos(builder, self.actualPos)
        AxsActualValuesAddActualVel(builder, self.actualVel)
        AxsActualValuesAddActualAcc(builder, self.actualAcc)
        AxsActualValuesAddActualTorque(builder, self.actualTorque)
        AxsActualValuesAddDistLeft(builder, self.distLeft)
        if self.actualPosUnit is not None:
            AxsActualValuesAddActualPosUnit(builder, actualPosUnit)
        if self.actualVelUnit is not None:
            AxsActualValuesAddActualVelUnit(builder, actualVelUnit)
        if self.actualAccUnit is not None:
            AxsActualValuesAddActualAccUnit(builder, actualAccUnit)
        if self.actualTorqueUnit is not None:
            AxsActualValuesAddActualTorqueUnit(builder, actualTorqueUnit)
        if self.distLeftUnit is not None:
            AxsActualValuesAddDistLeftUnit(builder, distLeftUnit)
        axsActualValues = AxsActualValuesEnd(builder)
        return axsActualValues
