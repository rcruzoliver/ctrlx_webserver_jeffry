# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# return type of requests of the times of the last booting
class BootTimes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BootTimes()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBootTimes(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BootTimes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Elapsed time of the last booting (only valid after end of booting) in seconds
    # BootTimes
    def Elapsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Elapsed time of the last booting (only valid after end of booting) in seconds only for the own thead (does not include waiting on other threads)
    # BootTimes
    def ElapsedThread(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time stamp (string), when the last booting started
    # BootTimes
    def StartedTimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time stamp (string), when the last booting ended
    # BootTimes
    def EndedTimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BootTimesStart(builder): builder.StartObject(4)
def Start(builder):
    return BootTimesStart(builder)
def BootTimesAddElapsed(builder, elapsed): builder.PrependFloat64Slot(0, elapsed, 0.0)
def AddElapsed(builder, elapsed):
    return BootTimesAddElapsed(builder, elapsed)
def BootTimesAddElapsedThread(builder, elapsedThread): builder.PrependFloat64Slot(1, elapsedThread, 0.0)
def AddElapsedThread(builder, elapsedThread):
    return BootTimesAddElapsedThread(builder, elapsedThread)
def BootTimesAddStartedTimeStamp(builder, startedTimeStamp): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(startedTimeStamp), 0)
def AddStartedTimeStamp(builder, startedTimeStamp):
    return BootTimesAddStartedTimeStamp(builder, startedTimeStamp)
def BootTimesAddEndedTimeStamp(builder, endedTimeStamp): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(endedTimeStamp), 0)
def AddEndedTimeStamp(builder, endedTimeStamp):
    return BootTimesAddEndedTimeStamp(builder, endedTimeStamp)
def BootTimesEnd(builder): return builder.EndObject()
def End(builder):
    return BootTimesEnd(builder)

class BootTimesT(object):

    # BootTimesT
    def __init__(self):
        self.elapsed = 0.0  # type: float
        self.elapsedThread = 0.0  # type: float
        self.startedTimeStamp = None  # type: str
        self.endedTimeStamp = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bootTimes = BootTimes()
        bootTimes.Init(buf, pos)
        return cls.InitFromObj(bootTimes)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bootTimes):
        x = BootTimesT()
        x._UnPack(bootTimes)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.elapsed == other.elapsed and \
            self.elapsedThread == other.elapsedThread and \
            self.startedTimeStamp == other.startedTimeStamp and \
            self.endedTimeStamp == other.endedTimeStamp

    # BootTimesT
    def _UnPack(self, bootTimes):
        if bootTimes is None:
            return
        self.elapsed = bootTimes.Elapsed()
        self.elapsedThread = bootTimes.ElapsedThread()
        self.startedTimeStamp = bootTimes.StartedTimeStamp()
        self.endedTimeStamp = bootTimes.EndedTimeStamp()

    # BootTimesT
    def Pack(self, builder):
        if self.startedTimeStamp is not None:
            startedTimeStamp = builder.CreateString(self.startedTimeStamp)
        if self.endedTimeStamp is not None:
            endedTimeStamp = builder.CreateString(self.endedTimeStamp)
        BootTimesStart(builder)
        BootTimesAddElapsed(builder, self.elapsed)
        BootTimesAddElapsedThread(builder, self.elapsedThread)
        if self.startedTimeStamp is not None:
            BootTimesAddStartedTimeStamp(builder, startedTimeStamp)
        if self.endedTimeStamp is not None:
            BootTimesAddEndedTimeStamp(builder, endedTimeStamp)
        bootTimes = BootTimesEnd(builder)
        return bootTimes
