# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of encoder axis
class AxsCfgEncoder(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgEncoder()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgEncoder(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgEncoder
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # output revolution of load gear
    # AxsCfgEncoder
    def OutputRevLoadGear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # output revolution of load gear
    # AxsCfgEncoder
    def InputRevLoadGear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # encoder resolution
    # AxsCfgEncoder
    def Resolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # feed constant which only been used as linear axis
    # AxsCfgEncoder
    def FeedConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # filter type
    # AxsCfgEncoder
    def FilterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # cutoff frequency of the filter
    # AxsCfgEncoder
    def CutoffFrq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of feed constant
    # AxsCfgEncoder
    def FeedConstUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of cutoff frequency
    # AxsCfgEncoder
    def CutoffFrqUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgEncoderStart(builder): builder.StartObject(8)
def Start(builder):
    return AxsCfgEncoderStart(builder)
def AxsCfgEncoderAddOutputRevLoadGear(builder, outputRevLoadGear): builder.PrependUint32Slot(0, outputRevLoadGear, 0)
def AddOutputRevLoadGear(builder, outputRevLoadGear):
    return AxsCfgEncoderAddOutputRevLoadGear(builder, outputRevLoadGear)
def AxsCfgEncoderAddInputRevLoadGear(builder, inputRevLoadGear): builder.PrependUint32Slot(1, inputRevLoadGear, 0)
def AddInputRevLoadGear(builder, inputRevLoadGear):
    return AxsCfgEncoderAddInputRevLoadGear(builder, inputRevLoadGear)
def AxsCfgEncoderAddResolution(builder, resolution): builder.PrependUint32Slot(2, resolution, 0)
def AddResolution(builder, resolution):
    return AxsCfgEncoderAddResolution(builder, resolution)
def AxsCfgEncoderAddFeedConst(builder, feedConst): builder.PrependFloat64Slot(3, feedConst, 0.0)
def AddFeedConst(builder, feedConst):
    return AxsCfgEncoderAddFeedConst(builder, feedConst)
def AxsCfgEncoderAddFilterType(builder, filterType): builder.PrependInt8Slot(4, filterType, 0)
def AddFilterType(builder, filterType):
    return AxsCfgEncoderAddFilterType(builder, filterType)
def AxsCfgEncoderAddCutoffFrq(builder, cutoffFrq): builder.PrependFloat64Slot(5, cutoffFrq, 0.0)
def AddCutoffFrq(builder, cutoffFrq):
    return AxsCfgEncoderAddCutoffFrq(builder, cutoffFrq)
def AxsCfgEncoderAddFeedConstUnit(builder, feedConstUnit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(feedConstUnit), 0)
def AddFeedConstUnit(builder, feedConstUnit):
    return AxsCfgEncoderAddFeedConstUnit(builder, feedConstUnit)
def AxsCfgEncoderAddCutoffFrqUnit(builder, cutoffFrqUnit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cutoffFrqUnit), 0)
def AddCutoffFrqUnit(builder, cutoffFrqUnit):
    return AxsCfgEncoderAddCutoffFrqUnit(builder, cutoffFrqUnit)
def AxsCfgEncoderEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgEncoderEnd(builder)

class AxsCfgEncoderT(object):

    # AxsCfgEncoderT
    def __init__(self):
        self.outputRevLoadGear = 0  # type: int
        self.inputRevLoadGear = 0  # type: int
        self.resolution = 0  # type: int
        self.feedConst = 0.0  # type: float
        self.filterType = 0  # type: int
        self.cutoffFrq = 0.0  # type: float
        self.feedConstUnit = None  # type: str
        self.cutoffFrqUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgEncoder = AxsCfgEncoder()
        axsCfgEncoder.Init(buf, pos)
        return cls.InitFromObj(axsCfgEncoder)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgEncoder):
        x = AxsCfgEncoderT()
        x._UnPack(axsCfgEncoder)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.outputRevLoadGear == other.outputRevLoadGear and \
            self.inputRevLoadGear == other.inputRevLoadGear and \
            self.resolution == other.resolution and \
            self.feedConst == other.feedConst and \
            self.filterType == other.filterType and \
            self.cutoffFrq == other.cutoffFrq and \
            self.feedConstUnit == other.feedConstUnit and \
            self.cutoffFrqUnit == other.cutoffFrqUnit

    # AxsCfgEncoderT
    def _UnPack(self, axsCfgEncoder):
        if axsCfgEncoder is None:
            return
        self.outputRevLoadGear = axsCfgEncoder.OutputRevLoadGear()
        self.inputRevLoadGear = axsCfgEncoder.InputRevLoadGear()
        self.resolution = axsCfgEncoder.Resolution()
        self.feedConst = axsCfgEncoder.FeedConst()
        self.filterType = axsCfgEncoder.FilterType()
        self.cutoffFrq = axsCfgEncoder.CutoffFrq()
        self.feedConstUnit = axsCfgEncoder.FeedConstUnit()
        self.cutoffFrqUnit = axsCfgEncoder.CutoffFrqUnit()

    # AxsCfgEncoderT
    def Pack(self, builder):
        if self.feedConstUnit is not None:
            feedConstUnit = builder.CreateString(self.feedConstUnit)
        if self.cutoffFrqUnit is not None:
            cutoffFrqUnit = builder.CreateString(self.cutoffFrqUnit)
        AxsCfgEncoderStart(builder)
        AxsCfgEncoderAddOutputRevLoadGear(builder, self.outputRevLoadGear)
        AxsCfgEncoderAddInputRevLoadGear(builder, self.inputRevLoadGear)
        AxsCfgEncoderAddResolution(builder, self.resolution)
        AxsCfgEncoderAddFeedConst(builder, self.feedConst)
        AxsCfgEncoderAddFilterType(builder, self.filterType)
        AxsCfgEncoderAddCutoffFrq(builder, self.cutoffFrq)
        if self.feedConstUnit is not None:
            AxsCfgEncoderAddFeedConstUnit(builder, feedConstUnit)
        if self.cutoffFrqUnit is not None:
            AxsCfgEncoderAddCutoffFrqUnit(builder, cutoffFrqUnit)
        axsCfgEncoder = AxsCfgEncoderEnd(builder)
        return axsCfgEncoder
