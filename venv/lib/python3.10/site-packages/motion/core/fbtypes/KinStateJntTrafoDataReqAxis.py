# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single entry of a required axis of a joint transformation when reading all data of an implemented joint transformation
class KinStateJntTrafoDataReqAxis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinStateJntTrafoDataReqAxis()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinStateJntTrafoDataReqAxis(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinStateJntTrafoDataReqAxis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the axis (as used in the joint transformation)
    # KinStateJntTrafoDataReqAxis
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the axis
    # KinStateJntTrafoDataReqAxis
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Image (link) of the axis
    # KinStateJntTrafoDataReqAxis
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference to the documentation of the axis
    # KinStateJntTrafoDataReqAxis
    def DocRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of the axis (linear, rotational, any)
    # KinStateJntTrafoDataReqAxis
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Is this axis mandatory?
    # KinStateJntTrafoDataReqAxis
    def Mandatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def KinStateJntTrafoDataReqAxisStart(builder): builder.StartObject(6)
def Start(builder):
    return KinStateJntTrafoDataReqAxisStart(builder)
def KinStateJntTrafoDataReqAxisAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinStateJntTrafoDataReqAxisAddName(builder, name)
def KinStateJntTrafoDataReqAxisAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return KinStateJntTrafoDataReqAxisAddDescription(builder, description)
def KinStateJntTrafoDataReqAxisAddImage(builder, image): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)
def AddImage(builder, image):
    return KinStateJntTrafoDataReqAxisAddImage(builder, image)
def KinStateJntTrafoDataReqAxisAddDocRef(builder, docRef): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(docRef), 0)
def AddDocRef(builder, docRef):
    return KinStateJntTrafoDataReqAxisAddDocRef(builder, docRef)
def KinStateJntTrafoDataReqAxisAddType(builder, type): builder.PrependInt8Slot(4, type, 0)
def AddType(builder, type):
    return KinStateJntTrafoDataReqAxisAddType(builder, type)
def KinStateJntTrafoDataReqAxisAddMandatory(builder, mandatory): builder.PrependBoolSlot(5, mandatory, 0)
def AddMandatory(builder, mandatory):
    return KinStateJntTrafoDataReqAxisAddMandatory(builder, mandatory)
def KinStateJntTrafoDataReqAxisEnd(builder): return builder.EndObject()
def End(builder):
    return KinStateJntTrafoDataReqAxisEnd(builder)

class KinStateJntTrafoDataReqAxisT(object):

    # KinStateJntTrafoDataReqAxisT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.image = None  # type: str
        self.docRef = None  # type: str
        self.type = 0  # type: int
        self.mandatory = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinStateJntTrafoDataReqAxis = KinStateJntTrafoDataReqAxis()
        kinStateJntTrafoDataReqAxis.Init(buf, pos)
        return cls.InitFromObj(kinStateJntTrafoDataReqAxis)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinStateJntTrafoDataReqAxis):
        x = KinStateJntTrafoDataReqAxisT()
        x._UnPack(kinStateJntTrafoDataReqAxis)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.description == other.description and \
            self.image == other.image and \
            self.docRef == other.docRef and \
            self.type == other.type and \
            self.mandatory == other.mandatory

    # KinStateJntTrafoDataReqAxisT
    def _UnPack(self, kinStateJntTrafoDataReqAxis):
        if kinStateJntTrafoDataReqAxis is None:
            return
        self.name = kinStateJntTrafoDataReqAxis.Name()
        self.description = kinStateJntTrafoDataReqAxis.Description()
        self.image = kinStateJntTrafoDataReqAxis.Image()
        self.docRef = kinStateJntTrafoDataReqAxis.DocRef()
        self.type = kinStateJntTrafoDataReqAxis.Type()
        self.mandatory = kinStateJntTrafoDataReqAxis.Mandatory()

    # KinStateJntTrafoDataReqAxisT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.image is not None:
            image = builder.CreateString(self.image)
        if self.docRef is not None:
            docRef = builder.CreateString(self.docRef)
        KinStateJntTrafoDataReqAxisStart(builder)
        if self.name is not None:
            KinStateJntTrafoDataReqAxisAddName(builder, name)
        if self.description is not None:
            KinStateJntTrafoDataReqAxisAddDescription(builder, description)
        if self.image is not None:
            KinStateJntTrafoDataReqAxisAddImage(builder, image)
        if self.docRef is not None:
            KinStateJntTrafoDataReqAxisAddDocRef(builder, docRef)
        KinStateJntTrafoDataReqAxisAddType(builder, self.type)
        KinStateJntTrafoDataReqAxisAddMandatory(builder, self.mandatory)
        kinStateJntTrafoDataReqAxis = KinStateJntTrafoDataReqAxisEnd(builder)
        return kinStateJntTrafoDataReqAxis
