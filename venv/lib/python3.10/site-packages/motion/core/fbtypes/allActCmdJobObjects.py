# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# get informations of all active commands of a single motion object
class allActCmdJobObjects(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = allActCmdJobObjects()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsallActCmdJobObjects(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # allActCmdJobObjects
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all command informations
    # allActCmdJobObjects
    def Cmds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.actCmdJobObjects import actCmdJobObjects
            obj = actCmdJobObjects()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # allActCmdJobObjects
    def CmdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # allActCmdJobObjects
    def CmdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def allActCmdJobObjectsStart(builder): builder.StartObject(1)
def Start(builder):
    return allActCmdJobObjectsStart(builder)
def allActCmdJobObjectsAddCmds(builder, cmds): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmds), 0)
def AddCmds(builder, cmds):
    return allActCmdJobObjectsAddCmds(builder, cmds)
def allActCmdJobObjectsStartCmdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdsVector(builder, numElems):
    return allActCmdJobObjectsStartCmdsVector(builder, numElems)
def allActCmdJobObjectsEnd(builder): return builder.EndObject()
def End(builder):
    return allActCmdJobObjectsEnd(builder)
import motion.core.fbtypes.actCmdJobObjects
try:
    from typing import List
except:
    pass

class allActCmdJobObjectsT(object):

    # allActCmdJobObjectsT
    def __init__(self):
        self.cmds = None  # type: List[motion.core.fbtypes.actCmdJobObjects.actCmdJobObjectsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        allActCmdJobObjects = allActCmdJobObjects()
        allActCmdJobObjects.Init(buf, pos)
        return cls.InitFromObj(allActCmdJobObjects)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, allActCmdJobObjects):
        x = allActCmdJobObjectsT()
        x._UnPack(allActCmdJobObjects)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cmds == other.cmds

    # allActCmdJobObjectsT
    def _UnPack(self, allActCmdJobObjects):
        if allActCmdJobObjects is None:
            return
        if not allActCmdJobObjects.CmdsIsNone():
            self.cmds = []
            for i in range(allActCmdJobObjects.CmdsLength()):
                if allActCmdJobObjects.Cmds(i) is None:
                    self.cmds.append(None)
                else:
                    actCmdJobObjects_ = motion.core.fbtypes.actCmdJobObjects.actCmdJobObjectsT.InitFromObj(allActCmdJobObjects.Cmds(i))
                    self.cmds.append(actCmdJobObjects_)

    # allActCmdJobObjectsT
    def Pack(self, builder):
        if self.cmds is not None:
            cmdslist = []
            for i in range(len(self.cmds)):
                cmdslist.append(self.cmds[i].Pack(builder))
            allActCmdJobObjectsStartCmdsVector(builder, len(self.cmds))
            for i in reversed(range(len(self.cmds))):
                builder.PrependUOffsetTRelative(cmdslist[i])
            cmds = builder.EndVector()
        allActCmdJobObjectsStart(builder)
        if self.cmds is not None:
            allActCmdJobObjectsAddCmds(builder, cmds)
        allActCmdJobObjects = allActCmdJobObjectsEnd(builder)
        return allActCmdJobObjects
