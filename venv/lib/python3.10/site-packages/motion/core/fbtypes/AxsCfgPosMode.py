# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for position mode function parameters for a single axis
class AxsCfgPosMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgPosMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgPosMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgPosMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the target position window for modulo axes (modulo axes always use shortest way, when inside this window)
    # AxsCfgPosMode
    def TargetPosWindowModulo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of the target position window for modulo axes
    # AxsCfgPosMode
    def TargetPosWindowModuloUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgPosModeStart(builder): builder.StartObject(2)
def Start(builder):
    return AxsCfgPosModeStart(builder)
def AxsCfgPosModeAddTargetPosWindowModulo(builder, targetPosWindowModulo): builder.PrependFloat64Slot(0, targetPosWindowModulo, 0.0)
def AddTargetPosWindowModulo(builder, targetPosWindowModulo):
    return AxsCfgPosModeAddTargetPosWindowModulo(builder, targetPosWindowModulo)
def AxsCfgPosModeAddTargetPosWindowModuloUnit(builder, targetPosWindowModuloUnit): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(targetPosWindowModuloUnit), 0)
def AddTargetPosWindowModuloUnit(builder, targetPosWindowModuloUnit):
    return AxsCfgPosModeAddTargetPosWindowModuloUnit(builder, targetPosWindowModuloUnit)
def AxsCfgPosModeEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgPosModeEnd(builder)

class AxsCfgPosModeT(object):

    # AxsCfgPosModeT
    def __init__(self):
        self.targetPosWindowModulo = 0.0  # type: float
        self.targetPosWindowModuloUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgPosMode = AxsCfgPosMode()
        axsCfgPosMode.Init(buf, pos)
        return cls.InitFromObj(axsCfgPosMode)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgPosMode):
        x = AxsCfgPosModeT()
        x._UnPack(axsCfgPosMode)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.targetPosWindowModulo == other.targetPosWindowModulo and \
            self.targetPosWindowModuloUnit == other.targetPosWindowModuloUnit

    # AxsCfgPosModeT
    def _UnPack(self, axsCfgPosMode):
        if axsCfgPosMode is None:
            return
        self.targetPosWindowModulo = axsCfgPosMode.TargetPosWindowModulo()
        self.targetPosWindowModuloUnit = axsCfgPosMode.TargetPosWindowModuloUnit()

    # AxsCfgPosModeT
    def Pack(self, builder):
        if self.targetPosWindowModuloUnit is not None:
            targetPosWindowModuloUnit = builder.CreateString(self.targetPosWindowModuloUnit)
        AxsCfgPosModeStart(builder)
        AxsCfgPosModeAddTargetPosWindowModulo(builder, self.targetPosWindowModulo)
        if self.targetPosWindowModuloUnit is not None:
            AxsCfgPosModeAddTargetPosWindowModuloUnit(builder, targetPosWindowModuloUnit)
        axsCfgPosMode = AxsCfgPosModeEnd(builder)
        return axsCfgPosMode
