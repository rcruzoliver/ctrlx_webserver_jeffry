# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single set for the product coordiate system of a kinematics
class SysCfgPcsSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgPcsSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgPcsSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgPcsSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the set (required for load/save)
    # SysCfgPcsSet
    def SetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # XYZ offsets (must be exactly three values)
    # SysCfgPcsSet
    def OffsetXyz(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgPcsSet
    def OffsetXyzAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgPcsSet
    def OffsetXyzLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetXyzIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # rotation offsets as Euler angles ZY'Z'' (must be exactly three values)
    # SysCfgPcsSet
    def Orientation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgPcsSet
    def OrientationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgPcsSet
    def OrientationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OrientationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # offsets for auxilary axes (must be exactly 10 values)
    # SysCfgPcsSet
    def OffsetAux(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SysCfgPcsSet
    def OffsetAuxAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SysCfgPcsSet
    def OffsetAuxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetAuxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # is this set relative to an other pcs set?
    # SysCfgPcsSet
    def RelativeToPcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Units for XYZ offsets (must be exactly three values)
    # SysCfgPcsSet
    def OffsetXyzunits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsSet
    def OffsetXyzunitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetXyzunitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Units for rotation offsets (must be exactly three values)
    # SysCfgPcsSet
    def OrientationUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsSet
    def OrientationUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OrientationUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Units for offsets for auxilary axes (must be exactly 10 values)
    # SysCfgPcsSet
    def OffsetAuxUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsSet
    def OffsetAuxUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsSet
    def OffsetAuxUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def SysCfgPcsSetStart(builder): builder.StartObject(8)
def Start(builder):
    return SysCfgPcsSetStart(builder)
def SysCfgPcsSetAddSetName(builder, setName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(setName), 0)
def AddSetName(builder, setName):
    return SysCfgPcsSetAddSetName(builder, setName)
def SysCfgPcsSetAddOffsetXyz(builder, offsetXyz): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(offsetXyz), 0)
def AddOffsetXyz(builder, offsetXyz):
    return SysCfgPcsSetAddOffsetXyz(builder, offsetXyz)
def SysCfgPcsSetStartOffsetXyzVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOffsetXyzVector(builder, numElems):
    return SysCfgPcsSetStartOffsetXyzVector(builder, numElems)
def SysCfgPcsSetAddOrientation(builder, orientation): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)
def AddOrientation(builder, orientation):
    return SysCfgPcsSetAddOrientation(builder, orientation)
def SysCfgPcsSetStartOrientationVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOrientationVector(builder, numElems):
    return SysCfgPcsSetStartOrientationVector(builder, numElems)
def SysCfgPcsSetAddOffsetAux(builder, offsetAux): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(offsetAux), 0)
def AddOffsetAux(builder, offsetAux):
    return SysCfgPcsSetAddOffsetAux(builder, offsetAux)
def SysCfgPcsSetStartOffsetAuxVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOffsetAuxVector(builder, numElems):
    return SysCfgPcsSetStartOffsetAuxVector(builder, numElems)
def SysCfgPcsSetAddRelativeToPcs(builder, relativeToPcs): builder.PrependBoolSlot(4, relativeToPcs, 0)
def AddRelativeToPcs(builder, relativeToPcs):
    return SysCfgPcsSetAddRelativeToPcs(builder, relativeToPcs)
def SysCfgPcsSetAddOffsetXyzunits(builder, offsetXyzunits): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(offsetXyzunits), 0)
def AddOffsetXyzunits(builder, offsetXyzunits):
    return SysCfgPcsSetAddOffsetXyzunits(builder, offsetXyzunits)
def SysCfgPcsSetStartOffsetXyzunitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOffsetXyzunitsVector(builder, numElems):
    return SysCfgPcsSetStartOffsetXyzunitsVector(builder, numElems)
def SysCfgPcsSetAddOrientationUnits(builder, orientationUnits): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(orientationUnits), 0)
def AddOrientationUnits(builder, orientationUnits):
    return SysCfgPcsSetAddOrientationUnits(builder, orientationUnits)
def SysCfgPcsSetStartOrientationUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOrientationUnitsVector(builder, numElems):
    return SysCfgPcsSetStartOrientationUnitsVector(builder, numElems)
def SysCfgPcsSetAddOffsetAuxUnits(builder, offsetAuxUnits): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(offsetAuxUnits), 0)
def AddOffsetAuxUnits(builder, offsetAuxUnits):
    return SysCfgPcsSetAddOffsetAuxUnits(builder, offsetAuxUnits)
def SysCfgPcsSetStartOffsetAuxUnitsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOffsetAuxUnitsVector(builder, numElems):
    return SysCfgPcsSetStartOffsetAuxUnitsVector(builder, numElems)
def SysCfgPcsSetEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgPcsSetEnd(builder)
try:
    from typing import List
except:
    pass

class SysCfgPcsSetT(object):

    # SysCfgPcsSetT
    def __init__(self):
        self.setName = None  # type: str
        self.offsetXyz = None  # type: List[float]
        self.orientation = None  # type: List[float]
        self.offsetAux = None  # type: List[float]
        self.relativeToPcs = False  # type: bool
        self.offsetXyzunits = None  # type: List[str]
        self.orientationUnits = None  # type: List[str]
        self.offsetAuxUnits = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgPcsSet = SysCfgPcsSet()
        sysCfgPcsSet.Init(buf, pos)
        return cls.InitFromObj(sysCfgPcsSet)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgPcsSet):
        x = SysCfgPcsSetT()
        x._UnPack(sysCfgPcsSet)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.setName == other.setName and \
            self.offsetXyz == other.offsetXyz and \
            self.orientation == other.orientation and \
            self.offsetAux == other.offsetAux and \
            self.relativeToPcs == other.relativeToPcs and \
            self.offsetXyzunits == other.offsetXyzunits and \
            self.orientationUnits == other.orientationUnits and \
            self.offsetAuxUnits == other.offsetAuxUnits

    # SysCfgPcsSetT
    def _UnPack(self, sysCfgPcsSet):
        if sysCfgPcsSet is None:
            return
        self.setName = sysCfgPcsSet.SetName()
        if not sysCfgPcsSet.OffsetXyzIsNone():
            if np is None:
                self.offsetXyz = []
                for i in range(sysCfgPcsSet.OffsetXyzLength()):
                    self.offsetXyz.append(sysCfgPcsSet.OffsetXyz(i))
            else:
                self.offsetXyz = sysCfgPcsSet.OffsetXyzAsNumpy()
        if not sysCfgPcsSet.OrientationIsNone():
            if np is None:
                self.orientation = []
                for i in range(sysCfgPcsSet.OrientationLength()):
                    self.orientation.append(sysCfgPcsSet.Orientation(i))
            else:
                self.orientation = sysCfgPcsSet.OrientationAsNumpy()
        if not sysCfgPcsSet.OffsetAuxIsNone():
            if np is None:
                self.offsetAux = []
                for i in range(sysCfgPcsSet.OffsetAuxLength()):
                    self.offsetAux.append(sysCfgPcsSet.OffsetAux(i))
            else:
                self.offsetAux = sysCfgPcsSet.OffsetAuxAsNumpy()
        self.relativeToPcs = sysCfgPcsSet.RelativeToPcs()
        if not sysCfgPcsSet.OffsetXyzunitsIsNone():
            self.offsetXyzunits = []
            for i in range(sysCfgPcsSet.OffsetXyzunitsLength()):
                self.offsetXyzunits.append(sysCfgPcsSet.OffsetXyzunits(i))
        if not sysCfgPcsSet.OrientationUnitsIsNone():
            self.orientationUnits = []
            for i in range(sysCfgPcsSet.OrientationUnitsLength()):
                self.orientationUnits.append(sysCfgPcsSet.OrientationUnits(i))
        if not sysCfgPcsSet.OffsetAuxUnitsIsNone():
            self.offsetAuxUnits = []
            for i in range(sysCfgPcsSet.OffsetAuxUnitsLength()):
                self.offsetAuxUnits.append(sysCfgPcsSet.OffsetAuxUnits(i))

    # SysCfgPcsSetT
    def Pack(self, builder):
        if self.setName is not None:
            setName = builder.CreateString(self.setName)
        if self.offsetXyz is not None:
            if np is not None and type(self.offsetXyz) is np.ndarray:
                offsetXyz = builder.CreateNumpyVector(self.offsetXyz)
            else:
                SysCfgPcsSetStartOffsetXyzVector(builder, len(self.offsetXyz))
                for i in reversed(range(len(self.offsetXyz))):
                    builder.PrependFloat64(self.offsetXyz[i])
                offsetXyz = builder.EndVector()
        if self.orientation is not None:
            if np is not None and type(self.orientation) is np.ndarray:
                orientation = builder.CreateNumpyVector(self.orientation)
            else:
                SysCfgPcsSetStartOrientationVector(builder, len(self.orientation))
                for i in reversed(range(len(self.orientation))):
                    builder.PrependFloat64(self.orientation[i])
                orientation = builder.EndVector()
        if self.offsetAux is not None:
            if np is not None and type(self.offsetAux) is np.ndarray:
                offsetAux = builder.CreateNumpyVector(self.offsetAux)
            else:
                SysCfgPcsSetStartOffsetAuxVector(builder, len(self.offsetAux))
                for i in reversed(range(len(self.offsetAux))):
                    builder.PrependFloat64(self.offsetAux[i])
                offsetAux = builder.EndVector()
        if self.offsetXyzunits is not None:
            offsetXyzunitslist = []
            for i in range(len(self.offsetXyzunits)):
                offsetXyzunitslist.append(builder.CreateString(self.offsetXyzunits[i]))
            SysCfgPcsSetStartOffsetXyzunitsVector(builder, len(self.offsetXyzunits))
            for i in reversed(range(len(self.offsetXyzunits))):
                builder.PrependUOffsetTRelative(offsetXyzunitslist[i])
            offsetXyzunits = builder.EndVector()
        if self.orientationUnits is not None:
            orientationUnitslist = []
            for i in range(len(self.orientationUnits)):
                orientationUnitslist.append(builder.CreateString(self.orientationUnits[i]))
            SysCfgPcsSetStartOrientationUnitsVector(builder, len(self.orientationUnits))
            for i in reversed(range(len(self.orientationUnits))):
                builder.PrependUOffsetTRelative(orientationUnitslist[i])
            orientationUnits = builder.EndVector()
        if self.offsetAuxUnits is not None:
            offsetAuxUnitslist = []
            for i in range(len(self.offsetAuxUnits)):
                offsetAuxUnitslist.append(builder.CreateString(self.offsetAuxUnits[i]))
            SysCfgPcsSetStartOffsetAuxUnitsVector(builder, len(self.offsetAuxUnits))
            for i in reversed(range(len(self.offsetAuxUnits))):
                builder.PrependUOffsetTRelative(offsetAuxUnitslist[i])
            offsetAuxUnits = builder.EndVector()
        SysCfgPcsSetStart(builder)
        if self.setName is not None:
            SysCfgPcsSetAddSetName(builder, setName)
        if self.offsetXyz is not None:
            SysCfgPcsSetAddOffsetXyz(builder, offsetXyz)
        if self.orientation is not None:
            SysCfgPcsSetAddOrientation(builder, orientation)
        if self.offsetAux is not None:
            SysCfgPcsSetAddOffsetAux(builder, offsetAux)
        SysCfgPcsSetAddRelativeToPcs(builder, self.relativeToPcs)
        if self.offsetXyzunits is not None:
            SysCfgPcsSetAddOffsetXyzunits(builder, offsetXyzunits)
        if self.orientationUnits is not None:
            SysCfgPcsSetAddOrientationUnits(builder, orientationUnits)
        if self.offsetAuxUnits is not None:
            SysCfgPcsSetAddOffsetAuxUnits(builder, offsetAuxUnits)
        sysCfgPcsSet = SysCfgPcsSetEnd(builder)
        return sysCfgPcsSet
