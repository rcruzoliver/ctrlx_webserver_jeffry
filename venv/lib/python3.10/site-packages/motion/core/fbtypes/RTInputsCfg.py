# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# common configuration of real-time inputs
class RTInputsCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RTInputsCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRTInputsCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RTInputsCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # size of the double array
    # RTInputsCfg
    def DoubleArraySize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # size of the int64 array
    # RTInputsCfg
    def Int64ArraySize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def RTInputsCfgStart(builder): builder.StartObject(2)
def Start(builder):
    return RTInputsCfgStart(builder)
def RTInputsCfgAddDoubleArraySize(builder, doubleArraySize): builder.PrependUint32Slot(0, doubleArraySize, 0)
def AddDoubleArraySize(builder, doubleArraySize):
    return RTInputsCfgAddDoubleArraySize(builder, doubleArraySize)
def RTInputsCfgAddInt64ArraySize(builder, int64ArraySize): builder.PrependUint32Slot(1, int64ArraySize, 0)
def AddInt64ArraySize(builder, int64ArraySize):
    return RTInputsCfgAddInt64ArraySize(builder, int64ArraySize)
def RTInputsCfgEnd(builder): return builder.EndObject()
def End(builder):
    return RTInputsCfgEnd(builder)

class RTInputsCfgT(object):

    # RTInputsCfgT
    def __init__(self):
        self.doubleArraySize = 0  # type: int
        self.int64ArraySize = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rtinputsCfg = RTInputsCfg()
        rtinputsCfg.Init(buf, pos)
        return cls.InitFromObj(rtinputsCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rtinputsCfg):
        x = RTInputsCfgT()
        x._UnPack(rtinputsCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.doubleArraySize == other.doubleArraySize and \
            self.int64ArraySize == other.int64ArraySize

    # RTInputsCfgT
    def _UnPack(self, rtinputsCfg):
        if rtinputsCfg is None:
            return
        self.doubleArraySize = rtinputsCfg.DoubleArraySize()
        self.int64ArraySize = rtinputsCfg.Int64ArraySize()

    # RTInputsCfgT
    def Pack(self, builder):
        RTInputsCfgStart(builder)
        RTInputsCfgAddDoubleArraySize(builder, self.doubleArraySize)
        RTInputsCfgAddInt64ArraySize(builder, self.int64ArraySize)
        rtinputsCfg = RTInputsCfgEnd(builder)
        return rtinputsCfg
