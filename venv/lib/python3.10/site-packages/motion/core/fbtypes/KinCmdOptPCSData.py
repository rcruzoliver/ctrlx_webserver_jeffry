# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option PCS (product coordinate system) for kinematics
class KinCmdOptPCSData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptPCSData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdOptPCSData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdOptPCSData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # KinCmdOptPCSData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the set/group that should become active
    # KinCmdOptPCSData
    def SetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCmdOptPCSDataStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCmdOptPCSDataStart(builder)
def KinCmdOptPCSDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def AddPermType(builder, permType):
    return KinCmdOptPCSDataAddPermType(builder, permType)
def KinCmdOptPCSDataAddSetName(builder, setName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(setName), 0)
def AddSetName(builder, setName):
    return KinCmdOptPCSDataAddSetName(builder, setName)
def KinCmdOptPCSDataEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdOptPCSDataEnd(builder)

class KinCmdOptPCSDataT(object):

    # KinCmdOptPCSDataT
    def __init__(self):
        self.permType = None  # type: str
        self.setName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptPcsdata = KinCmdOptPCSData()
        kinCmdOptPcsdata.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptPcsdata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdOptPcsdata):
        x = KinCmdOptPCSDataT()
        x._UnPack(kinCmdOptPcsdata)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.permType == other.permType and \
            self.setName == other.setName

    # KinCmdOptPCSDataT
    def _UnPack(self, kinCmdOptPcsdata):
        if kinCmdOptPcsdata is None:
            return
        self.permType = kinCmdOptPcsdata.PermType()
        self.setName = kinCmdOptPcsdata.SetName()

    # KinCmdOptPCSDataT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        if self.setName is not None:
            setName = builder.CreateString(self.setName)
        KinCmdOptPCSDataStart(builder)
        if self.permType is not None:
            KinCmdOptPCSDataAddPermType(builder, permType)
        if self.setName is not None:
            KinCmdOptPCSDataAddSetName(builder, setName)
        kinCmdOptPcsdata = KinCmdOptPCSDataEnd(builder)
        return kinCmdOptPcsdata
