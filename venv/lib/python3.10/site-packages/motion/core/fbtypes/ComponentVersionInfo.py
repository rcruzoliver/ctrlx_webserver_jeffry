# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# version information (uses semantic versioning) of a single motion component
class ComponentVersionInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ComponentVersionInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsComponentVersionInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ComponentVersionInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the motion component
    # ComponentVersionInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # major version number of the motion component
    # ComponentVersionInfo
    def MajorVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # minor version number of the motion component
    # ComponentVersionInfo
    def MinorVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # patch version number of the motion component
    # ComponentVersionInfo
    def PatchVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # build number of the motion component
    # ComponentVersionInfo
    def BuildNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # name of the branch, in which this motion component was built
    # ComponentVersionInfo
    def Branch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # complete version name string
    # ComponentVersionInfo
    def VersionString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the commit, that was built for the component
    # ComponentVersionInfo
    def Commit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # type of the motion component
    # ComponentVersionInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # additional informations (not yet used)
    # ComponentVersionInfo
    def AddInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ComponentVersionInfo
    def AddInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ComponentVersionInfo
    def AddInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def ComponentVersionInfoStart(builder): builder.StartObject(10)
def Start(builder):
    return ComponentVersionInfoStart(builder)
def ComponentVersionInfoAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ComponentVersionInfoAddName(builder, name)
def ComponentVersionInfoAddMajorVersion(builder, majorVersion): builder.PrependUint32Slot(1, majorVersion, 0)
def AddMajorVersion(builder, majorVersion):
    return ComponentVersionInfoAddMajorVersion(builder, majorVersion)
def ComponentVersionInfoAddMinorVersion(builder, minorVersion): builder.PrependUint32Slot(2, minorVersion, 0)
def AddMinorVersion(builder, minorVersion):
    return ComponentVersionInfoAddMinorVersion(builder, minorVersion)
def ComponentVersionInfoAddPatchVersion(builder, patchVersion): builder.PrependUint32Slot(3, patchVersion, 0)
def AddPatchVersion(builder, patchVersion):
    return ComponentVersionInfoAddPatchVersion(builder, patchVersion)
def ComponentVersionInfoAddBuildNumber(builder, buildNumber): builder.PrependUint32Slot(4, buildNumber, 0)
def AddBuildNumber(builder, buildNumber):
    return ComponentVersionInfoAddBuildNumber(builder, buildNumber)
def ComponentVersionInfoAddBranch(builder, branch): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(branch), 0)
def AddBranch(builder, branch):
    return ComponentVersionInfoAddBranch(builder, branch)
def ComponentVersionInfoAddVersionString(builder, versionString): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(versionString), 0)
def AddVersionString(builder, versionString):
    return ComponentVersionInfoAddVersionString(builder, versionString)
def ComponentVersionInfoAddCommit(builder, commit): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(commit), 0)
def AddCommit(builder, commit):
    return ComponentVersionInfoAddCommit(builder, commit)
def ComponentVersionInfoAddType(builder, type): builder.PrependInt8Slot(8, type, 0)
def AddType(builder, type):
    return ComponentVersionInfoAddType(builder, type)
def ComponentVersionInfoAddAddInfo(builder, addInfo): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)
def AddAddInfo(builder, addInfo):
    return ComponentVersionInfoAddAddInfo(builder, addInfo)
def ComponentVersionInfoStartAddInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAddInfoVector(builder, numElems):
    return ComponentVersionInfoStartAddInfoVector(builder, numElems)
def ComponentVersionInfoEnd(builder): return builder.EndObject()
def End(builder):
    return ComponentVersionInfoEnd(builder)
try:
    from typing import List
except:
    pass

class ComponentVersionInfoT(object):

    # ComponentVersionInfoT
    def __init__(self):
        self.name = None  # type: str
        self.majorVersion = 0  # type: int
        self.minorVersion = 0  # type: int
        self.patchVersion = 0  # type: int
        self.buildNumber = 0  # type: int
        self.branch = None  # type: str
        self.versionString = None  # type: str
        self.commit = None  # type: str
        self.type = 0  # type: int
        self.addInfo = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        componentVersionInfo = ComponentVersionInfo()
        componentVersionInfo.Init(buf, pos)
        return cls.InitFromObj(componentVersionInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, componentVersionInfo):
        x = ComponentVersionInfoT()
        x._UnPack(componentVersionInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.majorVersion == other.majorVersion and \
            self.minorVersion == other.minorVersion and \
            self.patchVersion == other.patchVersion and \
            self.buildNumber == other.buildNumber and \
            self.branch == other.branch and \
            self.versionString == other.versionString and \
            self.commit == other.commit and \
            self.type == other.type and \
            self.addInfo == other.addInfo

    # ComponentVersionInfoT
    def _UnPack(self, componentVersionInfo):
        if componentVersionInfo is None:
            return
        self.name = componentVersionInfo.Name()
        self.majorVersion = componentVersionInfo.MajorVersion()
        self.minorVersion = componentVersionInfo.MinorVersion()
        self.patchVersion = componentVersionInfo.PatchVersion()
        self.buildNumber = componentVersionInfo.BuildNumber()
        self.branch = componentVersionInfo.Branch()
        self.versionString = componentVersionInfo.VersionString()
        self.commit = componentVersionInfo.Commit()
        self.type = componentVersionInfo.Type()
        if not componentVersionInfo.AddInfoIsNone():
            self.addInfo = []
            for i in range(componentVersionInfo.AddInfoLength()):
                self.addInfo.append(componentVersionInfo.AddInfo(i))

    # ComponentVersionInfoT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.branch is not None:
            branch = builder.CreateString(self.branch)
        if self.versionString is not None:
            versionString = builder.CreateString(self.versionString)
        if self.commit is not None:
            commit = builder.CreateString(self.commit)
        if self.addInfo is not None:
            addInfolist = []
            for i in range(len(self.addInfo)):
                addInfolist.append(builder.CreateString(self.addInfo[i]))
            ComponentVersionInfoStartAddInfoVector(builder, len(self.addInfo))
            for i in reversed(range(len(self.addInfo))):
                builder.PrependUOffsetTRelative(addInfolist[i])
            addInfo = builder.EndVector()
        ComponentVersionInfoStart(builder)
        if self.name is not None:
            ComponentVersionInfoAddName(builder, name)
        ComponentVersionInfoAddMajorVersion(builder, self.majorVersion)
        ComponentVersionInfoAddMinorVersion(builder, self.minorVersion)
        ComponentVersionInfoAddPatchVersion(builder, self.patchVersion)
        ComponentVersionInfoAddBuildNumber(builder, self.buildNumber)
        if self.branch is not None:
            ComponentVersionInfoAddBranch(builder, branch)
        if self.versionString is not None:
            ComponentVersionInfoAddVersionString(builder, versionString)
        if self.commit is not None:
            ComponentVersionInfoAddCommit(builder, commit)
        ComponentVersionInfoAddType(builder, self.type)
        if self.addInfo is not None:
            ComponentVersionInfoAddAddInfo(builder, addInfo)
        componentVersionInfo = ComponentVersionInfoEnd(builder)
        return componentVersionInfo
