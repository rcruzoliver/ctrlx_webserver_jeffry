# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for E-Stop dynamic limitation
class AxsCfgEstopDynamicLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgEstopDynamicLimits()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgEstopDynamicLimits(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgEstopDynamicLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # deceleration limit (must be greater than zero)
    # AxsCfgEstopDynamicLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # deceleration jerk limit (must be greater than zero OR zero for not jerk limited motion)
    # AxsCfgEstopDynamicLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of dec
    # AxsCfgEstopDynamicLimits
    def DecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkDec
    # AxsCfgEstopDynamicLimits
    def JrkDecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgEstopDynamicLimitsStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsCfgEstopDynamicLimitsStart(builder)
def AxsCfgEstopDynamicLimitsAddDec(builder, dec): builder.PrependFloat64Slot(0, dec, 0.0)
def AddDec(builder, dec):
    return AxsCfgEstopDynamicLimitsAddDec(builder, dec)
def AxsCfgEstopDynamicLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(1, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return AxsCfgEstopDynamicLimitsAddJrkDec(builder, jrkDec)
def AxsCfgEstopDynamicLimitsAddDecUnit(builder, decUnit): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(decUnit), 0)
def AddDecUnit(builder, decUnit):
    return AxsCfgEstopDynamicLimitsAddDecUnit(builder, decUnit)
def AxsCfgEstopDynamicLimitsAddJrkDecUnit(builder, jrkDecUnit): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(jrkDecUnit), 0)
def AddJrkDecUnit(builder, jrkDecUnit):
    return AxsCfgEstopDynamicLimitsAddJrkDecUnit(builder, jrkDecUnit)
def AxsCfgEstopDynamicLimitsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgEstopDynamicLimitsEnd(builder)

class AxsCfgEstopDynamicLimitsT(object):

    # AxsCfgEstopDynamicLimitsT
    def __init__(self):
        self.dec = 0.0  # type: float
        self.jrkDec = 0.0  # type: float
        self.decUnit = None  # type: str
        self.jrkDecUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgEstopDynamicLimits = AxsCfgEstopDynamicLimits()
        axsCfgEstopDynamicLimits.Init(buf, pos)
        return cls.InitFromObj(axsCfgEstopDynamicLimits)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgEstopDynamicLimits):
        x = AxsCfgEstopDynamicLimitsT()
        x._UnPack(axsCfgEstopDynamicLimits)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dec == other.dec and \
            self.jrkDec == other.jrkDec and \
            self.decUnit == other.decUnit and \
            self.jrkDecUnit == other.jrkDecUnit

    # AxsCfgEstopDynamicLimitsT
    def _UnPack(self, axsCfgEstopDynamicLimits):
        if axsCfgEstopDynamicLimits is None:
            return
        self.dec = axsCfgEstopDynamicLimits.Dec()
        self.jrkDec = axsCfgEstopDynamicLimits.JrkDec()
        self.decUnit = axsCfgEstopDynamicLimits.DecUnit()
        self.jrkDecUnit = axsCfgEstopDynamicLimits.JrkDecUnit()

    # AxsCfgEstopDynamicLimitsT
    def Pack(self, builder):
        if self.decUnit is not None:
            decUnit = builder.CreateString(self.decUnit)
        if self.jrkDecUnit is not None:
            jrkDecUnit = builder.CreateString(self.jrkDecUnit)
        AxsCfgEstopDynamicLimitsStart(builder)
        AxsCfgEstopDynamicLimitsAddDec(builder, self.dec)
        AxsCfgEstopDynamicLimitsAddJrkDec(builder, self.jrkDec)
        if self.decUnit is not None:
            AxsCfgEstopDynamicLimitsAddDecUnit(builder, decUnit)
        if self.jrkDecUnit is not None:
            AxsCfgEstopDynamicLimitsAddJrkDecUnit(builder, jrkDecUnit)
        axsCfgEstopDynamicLimits = AxsCfgEstopDynamicLimitsEnd(builder)
        return axsCfgEstopDynamicLimits
