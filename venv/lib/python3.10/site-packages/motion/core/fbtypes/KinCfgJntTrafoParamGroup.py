# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single parameter group of a joint transformation
class KinCfgJntTrafoParamGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoParamGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoParamGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoParamGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the parameter group
    # KinCfgJntTrafoParamGroup
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # all configuration parameter of this group
    # KinCfgJntTrafoParamGroup
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgJntTrafoSingleParam import KinCfgJntTrafoSingleParam
            obj = KinCfgJntTrafoSingleParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgJntTrafoParamGroup
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgJntTrafoParamGroup
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinCfgJntTrafoParamGroupStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCfgJntTrafoParamGroupStart(builder)
def KinCfgJntTrafoParamGroupAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return KinCfgJntTrafoParamGroupAddName(builder, name)
def KinCfgJntTrafoParamGroupAddParam(builder, param): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)
def AddParam(builder, param):
    return KinCfgJntTrafoParamGroupAddParam(builder, param)
def KinCfgJntTrafoParamGroupStartParamVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartParamVector(builder, numElems):
    return KinCfgJntTrafoParamGroupStartParamVector(builder, numElems)
def KinCfgJntTrafoParamGroupEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoParamGroupEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoSingleParam
try:
    from typing import List
except:
    pass

class KinCfgJntTrafoParamGroupT(object):

    # KinCfgJntTrafoParamGroupT
    def __init__(self):
        self.name = None  # type: str
        self.param = None  # type: List[motion.core.fbtypes.KinCfgJntTrafoSingleParam.KinCfgJntTrafoSingleParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoParamGroup = KinCfgJntTrafoParamGroup()
        kinCfgJntTrafoParamGroup.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoParamGroup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoParamGroup):
        x = KinCfgJntTrafoParamGroupT()
        x._UnPack(kinCfgJntTrafoParamGroup)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.param == other.param

    # KinCfgJntTrafoParamGroupT
    def _UnPack(self, kinCfgJntTrafoParamGroup):
        if kinCfgJntTrafoParamGroup is None:
            return
        self.name = kinCfgJntTrafoParamGroup.Name()
        if not kinCfgJntTrafoParamGroup.ParamIsNone():
            self.param = []
            for i in range(kinCfgJntTrafoParamGroup.ParamLength()):
                if kinCfgJntTrafoParamGroup.Param(i) is None:
                    self.param.append(None)
                else:
                    kinCfgJntTrafoSingleParam_ = motion.core.fbtypes.KinCfgJntTrafoSingleParam.KinCfgJntTrafoSingleParamT.InitFromObj(kinCfgJntTrafoParamGroup.Param(i))
                    self.param.append(kinCfgJntTrafoSingleParam_)

    # KinCfgJntTrafoParamGroupT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.param is not None:
            paramlist = []
            for i in range(len(self.param)):
                paramlist.append(self.param[i].Pack(builder))
            KinCfgJntTrafoParamGroupStartParamVector(builder, len(self.param))
            for i in reversed(range(len(self.param))):
                builder.PrependUOffsetTRelative(paramlist[i])
            param = builder.EndVector()
        KinCfgJntTrafoParamGroupStart(builder)
        if self.name is not None:
            KinCfgJntTrafoParamGroupAddName(builder, name)
        if self.param is not None:
            KinCfgJntTrafoParamGroupAddParam(builder, param)
        kinCfgJntTrafoParamGroup = KinCfgJntTrafoParamGroupEnd(builder)
        return kinCfgJntTrafoParamGroup
