# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# informations on a single MCS set
class StateMCSSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StateMCSSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStateMCSSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StateMCSSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # is the MCS set valid and can be used?
    # StateMCSSet
    def Valid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # all diagnoses, that were created in the last validation of the MCS set
    # StateMCSSet
    def LastCheckDiag(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.JointTrafoCheckDiag import JointTrafoCheckDiag
            obj = JointTrafoCheckDiag()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StateMCSSet
    def LastCheckDiagLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StateMCSSet
    def LastCheckDiagIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def StateMCSSetStart(builder): builder.StartObject(2)
def Start(builder):
    return StateMCSSetStart(builder)
def StateMCSSetAddValid(builder, valid): builder.PrependBoolSlot(0, valid, 0)
def AddValid(builder, valid):
    return StateMCSSetAddValid(builder, valid)
def StateMCSSetAddLastCheckDiag(builder, lastCheckDiag): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lastCheckDiag), 0)
def AddLastCheckDiag(builder, lastCheckDiag):
    return StateMCSSetAddLastCheckDiag(builder, lastCheckDiag)
def StateMCSSetStartLastCheckDiagVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLastCheckDiagVector(builder, numElems):
    return StateMCSSetStartLastCheckDiagVector(builder, numElems)
def StateMCSSetEnd(builder): return builder.EndObject()
def End(builder):
    return StateMCSSetEnd(builder)
import motion.core.fbtypes.JointTrafoCheckDiag
try:
    from typing import List
except:
    pass

class StateMCSSetT(object):

    # StateMCSSetT
    def __init__(self):
        self.valid = False  # type: bool
        self.lastCheckDiag = None  # type: List[motion.core.fbtypes.JointTrafoCheckDiag.JointTrafoCheckDiagT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateMcsset = StateMCSSet()
        stateMcsset.Init(buf, pos)
        return cls.InitFromObj(stateMcsset)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateMcsset):
        x = StateMCSSetT()
        x._UnPack(stateMcsset)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valid == other.valid and \
            self.lastCheckDiag == other.lastCheckDiag

    # StateMCSSetT
    def _UnPack(self, stateMcsset):
        if stateMcsset is None:
            return
        self.valid = stateMcsset.Valid()
        if not stateMcsset.LastCheckDiagIsNone():
            self.lastCheckDiag = []
            for i in range(stateMcsset.LastCheckDiagLength()):
                if stateMcsset.LastCheckDiag(i) is None:
                    self.lastCheckDiag.append(None)
                else:
                    jointTrafoCheckDiag_ = motion.core.fbtypes.JointTrafoCheckDiag.JointTrafoCheckDiagT.InitFromObj(stateMcsset.LastCheckDiag(i))
                    self.lastCheckDiag.append(jointTrafoCheckDiag_)

    # StateMCSSetT
    def Pack(self, builder):
        if self.lastCheckDiag is not None:
            lastCheckDiaglist = []
            for i in range(len(self.lastCheckDiag)):
                lastCheckDiaglist.append(self.lastCheckDiag[i].Pack(builder))
            StateMCSSetStartLastCheckDiagVector(builder, len(self.lastCheckDiag))
            for i in reversed(range(len(self.lastCheckDiag))):
                builder.PrependUOffsetTRelative(lastCheckDiaglist[i])
            lastCheckDiag = builder.EndVector()
        StateMCSSetStart(builder)
        StateMCSSetAddValid(builder, self.valid)
        if self.lastCheckDiag is not None:
            StateMCSSetAddLastCheckDiag(builder, lastCheckDiag)
        stateMcsset = StateMCSSetEnd(builder)
        return stateMcsset
