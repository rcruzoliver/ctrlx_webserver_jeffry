# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single safe area or work area
class SysCfgSafeArea(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgSafeArea()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgSafeArea(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgSafeArea
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the safe area (filled when reading; optional for writing [content is always ignored])
    # SysCfgSafeArea
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # coordinate system of the safe area (default is "MCS")
    # SysCfgSafeArea
    def CoordSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # type of the safe area (default is "safe area")
    # SysCfgSafeArea
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # box data, that defines the borders of the safe area; should be exactly 16 (for ACS) or 3 for (MCS, WCS and PCS)
    # SysCfgSafeArea
    def Box(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgSafeAreaBox import SysCfgSafeAreaBox
            obj = SysCfgSafeAreaBox()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgSafeArea
    def BoxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgSafeArea
    def BoxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SysCfgSafeAreaStart(builder): builder.StartObject(4)
def Start(builder):
    return SysCfgSafeAreaStart(builder)
def SysCfgSafeAreaAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return SysCfgSafeAreaAddName(builder, name)
def SysCfgSafeAreaAddCoordSystem(builder, coordSystem): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSystem), 0)
def AddCoordSystem(builder, coordSystem):
    return SysCfgSafeAreaAddCoordSystem(builder, coordSystem)
def SysCfgSafeAreaAddType(builder, type): builder.PrependInt8Slot(2, type, 0)
def AddType(builder, type):
    return SysCfgSafeAreaAddType(builder, type)
def SysCfgSafeAreaAddBox(builder, box): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(box), 0)
def AddBox(builder, box):
    return SysCfgSafeAreaAddBox(builder, box)
def SysCfgSafeAreaStartBoxVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBoxVector(builder, numElems):
    return SysCfgSafeAreaStartBoxVector(builder, numElems)
def SysCfgSafeAreaEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgSafeAreaEnd(builder)
import motion.core.fbtypes.SysCfgSafeAreaBox
try:
    from typing import List
except:
    pass

class SysCfgSafeAreaT(object):

    # SysCfgSafeAreaT
    def __init__(self):
        self.name = None  # type: str
        self.coordSystem = None  # type: str
        self.type = 0  # type: int
        self.box = None  # type: List[motion.core.fbtypes.SysCfgSafeAreaBox.SysCfgSafeAreaBoxT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgSafeArea = SysCfgSafeArea()
        sysCfgSafeArea.Init(buf, pos)
        return cls.InitFromObj(sysCfgSafeArea)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgSafeArea):
        x = SysCfgSafeAreaT()
        x._UnPack(sysCfgSafeArea)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.coordSystem == other.coordSystem and \
            self.type == other.type and \
            self.box == other.box

    # SysCfgSafeAreaT
    def _UnPack(self, sysCfgSafeArea):
        if sysCfgSafeArea is None:
            return
        self.name = sysCfgSafeArea.Name()
        self.coordSystem = sysCfgSafeArea.CoordSystem()
        self.type = sysCfgSafeArea.Type()
        if not sysCfgSafeArea.BoxIsNone():
            self.box = []
            for i in range(sysCfgSafeArea.BoxLength()):
                if sysCfgSafeArea.Box(i) is None:
                    self.box.append(None)
                else:
                    sysCfgSafeAreaBox_ = motion.core.fbtypes.SysCfgSafeAreaBox.SysCfgSafeAreaBoxT.InitFromObj(sysCfgSafeArea.Box(i))
                    self.box.append(sysCfgSafeAreaBox_)

    # SysCfgSafeAreaT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.coordSystem is not None:
            coordSystem = builder.CreateString(self.coordSystem)
        if self.box is not None:
            boxlist = []
            for i in range(len(self.box)):
                boxlist.append(self.box[i].Pack(builder))
            SysCfgSafeAreaStartBoxVector(builder, len(self.box))
            for i in reversed(range(len(self.box))):
                builder.PrependUOffsetTRelative(boxlist[i])
            box = builder.EndVector()
        SysCfgSafeAreaStart(builder)
        if self.name is not None:
            SysCfgSafeAreaAddName(builder, name)
        if self.coordSystem is not None:
            SysCfgSafeAreaAddCoordSystem(builder, coordSystem)
        SysCfgSafeAreaAddType(builder, self.type)
        if self.box is not None:
            SysCfgSafeAreaAddBox(builder, box)
        sysCfgSafeArea = SysCfgSafeAreaEnd(builder)
        return sysCfgSafeArea
