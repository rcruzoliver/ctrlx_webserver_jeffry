# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Data of all supported units
class UnitDataAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitDataAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUnitDataAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UnitDataAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all supported units
    # UnitDataAll
    def Supported(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.UnitDataSingle import UnitDataSingle
            obj = UnitDataSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UnitDataAll
    def SupportedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UnitDataAll
    def SupportedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def UnitDataAllStart(builder): builder.StartObject(1)
def Start(builder):
    return UnitDataAllStart(builder)
def UnitDataAllAddSupported(builder, supported): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(supported), 0)
def AddSupported(builder, supported):
    return UnitDataAllAddSupported(builder, supported)
def UnitDataAllStartSupportedVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSupportedVector(builder, numElems):
    return UnitDataAllStartSupportedVector(builder, numElems)
def UnitDataAllEnd(builder): return builder.EndObject()
def End(builder):
    return UnitDataAllEnd(builder)
import motion.core.fbtypes.UnitDataSingle
try:
    from typing import List
except:
    pass

class UnitDataAllT(object):

    # UnitDataAllT
    def __init__(self):
        self.supported = None  # type: List[motion.core.fbtypes.UnitDataSingle.UnitDataSingleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        unitDataAll = UnitDataAll()
        unitDataAll.Init(buf, pos)
        return cls.InitFromObj(unitDataAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, unitDataAll):
        x = UnitDataAllT()
        x._UnPack(unitDataAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.supported == other.supported

    # UnitDataAllT
    def _UnPack(self, unitDataAll):
        if unitDataAll is None:
            return
        if not unitDataAll.SupportedIsNone():
            self.supported = []
            for i in range(unitDataAll.SupportedLength()):
                if unitDataAll.Supported(i) is None:
                    self.supported.append(None)
                else:
                    unitDataSingle_ = motion.core.fbtypes.UnitDataSingle.UnitDataSingleT.InitFromObj(unitDataAll.Supported(i))
                    self.supported.append(unitDataSingle_)

    # UnitDataAllT
    def Pack(self, builder):
        if self.supported is not None:
            supportedlist = []
            for i in range(len(self.supported)):
                supportedlist.append(self.supported[i].Pack(builder))
            UnitDataAllStartSupportedVector(builder, len(self.supported))
            for i in reversed(range(len(self.supported))):
                builder.PrependUOffsetTRelative(supportedlist[i])
            supported = builder.EndVector()
        UnitDataAllStart(builder)
        if self.supported is not None:
            UnitDataAllAddSupported(builder, supported)
        unitDataAll = UnitDataAllEnd(builder)
        return unitDataAll
