# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# coordinate transformation based on the currently active transformations of the kinematics
class KinCoordTransform(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCoordTransform()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCoordTransform(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCoordTransform
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # input coordinates
    # KinCoordTransform
    def InPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCoordTransform
    def InPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCoordTransform
    def InPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCoordTransform
    def InPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordinate system of the input coordinates (default is "PCS")
    # KinCoordTransform
    def InCoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # output coordinates, should be left out in the request
    # KinCoordTransform
    def OutPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCoordTransform
    def OutPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCoordTransform
    def OutPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCoordTransform
    def OutPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # coordinate system of the output coordinate (default is "ACS")
    # KinCoordTransform
    def OutCoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCoordTransformStart(builder): builder.StartObject(4)
def Start(builder):
    return KinCoordTransformStart(builder)
def KinCoordTransformAddInPos(builder, inPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(inPos), 0)
def AddInPos(builder, inPos):
    return KinCoordTransformAddInPos(builder, inPos)
def KinCoordTransformStartInPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartInPosVector(builder, numElems):
    return KinCoordTransformStartInPosVector(builder, numElems)
def KinCoordTransformAddInCoordSys(builder, inCoordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inCoordSys), 0)
def AddInCoordSys(builder, inCoordSys):
    return KinCoordTransformAddInCoordSys(builder, inCoordSys)
def KinCoordTransformAddOutPos(builder, outPos): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outPos), 0)
def AddOutPos(builder, outPos):
    return KinCoordTransformAddOutPos(builder, outPos)
def KinCoordTransformStartOutPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartOutPosVector(builder, numElems):
    return KinCoordTransformStartOutPosVector(builder, numElems)
def KinCoordTransformAddOutCoordSys(builder, outCoordSys): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(outCoordSys), 0)
def AddOutCoordSys(builder, outCoordSys):
    return KinCoordTransformAddOutCoordSys(builder, outCoordSys)
def KinCoordTransformEnd(builder): return builder.EndObject()
def End(builder):
    return KinCoordTransformEnd(builder)
try:
    from typing import List
except:
    pass

class KinCoordTransformT(object):

    # KinCoordTransformT
    def __init__(self):
        self.inPos = None  # type: List[float]
        self.inCoordSys = None  # type: str
        self.outPos = None  # type: List[float]
        self.outCoordSys = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCoordTransform = KinCoordTransform()
        kinCoordTransform.Init(buf, pos)
        return cls.InitFromObj(kinCoordTransform)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCoordTransform):
        x = KinCoordTransformT()
        x._UnPack(kinCoordTransform)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.inPos == other.inPos and \
            self.inCoordSys == other.inCoordSys and \
            self.outPos == other.outPos and \
            self.outCoordSys == other.outCoordSys

    # KinCoordTransformT
    def _UnPack(self, kinCoordTransform):
        if kinCoordTransform is None:
            return
        if not kinCoordTransform.InPosIsNone():
            if np is None:
                self.inPos = []
                for i in range(kinCoordTransform.InPosLength()):
                    self.inPos.append(kinCoordTransform.InPos(i))
            else:
                self.inPos = kinCoordTransform.InPosAsNumpy()
        self.inCoordSys = kinCoordTransform.InCoordSys()
        if not kinCoordTransform.OutPosIsNone():
            if np is None:
                self.outPos = []
                for i in range(kinCoordTransform.OutPosLength()):
                    self.outPos.append(kinCoordTransform.OutPos(i))
            else:
                self.outPos = kinCoordTransform.OutPosAsNumpy()
        self.outCoordSys = kinCoordTransform.OutCoordSys()

    # KinCoordTransformT
    def Pack(self, builder):
        if self.inPos is not None:
            if np is not None and type(self.inPos) is np.ndarray:
                inPos = builder.CreateNumpyVector(self.inPos)
            else:
                KinCoordTransformStartInPosVector(builder, len(self.inPos))
                for i in reversed(range(len(self.inPos))):
                    builder.PrependFloat64(self.inPos[i])
                inPos = builder.EndVector()
        if self.inCoordSys is not None:
            inCoordSys = builder.CreateString(self.inCoordSys)
        if self.outPos is not None:
            if np is not None and type(self.outPos) is np.ndarray:
                outPos = builder.CreateNumpyVector(self.outPos)
            else:
                KinCoordTransformStartOutPosVector(builder, len(self.outPos))
                for i in reversed(range(len(self.outPos))):
                    builder.PrependFloat64(self.outPos[i])
                outPos = builder.EndVector()
        if self.outCoordSys is not None:
            outCoordSys = builder.CreateString(self.outCoordSys)
        KinCoordTransformStart(builder)
        if self.inPos is not None:
            KinCoordTransformAddInPos(builder, inPos)
        if self.inCoordSys is not None:
            KinCoordTransformAddInCoordSys(builder, inCoordSys)
        if self.outPos is not None:
            KinCoordTransformAddOutPos(builder, outPos)
        if self.outCoordSys is not None:
            KinCoordTransformAddOutCoordSys(builder, outCoordSys)
        kinCoordTransform = KinCoordTransformEnd(builder)
        return kinCoordTransform
