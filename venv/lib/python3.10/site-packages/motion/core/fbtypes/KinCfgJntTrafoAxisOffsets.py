# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a all axis zero point offsets for a joint transformation
class KinCfgJntTrafoAxisOffsets(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoAxisOffsets()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCfgJntTrafoAxisOffsets(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCfgJntTrafoAxisOffsets
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # assignment as pairs of <axis object name; zero point offset>
    # KinCfgJntTrafoAxisOffsets
    def Offsets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinCfgJntTrafoSingleAxisOffset import KinCfgJntTrafoSingleAxisOffset
            obj = KinCfgJntTrafoSingleAxisOffset()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinCfgJntTrafoAxisOffsets
    def OffsetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCfgJntTrafoAxisOffsets
    def OffsetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinCfgJntTrafoAxisOffsetsStart(builder): builder.StartObject(1)
def Start(builder):
    return KinCfgJntTrafoAxisOffsetsStart(builder)
def KinCfgJntTrafoAxisOffsetsAddOffsets(builder, offsets): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(offsets), 0)
def AddOffsets(builder, offsets):
    return KinCfgJntTrafoAxisOffsetsAddOffsets(builder, offsets)
def KinCfgJntTrafoAxisOffsetsStartOffsetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOffsetsVector(builder, numElems):
    return KinCfgJntTrafoAxisOffsetsStartOffsetsVector(builder, numElems)
def KinCfgJntTrafoAxisOffsetsEnd(builder): return builder.EndObject()
def End(builder):
    return KinCfgJntTrafoAxisOffsetsEnd(builder)
import motion.core.fbtypes.KinCfgJntTrafoSingleAxisOffset
try:
    from typing import List
except:
    pass

class KinCfgJntTrafoAxisOffsetsT(object):

    # KinCfgJntTrafoAxisOffsetsT
    def __init__(self):
        self.offsets = None  # type: List[motion.core.fbtypes.KinCfgJntTrafoSingleAxisOffset.KinCfgJntTrafoSingleAxisOffsetT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoAxisOffsets = KinCfgJntTrafoAxisOffsets()
        kinCfgJntTrafoAxisOffsets.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoAxisOffsets)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoAxisOffsets):
        x = KinCfgJntTrafoAxisOffsetsT()
        x._UnPack(kinCfgJntTrafoAxisOffsets)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.offsets == other.offsets

    # KinCfgJntTrafoAxisOffsetsT
    def _UnPack(self, kinCfgJntTrafoAxisOffsets):
        if kinCfgJntTrafoAxisOffsets is None:
            return
        if not kinCfgJntTrafoAxisOffsets.OffsetsIsNone():
            self.offsets = []
            for i in range(kinCfgJntTrafoAxisOffsets.OffsetsLength()):
                if kinCfgJntTrafoAxisOffsets.Offsets(i) is None:
                    self.offsets.append(None)
                else:
                    kinCfgJntTrafoSingleAxisOffset_ = motion.core.fbtypes.KinCfgJntTrafoSingleAxisOffset.KinCfgJntTrafoSingleAxisOffsetT.InitFromObj(kinCfgJntTrafoAxisOffsets.Offsets(i))
                    self.offsets.append(kinCfgJntTrafoSingleAxisOffset_)

    # KinCfgJntTrafoAxisOffsetsT
    def Pack(self, builder):
        if self.offsets is not None:
            offsetslist = []
            for i in range(len(self.offsets)):
                offsetslist.append(self.offsets[i].Pack(builder))
            KinCfgJntTrafoAxisOffsetsStartOffsetsVector(builder, len(self.offsets))
            for i in reversed(range(len(self.offsets))):
                builder.PrependUOffsetTRelative(offsetslist[i])
            offsets = builder.EndVector()
        KinCfgJntTrafoAxisOffsetsStart(builder)
        if self.offsets is not None:
            KinCfgJntTrafoAxisOffsetsAddOffsets(builder, offsets)
        kinCfgJntTrafoAxisOffsets = KinCfgJntTrafoAxisOffsetsEnd(builder)
        return kinCfgJntTrafoAxisOffsets
