# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single group of sets for a product coordinate system
class SysCfgPcsGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgPcsGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSysCfgPcsGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SysCfgPcsGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the group (required for load/save)
    # SysCfgPcsGroup
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # vector of PCS sets in this group (sequence matters!)
    # SysCfgPcsGroup
    def Sets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SysCfgPcsGroup
    def SetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgPcsGroup
    def SetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SysCfgPcsGroupStart(builder): builder.StartObject(2)
def Start(builder):
    return SysCfgPcsGroupStart(builder)
def SysCfgPcsGroupAddGroupName(builder, groupName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)
def AddGroupName(builder, groupName):
    return SysCfgPcsGroupAddGroupName(builder, groupName)
def SysCfgPcsGroupAddSets(builder, sets): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sets), 0)
def AddSets(builder, sets):
    return SysCfgPcsGroupAddSets(builder, sets)
def SysCfgPcsGroupStartSetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSetsVector(builder, numElems):
    return SysCfgPcsGroupStartSetsVector(builder, numElems)
def SysCfgPcsGroupEnd(builder): return builder.EndObject()
def End(builder):
    return SysCfgPcsGroupEnd(builder)
try:
    from typing import List
except:
    pass

class SysCfgPcsGroupT(object):

    # SysCfgPcsGroupT
    def __init__(self):
        self.groupName = None  # type: str
        self.sets = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgPcsGroup = SysCfgPcsGroup()
        sysCfgPcsGroup.Init(buf, pos)
        return cls.InitFromObj(sysCfgPcsGroup)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sysCfgPcsGroup):
        x = SysCfgPcsGroupT()
        x._UnPack(sysCfgPcsGroup)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.groupName == other.groupName and \
            self.sets == other.sets

    # SysCfgPcsGroupT
    def _UnPack(self, sysCfgPcsGroup):
        if sysCfgPcsGroup is None:
            return
        self.groupName = sysCfgPcsGroup.GroupName()
        if not sysCfgPcsGroup.SetsIsNone():
            self.sets = []
            for i in range(sysCfgPcsGroup.SetsLength()):
                self.sets.append(sysCfgPcsGroup.Sets(i))

    # SysCfgPcsGroupT
    def Pack(self, builder):
        if self.groupName is not None:
            groupName = builder.CreateString(self.groupName)
        if self.sets is not None:
            setslist = []
            for i in range(len(self.sets)):
                setslist.append(builder.CreateString(self.sets[i]))
            SysCfgPcsGroupStartSetsVector(builder, len(self.sets))
            for i in reversed(range(len(self.sets))):
                builder.PrependUOffsetTRelative(setslist[i])
            sets = builder.EndVector()
        SysCfgPcsGroupStart(builder)
        if self.groupName is not None:
            SysCfgPcsGroupAddGroupName(builder, groupName)
        if self.sets is not None:
            SysCfgPcsGroupAddSets(builder, sets)
        sysCfgPcsGroup = SysCfgPcsGroupEnd(builder)
        return sysCfgPcsGroup
