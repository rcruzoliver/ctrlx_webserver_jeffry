# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration for axis estop to device error
class AxsCfgEstopSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgEstopSettings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsCfgEstopSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsCfgEstopSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # estop when device has no error
    # AxsCfgEstopSettings
    def EstopToNoDevErr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # estop when no device error information, e.g. virtual axis
    # AxsCfgEstopSettings
    def EstopToNoDeviceInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # estop when get device light error
    # AxsCfgEstopSettings
    def EstopToDevLightErr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # estop when get device light error
    # AxsCfgEstopSettings
    def EstopToFieldbusErr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # estop when get device critical error
    # AxsCfgEstopSettings
    def EstopToDevCriticalErr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # estop when get device fatal error
    # AxsCfgEstopSettings
    def EstopToDevFatalErr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AxsCfgEstopSettingsStart(builder): builder.StartObject(6)
def Start(builder):
    return AxsCfgEstopSettingsStart(builder)
def AxsCfgEstopSettingsAddEstopToNoDevErr(builder, estopToNoDevErr): builder.PrependInt8Slot(0, estopToNoDevErr, 0)
def AddEstopToNoDevErr(builder, estopToNoDevErr):
    return AxsCfgEstopSettingsAddEstopToNoDevErr(builder, estopToNoDevErr)
def AxsCfgEstopSettingsAddEstopToNoDeviceInfo(builder, estopToNoDeviceInfo): builder.PrependInt8Slot(1, estopToNoDeviceInfo, 0)
def AddEstopToNoDeviceInfo(builder, estopToNoDeviceInfo):
    return AxsCfgEstopSettingsAddEstopToNoDeviceInfo(builder, estopToNoDeviceInfo)
def AxsCfgEstopSettingsAddEstopToDevLightErr(builder, estopToDevLightErr): builder.PrependInt8Slot(2, estopToDevLightErr, 0)
def AddEstopToDevLightErr(builder, estopToDevLightErr):
    return AxsCfgEstopSettingsAddEstopToDevLightErr(builder, estopToDevLightErr)
def AxsCfgEstopSettingsAddEstopToFieldbusErr(builder, estopToFieldbusErr): builder.PrependInt8Slot(3, estopToFieldbusErr, 0)
def AddEstopToFieldbusErr(builder, estopToFieldbusErr):
    return AxsCfgEstopSettingsAddEstopToFieldbusErr(builder, estopToFieldbusErr)
def AxsCfgEstopSettingsAddEstopToDevCriticalErr(builder, estopToDevCriticalErr): builder.PrependInt8Slot(4, estopToDevCriticalErr, 0)
def AddEstopToDevCriticalErr(builder, estopToDevCriticalErr):
    return AxsCfgEstopSettingsAddEstopToDevCriticalErr(builder, estopToDevCriticalErr)
def AxsCfgEstopSettingsAddEstopToDevFatalErr(builder, estopToDevFatalErr): builder.PrependInt8Slot(5, estopToDevFatalErr, 0)
def AddEstopToDevFatalErr(builder, estopToDevFatalErr):
    return AxsCfgEstopSettingsAddEstopToDevFatalErr(builder, estopToDevFatalErr)
def AxsCfgEstopSettingsEnd(builder): return builder.EndObject()
def End(builder):
    return AxsCfgEstopSettingsEnd(builder)

class AxsCfgEstopSettingsT(object):

    # AxsCfgEstopSettingsT
    def __init__(self):
        self.estopToNoDevErr = 0  # type: int
        self.estopToNoDeviceInfo = 0  # type: int
        self.estopToDevLightErr = 0  # type: int
        self.estopToFieldbusErr = 0  # type: int
        self.estopToDevCriticalErr = 0  # type: int
        self.estopToDevFatalErr = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgEstopSettings = AxsCfgEstopSettings()
        axsCfgEstopSettings.Init(buf, pos)
        return cls.InitFromObj(axsCfgEstopSettings)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsCfgEstopSettings):
        x = AxsCfgEstopSettingsT()
        x._UnPack(axsCfgEstopSettings)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.estopToNoDevErr == other.estopToNoDevErr and \
            self.estopToNoDeviceInfo == other.estopToNoDeviceInfo and \
            self.estopToDevLightErr == other.estopToDevLightErr and \
            self.estopToFieldbusErr == other.estopToFieldbusErr and \
            self.estopToDevCriticalErr == other.estopToDevCriticalErr and \
            self.estopToDevFatalErr == other.estopToDevFatalErr

    # AxsCfgEstopSettingsT
    def _UnPack(self, axsCfgEstopSettings):
        if axsCfgEstopSettings is None:
            return
        self.estopToNoDevErr = axsCfgEstopSettings.EstopToNoDevErr()
        self.estopToNoDeviceInfo = axsCfgEstopSettings.EstopToNoDeviceInfo()
        self.estopToDevLightErr = axsCfgEstopSettings.EstopToDevLightErr()
        self.estopToFieldbusErr = axsCfgEstopSettings.EstopToFieldbusErr()
        self.estopToDevCriticalErr = axsCfgEstopSettings.EstopToDevCriticalErr()
        self.estopToDevFatalErr = axsCfgEstopSettings.EstopToDevFatalErr()

    # AxsCfgEstopSettingsT
    def Pack(self, builder):
        AxsCfgEstopSettingsStart(builder)
        AxsCfgEstopSettingsAddEstopToNoDevErr(builder, self.estopToNoDevErr)
        AxsCfgEstopSettingsAddEstopToNoDeviceInfo(builder, self.estopToNoDeviceInfo)
        AxsCfgEstopSettingsAddEstopToDevLightErr(builder, self.estopToDevLightErr)
        AxsCfgEstopSettingsAddEstopToFieldbusErr(builder, self.estopToFieldbusErr)
        AxsCfgEstopSettingsAddEstopToDevCriticalErr(builder, self.estopToDevCriticalErr)
        AxsCfgEstopSettingsAddEstopToDevFatalErr(builder, self.estopToDevFatalErr)
        axsCfgEstopSettings = AxsCfgEstopSettingsEnd(builder)
        return axsCfgEstopSettings
