# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Routes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Routes()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRoutes(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Routes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Routes
    def Route(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from networkmanager.Route import Route
            obj = Route()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Routes
    def RouteLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Routes
    def RouteIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RoutesStart(builder): builder.StartObject(1)
def Start(builder):
    return RoutesStart(builder)
def RoutesAddRoute(builder, route): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(route), 0)
def AddRoute(builder, route):
    return RoutesAddRoute(builder, route)
def RoutesStartRouteVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRouteVector(builder, numElems):
    return RoutesStartRouteVector(builder, numElems)
def RoutesEnd(builder): return builder.EndObject()
def End(builder):
    return RoutesEnd(builder)
import networkmanager.Route
try:
    from typing import List
except:
    pass

class RoutesT(object):

    # RoutesT
    def __init__(self):
        self.route = None  # type: List[networkmanager.Route.RouteT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        routes = Routes()
        routes.Init(buf, pos)
        return cls.InitFromObj(routes)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, routes):
        x = RoutesT()
        x._UnPack(routes)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.route == other.route

    # RoutesT
    def _UnPack(self, routes):
        if routes is None:
            return
        if not routes.RouteIsNone():
            self.route = []
            for i in range(routes.RouteLength()):
                if routes.Route(i) is None:
                    self.route.append(None)
                else:
                    route_ = networkmanager.Route.RouteT.InitFromObj(routes.Route(i))
                    self.route.append(route_)

    # RoutesT
    def Pack(self, builder):
        if self.route is not None:
            routelist = []
            for i in range(len(self.route)):
                routelist.append(self.route[i].Pack(builder))
            RoutesStartRouteVector(builder, len(self.route))
            for i in reversed(range(len(self.route))):
                builder.PrependUOffsetTRelative(routelist[i])
            route = builder.EndVector()
        RoutesStart(builder)
        if self.route is not None:
            RoutesAddRoute(builder, route)
        routes = RoutesEnd(builder)
        return routes
