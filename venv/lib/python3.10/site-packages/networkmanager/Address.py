# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Address(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Address()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAddress(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Address
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Address
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Address
    def Kind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AddressStart(builder): builder.StartObject(2)
def Start(builder):
    return AddressStart(builder)
def AddressAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return AddressAddAddress(builder, address)
def AddressAddKind(builder, kind): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(kind), 0)
def AddKind(builder, kind):
    return AddressAddKind(builder, kind)
def AddressEnd(builder): return builder.EndObject()
def End(builder):
    return AddressEnd(builder)

class AddressT(object):

    # AddressT
    def __init__(self):
        self.address = None  # type: str
        self.kind = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        address = Address()
        address.Init(buf, pos)
        return cls.InitFromObj(address)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, address):
        x = AddressT()
        x._UnPack(address)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.kind == other.kind

    # AddressT
    def _UnPack(self, address):
        if address is None:
            return
        self.address = address.Address()
        self.kind = address.Kind()

    # AddressT
    def Pack(self, builder):
        if self.address is not None:
            address = builder.CreateString(self.address)
        if self.kind is not None:
            kind = builder.CreateString(self.kind)
        AddressStart(builder)
        if self.address is not None:
            AddressAddAddress(builder, address)
        if self.kind is not None:
            AddressAddKind(builder, kind)
        address = AddressEnd(builder)
        return address
