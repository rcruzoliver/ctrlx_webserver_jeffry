# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Addresses(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Addresses()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAddresses(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Addresses
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Addresses
    def Addresses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from networkmanager.Address import Address
            obj = Address()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Addresses
    def AddressesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Addresses
    def AddressesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AddressesStart(builder): builder.StartObject(1)
def Start(builder):
    return AddressesStart(builder)
def AddressesAddAddresses(builder, addresses): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(addresses), 0)
def AddAddresses(builder, addresses):
    return AddressesAddAddresses(builder, addresses)
def AddressesStartAddressesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAddressesVector(builder, numElems):
    return AddressesStartAddressesVector(builder, numElems)
def AddressesEnd(builder): return builder.EndObject()
def End(builder):
    return AddressesEnd(builder)
import networkmanager.Address
try:
    from typing import List
except:
    pass

class AddressesT(object):

    # AddressesT
    def __init__(self):
        self.addresses = None  # type: List[networkmanager.Address.AddressT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        addresses = Addresses()
        addresses.Init(buf, pos)
        return cls.InitFromObj(addresses)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, addresses):
        x = AddressesT()
        x._UnPack(addresses)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addresses == other.addresses

    # AddressesT
    def _UnPack(self, addresses):
        if addresses is None:
            return
        if not addresses.AddressesIsNone():
            self.addresses = []
            for i in range(addresses.AddressesLength()):
                if addresses.Addresses(i) is None:
                    self.addresses.append(None)
                else:
                    address_ = networkmanager.Address.AddressT.InitFromObj(addresses.Addresses(i))
                    self.addresses.append(address_)

    # AddressesT
    def Pack(self, builder):
        if self.addresses is not None:
            addresseslist = []
            for i in range(len(self.addresses)):
                addresseslist.append(self.addresses[i].Pack(builder))
            AddressesStartAddressesVector(builder, len(self.addresses))
            for i in reversed(range(len(self.addresses))):
                builder.PrependUOffsetTRelative(addresseslist[i])
            addresses = builder.EndVector()
        AddressesStart(builder)
        if self.addresses is not None:
            AddressesAddAddresses(builder, addresses)
        addresses = AddressesEnd(builder)
        return addresses
