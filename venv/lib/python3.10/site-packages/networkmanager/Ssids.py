# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Ssids(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Ssids()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSsids(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Ssids
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Ssids
    def Ssids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from networkmanager.Ssid import Ssid
            obj = Ssid()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Ssids
    def SsidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Ssids
    def SsidsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SsidsStart(builder): builder.StartObject(1)
def Start(builder):
    return SsidsStart(builder)
def SsidsAddSsids(builder, ssids): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ssids), 0)
def AddSsids(builder, ssids):
    return SsidsAddSsids(builder, ssids)
def SsidsStartSsidsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSsidsVector(builder, numElems):
    return SsidsStartSsidsVector(builder, numElems)
def SsidsEnd(builder): return builder.EndObject()
def End(builder):
    return SsidsEnd(builder)
import networkmanager.Ssid
try:
    from typing import List
except:
    pass

class SsidsT(object):

    # SsidsT
    def __init__(self):
        self.ssids = None  # type: List[networkmanager.Ssid.SsidT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ssids = Ssids()
        ssids.Init(buf, pos)
        return cls.InitFromObj(ssids)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ssids):
        x = SsidsT()
        x._UnPack(ssids)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ssids == other.ssids

    # SsidsT
    def _UnPack(self, ssids):
        if ssids is None:
            return
        if not ssids.SsidsIsNone():
            self.ssids = []
            for i in range(ssids.SsidsLength()):
                if ssids.Ssids(i) is None:
                    self.ssids.append(None)
                else:
                    ssid_ = networkmanager.Ssid.SsidT.InitFromObj(ssids.Ssids(i))
                    self.ssids.append(ssid_)

    # SsidsT
    def Pack(self, builder):
        if self.ssids is not None:
            ssidslist = []
            for i in range(len(self.ssids)):
                ssidslist.append(self.ssids[i].Pack(builder))
            SsidsStartSsidsVector(builder, len(self.ssids))
            for i in reversed(range(len(self.ssids))):
                builder.PrependUOffsetTRelative(ssidslist[i])
            ssids = builder.EndVector()
        SsidsStart(builder)
        if self.ssids is not None:
            SsidsAddSsids(builder, ssids)
        ssids = SsidsEnd(builder)
        return ssids
