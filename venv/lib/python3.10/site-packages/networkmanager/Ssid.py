# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Ssid(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Ssid()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSsid(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Ssid
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Ssid
    def Ssid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ssid
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ssid
    def Autoconnect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Ssid
    def Connected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SsidStart(builder): builder.StartObject(4)
def Start(builder):
    return SsidStart(builder)
def SsidAddSsid(builder, ssid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ssid), 0)
def AddSsid(builder, ssid):
    return SsidAddSsid(builder, ssid)
def SsidAddState(builder, state): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)
def AddState(builder, state):
    return SsidAddState(builder, state)
def SsidAddAutoconnect(builder, autoconnect): builder.PrependBoolSlot(2, autoconnect, 0)
def AddAutoconnect(builder, autoconnect):
    return SsidAddAutoconnect(builder, autoconnect)
def SsidAddConnected(builder, connected): builder.PrependBoolSlot(3, connected, 0)
def AddConnected(builder, connected):
    return SsidAddConnected(builder, connected)
def SsidEnd(builder): return builder.EndObject()
def End(builder):
    return SsidEnd(builder)

class SsidT(object):

    # SsidT
    def __init__(self):
        self.ssid = None  # type: str
        self.state = None  # type: str
        self.autoconnect = False  # type: bool
        self.connected = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ssid = Ssid()
        ssid.Init(buf, pos)
        return cls.InitFromObj(ssid)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ssid):
        x = SsidT()
        x._UnPack(ssid)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ssid == other.ssid and \
            self.state == other.state and \
            self.autoconnect == other.autoconnect and \
            self.connected == other.connected

    # SsidT
    def _UnPack(self, ssid):
        if ssid is None:
            return
        self.ssid = ssid.Ssid()
        self.state = ssid.State()
        self.autoconnect = ssid.Autoconnect()
        self.connected = ssid.Connected()

    # SsidT
    def Pack(self, builder):
        if self.ssid is not None:
            ssid = builder.CreateString(self.ssid)
        if self.state is not None:
            state = builder.CreateString(self.state)
        SsidStart(builder)
        if self.ssid is not None:
            SsidAddSsid(builder, ssid)
        if self.state is not None:
            SsidAddState(builder, state)
        SsidAddAutoconnect(builder, self.autoconnect)
        SsidAddConnected(builder, self.connected)
        ssid = SsidEnd(builder)
        return ssid
