# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Traffic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Traffic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTraffic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Traffic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Traffic
    def Received(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Traffic
    def Sent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TrafficStart(builder): builder.StartObject(2)
def Start(builder):
    return TrafficStart(builder)
def TrafficAddReceived(builder, received): builder.PrependInt64Slot(0, received, 0)
def AddReceived(builder, received):
    return TrafficAddReceived(builder, received)
def TrafficAddSent(builder, sent): builder.PrependInt64Slot(1, sent, 0)
def AddSent(builder, sent):
    return TrafficAddSent(builder, sent)
def TrafficEnd(builder): return builder.EndObject()
def End(builder):
    return TrafficEnd(builder)

class TrafficT(object):

    # TrafficT
    def __init__(self):
        self.received = 0  # type: int
        self.sent = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        traffic = Traffic()
        traffic.Init(buf, pos)
        return cls.InitFromObj(traffic)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, traffic):
        x = TrafficT()
        x._UnPack(traffic)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.received == other.received and \
            self.sent == other.sent

    # TrafficT
    def _UnPack(self, traffic):
        if traffic is None:
            return
        self.received = traffic.Received()
        self.sent = traffic.Sent()

    # TrafficT
    def Pack(self, builder):
        TrafficStart(builder)
        TrafficAddReceived(builder, self.received)
        TrafficAddSent(builder, self.sent)
        traffic = TrafficEnd(builder)
        return traffic
