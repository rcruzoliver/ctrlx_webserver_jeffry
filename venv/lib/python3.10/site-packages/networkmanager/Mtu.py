# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Mtu(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mtu()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMtu(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Mtu
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Mtu
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Mtu
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Mtu
    def Current(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MtuStart(builder): builder.StartObject(3)
def Start(builder):
    return MtuStart(builder)
def MtuAddMin(builder, min): builder.PrependInt32Slot(0, min, 0)
def AddMin(builder, min):
    return MtuAddMin(builder, min)
def MtuAddMax(builder, max): builder.PrependInt32Slot(1, max, 0)
def AddMax(builder, max):
    return MtuAddMax(builder, max)
def MtuAddCurrent(builder, current): builder.PrependInt32Slot(2, current, 0)
def AddCurrent(builder, current):
    return MtuAddCurrent(builder, current)
def MtuEnd(builder): return builder.EndObject()
def End(builder):
    return MtuEnd(builder)

class MtuT(object):

    # MtuT
    def __init__(self):
        self.min = 0  # type: int
        self.max = 0  # type: int
        self.current = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtu = Mtu()
        mtu.Init(buf, pos)
        return cls.InitFromObj(mtu)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtu):
        x = MtuT()
        x._UnPack(mtu)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.min == other.min and \
            self.max == other.max and \
            self.current == other.current

    # MtuT
    def _UnPack(self, mtu):
        if mtu is None:
            return
        self.min = mtu.Min()
        self.max = mtu.Max()
        self.current = mtu.Current()

    # MtuT
    def Pack(self, builder):
        MtuStart(builder)
        MtuAddMin(builder, self.min)
        MtuAddMax(builder, self.max)
        MtuAddCurrent(builder, self.current)
        mtu = MtuEnd(builder)
        return mtu
