# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State
    def Traffic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from networkmanager.Traffic import Traffic
            obj = Traffic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def DnsServers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # State
    def DnsServersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State
    def DnsServersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # State
    def Gateway4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State
    def Gateway6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State
    def Routes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from networkmanager.Routes import Routes
            obj = Routes()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def Mtu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from networkmanager.Mtu import Mtu
            obj = Mtu()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # State
    def Link(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # State
    def TransmissionSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def StateStart(builder): builder.StartObject(8)
def Start(builder):
    return StateStart(builder)
def StateAddTraffic(builder, traffic): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(traffic), 0)
def AddTraffic(builder, traffic):
    return StateAddTraffic(builder, traffic)
def StateAddDnsServers(builder, dnsServers): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dnsServers), 0)
def AddDnsServers(builder, dnsServers):
    return StateAddDnsServers(builder, dnsServers)
def StateStartDnsServersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDnsServersVector(builder, numElems):
    return StateStartDnsServersVector(builder, numElems)
def StateAddGateway4(builder, gateway4): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gateway4), 0)
def AddGateway4(builder, gateway4):
    return StateAddGateway4(builder, gateway4)
def StateAddGateway6(builder, gateway6): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gateway6), 0)
def AddGateway6(builder, gateway6):
    return StateAddGateway6(builder, gateway6)
def StateAddRoutes(builder, routes): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)
def AddRoutes(builder, routes):
    return StateAddRoutes(builder, routes)
def StateAddMtu(builder, mtu): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mtu), 0)
def AddMtu(builder, mtu):
    return StateAddMtu(builder, mtu)
def StateAddLink(builder, link): builder.PrependBoolSlot(6, link, 0)
def AddLink(builder, link):
    return StateAddLink(builder, link)
def StateAddTransmissionSpeed(builder, transmissionSpeed): builder.PrependInt32Slot(7, transmissionSpeed, 0)
def AddTransmissionSpeed(builder, transmissionSpeed):
    return StateAddTransmissionSpeed(builder, transmissionSpeed)
def StateEnd(builder): return builder.EndObject()
def End(builder):
    return StateEnd(builder)
import networkmanager.Mtu
import networkmanager.Routes
import networkmanager.Traffic
try:
    from typing import List, Optional
except:
    pass

class StateT(object):

    # StateT
    def __init__(self):
        self.traffic = None  # type: Optional[networkmanager.Traffic.TrafficT]
        self.dnsServers = None  # type: List[str]
        self.gateway4 = None  # type: str
        self.gateway6 = None  # type: str
        self.routes = None  # type: Optional[networkmanager.Routes.RoutesT]
        self.mtu = None  # type: Optional[networkmanager.Mtu.MtuT]
        self.link = False  # type: bool
        self.transmissionSpeed = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        state = State()
        state.Init(buf, pos)
        return cls.InitFromObj(state)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, state):
        x = StateT()
        x._UnPack(state)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.traffic == other.traffic and \
            self.dnsServers == other.dnsServers and \
            self.gateway4 == other.gateway4 and \
            self.gateway6 == other.gateway6 and \
            self.routes == other.routes and \
            self.mtu == other.mtu and \
            self.link == other.link and \
            self.transmissionSpeed == other.transmissionSpeed

    # StateT
    def _UnPack(self, state):
        if state is None:
            return
        if state.Traffic() is not None:
            self.traffic = networkmanager.Traffic.TrafficT.InitFromObj(state.Traffic())
        if not state.DnsServersIsNone():
            self.dnsServers = []
            for i in range(state.DnsServersLength()):
                self.dnsServers.append(state.DnsServers(i))
        self.gateway4 = state.Gateway4()
        self.gateway6 = state.Gateway6()
        if state.Routes() is not None:
            self.routes = networkmanager.Routes.RoutesT.InitFromObj(state.Routes())
        if state.Mtu() is not None:
            self.mtu = networkmanager.Mtu.MtuT.InitFromObj(state.Mtu())
        self.link = state.Link()
        self.transmissionSpeed = state.TransmissionSpeed()

    # StateT
    def Pack(self, builder):
        if self.traffic is not None:
            traffic = self.traffic.Pack(builder)
        if self.dnsServers is not None:
            dnsServerslist = []
            for i in range(len(self.dnsServers)):
                dnsServerslist.append(builder.CreateString(self.dnsServers[i]))
            StateStartDnsServersVector(builder, len(self.dnsServers))
            for i in reversed(range(len(self.dnsServers))):
                builder.PrependUOffsetTRelative(dnsServerslist[i])
            dnsServers = builder.EndVector()
        if self.gateway4 is not None:
            gateway4 = builder.CreateString(self.gateway4)
        if self.gateway6 is not None:
            gateway6 = builder.CreateString(self.gateway6)
        if self.routes is not None:
            routes = self.routes.Pack(builder)
        if self.mtu is not None:
            mtu = self.mtu.Pack(builder)
        StateStart(builder)
        if self.traffic is not None:
            StateAddTraffic(builder, traffic)
        if self.dnsServers is not None:
            StateAddDnsServers(builder, dnsServers)
        if self.gateway4 is not None:
            StateAddGateway4(builder, gateway4)
        if self.gateway6 is not None:
            StateAddGateway6(builder, gateway6)
        if self.routes is not None:
            StateAddRoutes(builder, routes)
        if self.mtu is not None:
            StateAddMtu(builder, mtu)
        StateAddLink(builder, self.link)
        StateAddTransmissionSpeed(builder, self.transmissionSpeed)
        state = StateEnd(builder)
        return state
