# automatically generated by the FlatBuffers compiler, do not modify

# namespace: networkmanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Route(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Route()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRoute(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Route
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Route
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Route
    def Gateway(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Route
    def Protocol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Route
    def Scope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Route
    def Prefsrc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Route
    def Metric(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Route
    def Flags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Route
    def FlagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Route
    def FlagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def RouteStart(builder): builder.StartObject(7)
def Start(builder):
    return RouteStart(builder)
def RouteAddDestination(builder, destination): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(destination), 0)
def AddDestination(builder, destination):
    return RouteAddDestination(builder, destination)
def RouteAddGateway(builder, gateway): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gateway), 0)
def AddGateway(builder, gateway):
    return RouteAddGateway(builder, gateway)
def RouteAddProtocol(builder, protocol): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(protocol), 0)
def AddProtocol(builder, protocol):
    return RouteAddProtocol(builder, protocol)
def RouteAddScope(builder, scope): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scope), 0)
def AddScope(builder, scope):
    return RouteAddScope(builder, scope)
def RouteAddPrefsrc(builder, prefsrc): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(prefsrc), 0)
def AddPrefsrc(builder, prefsrc):
    return RouteAddPrefsrc(builder, prefsrc)
def RouteAddMetric(builder, metric): builder.PrependInt32Slot(5, metric, 0)
def AddMetric(builder, metric):
    return RouteAddMetric(builder, metric)
def RouteAddFlags(builder, flags): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(flags), 0)
def AddFlags(builder, flags):
    return RouteAddFlags(builder, flags)
def RouteStartFlagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFlagsVector(builder, numElems):
    return RouteStartFlagsVector(builder, numElems)
def RouteEnd(builder): return builder.EndObject()
def End(builder):
    return RouteEnd(builder)
try:
    from typing import List
except:
    pass

class RouteT(object):

    # RouteT
    def __init__(self):
        self.destination = None  # type: str
        self.gateway = None  # type: str
        self.protocol = None  # type: str
        self.scope = None  # type: str
        self.prefsrc = None  # type: str
        self.metric = 0  # type: int
        self.flags = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        route = Route()
        route.Init(buf, pos)
        return cls.InitFromObj(route)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, route):
        x = RouteT()
        x._UnPack(route)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.destination == other.destination and \
            self.gateway == other.gateway and \
            self.protocol == other.protocol and \
            self.scope == other.scope and \
            self.prefsrc == other.prefsrc and \
            self.metric == other.metric and \
            self.flags == other.flags

    # RouteT
    def _UnPack(self, route):
        if route is None:
            return
        self.destination = route.Destination()
        self.gateway = route.Gateway()
        self.protocol = route.Protocol()
        self.scope = route.Scope()
        self.prefsrc = route.Prefsrc()
        self.metric = route.Metric()
        if not route.FlagsIsNone():
            self.flags = []
            for i in range(route.FlagsLength()):
                self.flags.append(route.Flags(i))

    # RouteT
    def Pack(self, builder):
        if self.destination is not None:
            destination = builder.CreateString(self.destination)
        if self.gateway is not None:
            gateway = builder.CreateString(self.gateway)
        if self.protocol is not None:
            protocol = builder.CreateString(self.protocol)
        if self.scope is not None:
            scope = builder.CreateString(self.scope)
        if self.prefsrc is not None:
            prefsrc = builder.CreateString(self.prefsrc)
        if self.flags is not None:
            flagslist = []
            for i in range(len(self.flags)):
                flagslist.append(builder.CreateString(self.flags[i]))
            RouteStartFlagsVector(builder, len(self.flags))
            for i in reversed(range(len(self.flags))):
                builder.PrependUOffsetTRelative(flagslist[i])
            flags = builder.EndVector()
        RouteStart(builder)
        if self.destination is not None:
            RouteAddDestination(builder, destination)
        if self.gateway is not None:
            RouteAddGateway(builder, gateway)
        if self.protocol is not None:
            RouteAddProtocol(builder, protocol)
        if self.scope is not None:
            RouteAddScope(builder, scope)
        if self.prefsrc is not None:
            RouteAddPrefsrc(builder, prefsrc)
        RouteAddMetric(builder, self.metric)
        if self.flags is not None:
            RouteAddFlags(builder, flags)
        route = RouteEnd(builder)
        return route
