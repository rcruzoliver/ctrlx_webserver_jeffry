# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Parameter response
class ParameterResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParameterResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsParameterResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ParameterResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #The SoE (Servo drive over EtherCAT) Element-Flags indicating which element of an IDN are read or written
    #dataState    Bit 0: Service channel data status
    #name         Bit 1: Name 
    #attribute    Bit 2: Attribute
    #unit         Bit 3: Unit 
    #minValue     Bit 4: Min value 
    #maxValue     Bit 5: Max value 
    #value        Bit 6: Operation data
    #defaultValue Bit 7: Default value 
    # ParameterResponse
    def ElementFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Data buffer
    #Note: In case of list parameters, Byte 0-1 of the data is the actual length, Byte 2-3 is the maximum length and the data starts at Byte 4.
    # ParameterResponse
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ParameterResponse
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ParameterResponse
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParameterResponse
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ParameterResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return ParameterResponseStart(builder)
def ParameterResponseAddElementFlags(builder, elementFlags): builder.PrependUint8Slot(0, elementFlags, 0)
def AddElementFlags(builder, elementFlags):
    return ParameterResponseAddElementFlags(builder, elementFlags)
def ParameterResponseAddData(builder, data): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ParameterResponseAddData(builder, data)
def ParameterResponseStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return ParameterResponseStartDataVector(builder, numElems)
def ParameterResponseEnd(builder): return builder.EndObject()
def End(builder):
    return ParameterResponseEnd(builder)
try:
    from typing import List
except:
    pass

class ParameterResponseT(object):

    # ParameterResponseT
    def __init__(self):
        self.elementFlags = 0  # type: int
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        parameterResponse = ParameterResponse()
        parameterResponse.Init(buf, pos)
        return cls.InitFromObj(parameterResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, parameterResponse):
        x = ParameterResponseT()
        x._UnPack(parameterResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.elementFlags == other.elementFlags and \
            self.data == other.data

    # ParameterResponseT
    def _UnPack(self, parameterResponse):
        if parameterResponse is None:
            return
        self.elementFlags = parameterResponse.ElementFlags()
        if not parameterResponse.DataIsNone():
            if np is None:
                self.data = []
                for i in range(parameterResponse.DataLength()):
                    self.data.append(parameterResponse.Data(i))
            else:
                self.data = parameterResponse.DataAsNumpy()

    # ParameterResponseT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                ParameterResponseStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        ParameterResponseStart(builder)
        ParameterResponseAddElementFlags(builder, self.elementFlags)
        if self.data is not None:
            ParameterResponseAddData(builder, data)
        parameterResponse = ParameterResponseEnd(builder)
        return parameterResponse
