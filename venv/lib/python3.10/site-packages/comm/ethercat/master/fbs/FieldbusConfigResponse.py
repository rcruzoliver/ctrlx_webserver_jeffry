# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Fieldbus configuration in binary format
class FieldbusConfigResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldbusConfigResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldbusConfigResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldbusConfigResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Master initialization in binary format
    # FieldbusConfigResponse
    def Ini(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FieldbusConfigResponse
    def IniAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FieldbusConfigResponse
    def IniLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldbusConfigResponse
    def IniIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    #EtherCAT network information in binary format
    # FieldbusConfigResponse
    def Eni(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FieldbusConfigResponse
    def EniAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FieldbusConfigResponse
    def EniLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldbusConfigResponse
    def EniIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def FieldbusConfigResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return FieldbusConfigResponseStart(builder)
def FieldbusConfigResponseAddIni(builder, ini): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ini), 0)
def AddIni(builder, ini):
    return FieldbusConfigResponseAddIni(builder, ini)
def FieldbusConfigResponseStartIniVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartIniVector(builder, numElems):
    return FieldbusConfigResponseStartIniVector(builder, numElems)
def FieldbusConfigResponseAddEni(builder, eni): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eni), 0)
def AddEni(builder, eni):
    return FieldbusConfigResponseAddEni(builder, eni)
def FieldbusConfigResponseStartEniVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartEniVector(builder, numElems):
    return FieldbusConfigResponseStartEniVector(builder, numElems)
def FieldbusConfigResponseEnd(builder): return builder.EndObject()
def End(builder):
    return FieldbusConfigResponseEnd(builder)
try:
    from typing import List
except:
    pass

class FieldbusConfigResponseT(object):

    # FieldbusConfigResponseT
    def __init__(self):
        self.ini = None  # type: List[int]
        self.eni = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fieldbusConfigResponse = FieldbusConfigResponse()
        fieldbusConfigResponse.Init(buf, pos)
        return cls.InitFromObj(fieldbusConfigResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, fieldbusConfigResponse):
        x = FieldbusConfigResponseT()
        x._UnPack(fieldbusConfigResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ini == other.ini and \
            self.eni == other.eni

    # FieldbusConfigResponseT
    def _UnPack(self, fieldbusConfigResponse):
        if fieldbusConfigResponse is None:
            return
        if not fieldbusConfigResponse.IniIsNone():
            if np is None:
                self.ini = []
                for i in range(fieldbusConfigResponse.IniLength()):
                    self.ini.append(fieldbusConfigResponse.Ini(i))
            else:
                self.ini = fieldbusConfigResponse.IniAsNumpy()
        if not fieldbusConfigResponse.EniIsNone():
            if np is None:
                self.eni = []
                for i in range(fieldbusConfigResponse.EniLength()):
                    self.eni.append(fieldbusConfigResponse.Eni(i))
            else:
                self.eni = fieldbusConfigResponse.EniAsNumpy()

    # FieldbusConfigResponseT
    def Pack(self, builder):
        if self.ini is not None:
            if np is not None and type(self.ini) is np.ndarray:
                ini = builder.CreateNumpyVector(self.ini)
            else:
                FieldbusConfigResponseStartIniVector(builder, len(self.ini))
                for i in reversed(range(len(self.ini))):
                    builder.PrependUint8(self.ini[i])
                ini = builder.EndVector()
        if self.eni is not None:
            if np is not None and type(self.eni) is np.ndarray:
                eni = builder.CreateNumpyVector(self.eni)
            else:
                FieldbusConfigResponseStartEniVector(builder, len(self.eni))
                for i in reversed(range(len(self.eni))):
                    builder.PrependUint8(self.eni[i])
                eni = builder.EndVector()
        FieldbusConfigResponseStart(builder)
        if self.ini is not None:
            FieldbusConfigResponseAddIni(builder, ini)
        if self.eni is not None:
            FieldbusConfigResponseAddEni(builder, eni)
        fieldbusConfigResponse = FieldbusConfigResponseEnd(builder)
        return fieldbusConfigResponse
