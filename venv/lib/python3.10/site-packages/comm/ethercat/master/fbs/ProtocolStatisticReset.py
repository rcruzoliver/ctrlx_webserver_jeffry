# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Protocol statistic reset
class ProtocolStatisticReset(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # ProtocolStatisticReset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProtocolStatisticReset
    def Read(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # ProtocolStatisticReset
    def Write(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 4)
        return obj


def CreateProtocolStatisticReset(builder, read_total_numRequests, read_total_numBytes, read_lastSecond_numRequests, read_lastSecond_numBytes, write_total_numRequests, write_total_numBytes, write_lastSecond_numRequests, write_lastSecond_numBytes):
    builder.Prep(1, 8)
    builder.Prep(1, 4)
    builder.Prep(1, 2)
    builder.PrependBool(write_lastSecond_numBytes)
    builder.PrependBool(write_lastSecond_numRequests)
    builder.Prep(1, 2)
    builder.PrependBool(write_total_numBytes)
    builder.PrependBool(write_total_numRequests)
    builder.Prep(1, 4)
    builder.Prep(1, 2)
    builder.PrependBool(read_lastSecond_numBytes)
    builder.PrependBool(read_lastSecond_numRequests)
    builder.Prep(1, 2)
    builder.PrependBool(read_total_numBytes)
    builder.PrependBool(read_total_numRequests)
    return builder.Offset()

import comm.ethercat.master.fbs.ProtocolStatisticPeriodReset
try:
    from typing import Optional
except:
    pass

class ProtocolStatisticResetT(object):

    # ProtocolStatisticResetT
    def __init__(self):
        self.read = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodResetT]
        self.write = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodResetT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        protocolStatisticReset = ProtocolStatisticReset()
        protocolStatisticReset.Init(buf, pos)
        return cls.InitFromObj(protocolStatisticReset)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, protocolStatisticReset):
        x = ProtocolStatisticResetT()
        x._UnPack(protocolStatisticReset)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.read == other.read and \
            self.write == other.write

    # ProtocolStatisticResetT
    def _UnPack(self, protocolStatisticReset):
        if protocolStatisticReset is None:
            return
        if protocolStatisticReset.Read(comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodReset()) is not None:
            self.read = comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodResetT.InitFromObj(protocolStatisticReset.Read(comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodReset()))
        if protocolStatisticReset.Write(comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodReset()) is not None:
            self.write = comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodResetT.InitFromObj(protocolStatisticReset.Write(comm.ethercat.master.fbs.ProtocolStatisticPeriodReset.ProtocolStatisticPeriodReset()))

    # ProtocolStatisticResetT
    def Pack(self, builder):
        return CreateProtocolStatisticReset(builder, self.read.total.numRequests, self.read.total.numBytes, self.read.lastSecond.numRequests, self.read.lastSecond.numBytes, self.write.total.numRequests, self.write.total.numBytes, self.write.lastSecond.numRequests, self.write.lastSecond.numBytes)
