# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Checksum element
class ChecksumElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChecksumElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChecksumElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ChecksumElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Id, what the checksum relates to
    # ChecksumElement
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Checksum as array of bytes
    # ChecksumElement
    def Checksum(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ChecksumElement
    def ChecksumAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ChecksumElement
    def ChecksumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ChecksumElement
    def ChecksumIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ChecksumElementStart(builder): builder.StartObject(2)
def Start(builder):
    return ChecksumElementStart(builder)
def ChecksumElementAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return ChecksumElementAddId(builder, id)
def ChecksumElementAddChecksum(builder, checksum): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(checksum), 0)
def AddChecksum(builder, checksum):
    return ChecksumElementAddChecksum(builder, checksum)
def ChecksumElementStartChecksumVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartChecksumVector(builder, numElems):
    return ChecksumElementStartChecksumVector(builder, numElems)
def ChecksumElementEnd(builder): return builder.EndObject()
def End(builder):
    return ChecksumElementEnd(builder)
try:
    from typing import List
except:
    pass

class ChecksumElementT(object):

    # ChecksumElementT
    def __init__(self):
        self.id = None  # type: str
        self.checksum = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        checksumElement = ChecksumElement()
        checksumElement.Init(buf, pos)
        return cls.InitFromObj(checksumElement)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, checksumElement):
        x = ChecksumElementT()
        x._UnPack(checksumElement)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.checksum == other.checksum

    # ChecksumElementT
    def _UnPack(self, checksumElement):
        if checksumElement is None:
            return
        self.id = checksumElement.Id()
        if not checksumElement.ChecksumIsNone():
            if np is None:
                self.checksum = []
                for i in range(checksumElement.ChecksumLength()):
                    self.checksum.append(checksumElement.Checksum(i))
            else:
                self.checksum = checksumElement.ChecksumAsNumpy()

    # ChecksumElementT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.checksum is not None:
            if np is not None and type(self.checksum) is np.ndarray:
                checksum = builder.CreateNumpyVector(self.checksum)
            else:
                ChecksumElementStartChecksumVector(builder, len(self.checksum))
                for i in reversed(range(len(self.checksum))):
                    builder.PrependUint8(self.checksum[i])
                checksum = builder.EndVector()
        ChecksumElementStart(builder)
        if self.id is not None:
            ChecksumElementAddId(builder, id)
        if self.checksum is not None:
            ChecksumElementAddChecksum(builder, checksum)
        checksumElement = ChecksumElementEnd(builder)
        return checksumElement
