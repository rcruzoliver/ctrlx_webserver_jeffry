# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Request for EtherCAT master state change
class MasterStateRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MasterStateRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMasterStateRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MasterStateRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Request master state
    # MasterStateRequest
    def NewState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def MasterStateRequestStart(builder): builder.StartObject(1)
def Start(builder):
    return MasterStateRequestStart(builder)
def MasterStateRequestAddNewState(builder, newState): builder.PrependUint16Slot(0, newState, 0)
def AddNewState(builder, newState):
    return MasterStateRequestAddNewState(builder, newState)
def MasterStateRequestEnd(builder): return builder.EndObject()
def End(builder):
    return MasterStateRequestEnd(builder)

class MasterStateRequestT(object):

    # MasterStateRequestT
    def __init__(self):
        self.newState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        masterStateRequest = MasterStateRequest()
        masterStateRequest.Init(buf, pos)
        return cls.InitFromObj(masterStateRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, masterStateRequest):
        x = MasterStateRequestT()
        x._UnPack(masterStateRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.newState == other.newState

    # MasterStateRequestT
    def _UnPack(self, masterStateRequest):
        if masterStateRequest is None:
            return
        self.newState = masterStateRequest.NewState()

    # MasterStateRequestT
    def Pack(self, builder):
        MasterStateRequestStart(builder)
        MasterStateRequestAddNewState(builder, self.newState)
        masterStateRequest = MasterStateRequestEnd(builder)
        return masterStateRequest
