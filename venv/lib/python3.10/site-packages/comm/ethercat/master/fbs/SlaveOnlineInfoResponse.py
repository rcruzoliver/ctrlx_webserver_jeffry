# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave online information data response
class SlaveOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveOnlineInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Auto increment address
    # SlaveOnlineInfoResponse
    def AutoIncAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #EtherCAT address, fixed physical (ESC register 0x0010)
    # SlaveOnlineInfoResponse
    def EthercatAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Station alias (second slave address) (ESC register 0x0012) 
    # SlaveOnlineInfoResponse
    def StationAlias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Last read identification value (only if slave is configured with an ‘IdentifyAdo’)
    # SlaveOnlineInfoResponse
    def IdentifyValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Internal slave id (internal use)
    # SlaveOnlineInfoResponse
    def SlaveHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Link to connected slaves (via SlaveHandle)
    # SlaveOnlineInfoResponse
    def PortSlaveHandles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandlesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandlesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveOnlineInfoResponse
    def PortSlaveHandlesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    #Slave identity info (EEPROM Offset 0x0008)
    # SlaveOnlineInfoResponse
    def SlaveIdentity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatIdentityInfo import EthercatIdentityInfo
            obj = EthercatIdentityInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #EtherCAT slave controller (ESC) type (ESC register 0x0000)
    # SlaveOnlineInfoResponse
    def EscType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #EtherCAT slave controller (ESC) revision (ESC register 0x0001)
    # SlaveOnlineInfoResponse
    def EscRevision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #EtherCAT slave controller (ESC) build (ESC register 0x0002)
    # SlaveOnlineInfoResponse
    def EscBuild(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Supported EtherCAT slave controller (ESC) Features (ESC register 0x0008)
    # SlaveOnlineInfoResponse
    def EscFeatures(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Port descriptor (ESC register 0x0007) (0b10 = EBUS, 0b11 = MII/..) (Port0^Bit0:1, Port1^Bit2:3, Port2^Bit4:5, Port3^Bit6:7)
    # SlaveOnlineInfoResponse
    def PortDescriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Reserved
    # SlaveOnlineInfoResponse
    def Reserved01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Application layer status (ESC register 0x0130)
    # SlaveOnlineInfoResponse
    def AlStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Application layer status Code (ESC register 0x0134)
    # SlaveOnlineInfoResponse
    def AlStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Mailbox supported Protocols (Online data)
    #Bit 0: AoE (ADS over EtherCAT) (ADS: Automation Device Specification)
    #Bit 1: EoE (Ethernet over EtherCAT)
    #Bit 2: CoE (CAN application protocol over EtherCAT)
    #Bit 3: FoE (File access over EtherCAT)
    #Bit 4: SoE (Servo drive over EtherCAT)
    #Bit 5: VoE (Vendor specific protocol over EtherCAT)
    #Bit 6 to 15: Reserved
    # SlaveOnlineInfoResponse
    def MbxProtocols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Data link status (ESC register 0x0110:0x0111)
    # SlaveOnlineInfoResponse
    def DlStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #In comparison to the DL Status the ‘Port-State’ represents only the physical ports. 
    #The "ConnectionPortX" diagnosis bit is a logical result of the other status bits.
    # SlaveOnlineInfoResponse
    def PortState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Connected Port of the previous slave
    # SlaveOnlineInfoResponse
    def PreviousPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #System time difference in nanoseconds (only if DC is configured) (ESC register 0x092C)
    # SlaveOnlineInfoResponse
    def SystemTimeDifference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Time delay "behind" slave in nanoseconds (only if DC is configured)
    # SlaveOnlineInfoResponse
    def SlaveDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Propagation delay in nanoseconds (only if DC is configured) (ESC register 0x0928)
    # SlaveOnlineInfoResponse
    def PropagationDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Reserved
    # SlaveOnlineInfoResponse
    def Reserved02(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveOnlineInfoResponse
    def Reserved02IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    #Slave supports DC (Distributed Clock)
    # SlaveOnlineInfoResponse
    def DcSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SlaveOnlineInfoResponse
    def Dc64Support(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Slave is reference clock
    # SlaveOnlineInfoResponse
    def IsRefClock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Line crossed detected at this slave (e.g. IN-OUT Port interchanged)
    # SlaveOnlineInfoResponse
    def LineCrossed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SlaveOnlineInfoResponseStart(builder): builder.StartObject(27)
def Start(builder):
    return SlaveOnlineInfoResponseStart(builder)
def SlaveOnlineInfoResponseAddAutoIncAddr(builder, autoIncAddr): builder.PrependUint16Slot(0, autoIncAddr, 0)
def AddAutoIncAddr(builder, autoIncAddr):
    return SlaveOnlineInfoResponseAddAutoIncAddr(builder, autoIncAddr)
def SlaveOnlineInfoResponseAddEthercatAddr(builder, ethercatAddr): builder.PrependUint16Slot(1, ethercatAddr, 0)
def AddEthercatAddr(builder, ethercatAddr):
    return SlaveOnlineInfoResponseAddEthercatAddr(builder, ethercatAddr)
def SlaveOnlineInfoResponseAddStationAlias(builder, stationAlias): builder.PrependUint16Slot(2, stationAlias, 0)
def AddStationAlias(builder, stationAlias):
    return SlaveOnlineInfoResponseAddStationAlias(builder, stationAlias)
def SlaveOnlineInfoResponseAddIdentifyValue(builder, identifyValue): builder.PrependUint16Slot(3, identifyValue, 0)
def AddIdentifyValue(builder, identifyValue):
    return SlaveOnlineInfoResponseAddIdentifyValue(builder, identifyValue)
def SlaveOnlineInfoResponseAddSlaveHandle(builder, slaveHandle): builder.PrependUint32Slot(4, slaveHandle, 0)
def AddSlaveHandle(builder, slaveHandle):
    return SlaveOnlineInfoResponseAddSlaveHandle(builder, slaveHandle)
def SlaveOnlineInfoResponseAddPortSlaveHandles(builder, portSlaveHandles): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(portSlaveHandles), 0)
def AddPortSlaveHandles(builder, portSlaveHandles):
    return SlaveOnlineInfoResponseAddPortSlaveHandles(builder, portSlaveHandles)
def SlaveOnlineInfoResponseStartPortSlaveHandlesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPortSlaveHandlesVector(builder, numElems):
    return SlaveOnlineInfoResponseStartPortSlaveHandlesVector(builder, numElems)
def SlaveOnlineInfoResponseAddSlaveIdentity(builder, slaveIdentity): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(slaveIdentity), 0)
def AddSlaveIdentity(builder, slaveIdentity):
    return SlaveOnlineInfoResponseAddSlaveIdentity(builder, slaveIdentity)
def SlaveOnlineInfoResponseAddEscType(builder, escType): builder.PrependUint8Slot(7, escType, 0)
def AddEscType(builder, escType):
    return SlaveOnlineInfoResponseAddEscType(builder, escType)
def SlaveOnlineInfoResponseAddEscRevision(builder, escRevision): builder.PrependUint8Slot(8, escRevision, 0)
def AddEscRevision(builder, escRevision):
    return SlaveOnlineInfoResponseAddEscRevision(builder, escRevision)
def SlaveOnlineInfoResponseAddEscBuild(builder, escBuild): builder.PrependUint16Slot(9, escBuild, 0)
def AddEscBuild(builder, escBuild):
    return SlaveOnlineInfoResponseAddEscBuild(builder, escBuild)
def SlaveOnlineInfoResponseAddEscFeatures(builder, escFeatures): builder.PrependUint16Slot(10, escFeatures, 0)
def AddEscFeatures(builder, escFeatures):
    return SlaveOnlineInfoResponseAddEscFeatures(builder, escFeatures)
def SlaveOnlineInfoResponseAddPortDescriptor(builder, portDescriptor): builder.PrependUint8Slot(11, portDescriptor, 0)
def AddPortDescriptor(builder, portDescriptor):
    return SlaveOnlineInfoResponseAddPortDescriptor(builder, portDescriptor)
def SlaveOnlineInfoResponseAddReserved01(builder, reserved01): builder.PrependUint8Slot(12, reserved01, 0)
def AddReserved01(builder, reserved01):
    return SlaveOnlineInfoResponseAddReserved01(builder, reserved01)
def SlaveOnlineInfoResponseAddAlStatus(builder, alStatus): builder.PrependUint16Slot(13, alStatus, 0)
def AddAlStatus(builder, alStatus):
    return SlaveOnlineInfoResponseAddAlStatus(builder, alStatus)
def SlaveOnlineInfoResponseAddAlStatusCode(builder, alStatusCode): builder.PrependUint16Slot(14, alStatusCode, 0)
def AddAlStatusCode(builder, alStatusCode):
    return SlaveOnlineInfoResponseAddAlStatusCode(builder, alStatusCode)
def SlaveOnlineInfoResponseAddMbxProtocols(builder, mbxProtocols): builder.PrependUint16Slot(15, mbxProtocols, 0)
def AddMbxProtocols(builder, mbxProtocols):
    return SlaveOnlineInfoResponseAddMbxProtocols(builder, mbxProtocols)
def SlaveOnlineInfoResponseAddDlStatus(builder, dlStatus): builder.PrependUint16Slot(16, dlStatus, 0)
def AddDlStatus(builder, dlStatus):
    return SlaveOnlineInfoResponseAddDlStatus(builder, dlStatus)
def SlaveOnlineInfoResponseAddPortState(builder, portState): builder.PrependUint16Slot(17, portState, 0)
def AddPortState(builder, portState):
    return SlaveOnlineInfoResponseAddPortState(builder, portState)
def SlaveOnlineInfoResponseAddPreviousPort(builder, previousPort): builder.PrependUint16Slot(18, previousPort, 0)
def AddPreviousPort(builder, previousPort):
    return SlaveOnlineInfoResponseAddPreviousPort(builder, previousPort)
def SlaveOnlineInfoResponseAddSystemTimeDifference(builder, systemTimeDifference): builder.PrependUint32Slot(19, systemTimeDifference, 0)
def AddSystemTimeDifference(builder, systemTimeDifference):
    return SlaveOnlineInfoResponseAddSystemTimeDifference(builder, systemTimeDifference)
def SlaveOnlineInfoResponseAddSlaveDelay(builder, slaveDelay): builder.PrependUint32Slot(20, slaveDelay, 0)
def AddSlaveDelay(builder, slaveDelay):
    return SlaveOnlineInfoResponseAddSlaveDelay(builder, slaveDelay)
def SlaveOnlineInfoResponseAddPropagationDelay(builder, propagationDelay): builder.PrependUint32Slot(21, propagationDelay, 0)
def AddPropagationDelay(builder, propagationDelay):
    return SlaveOnlineInfoResponseAddPropagationDelay(builder, propagationDelay)
def SlaveOnlineInfoResponseAddReserved02(builder, reserved02): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(reserved02), 0)
def AddReserved02(builder, reserved02):
    return SlaveOnlineInfoResponseAddReserved02(builder, reserved02)
def SlaveOnlineInfoResponseStartReserved02Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartReserved02Vector(builder, numElems):
    return SlaveOnlineInfoResponseStartReserved02Vector(builder, numElems)
def SlaveOnlineInfoResponseAddDcSupport(builder, dcSupport): builder.PrependBoolSlot(23, dcSupport, 0)
def AddDcSupport(builder, dcSupport):
    return SlaveOnlineInfoResponseAddDcSupport(builder, dcSupport)
def SlaveOnlineInfoResponseAddDc64Support(builder, dc64Support): builder.PrependBoolSlot(24, dc64Support, 0)
def AddDc64Support(builder, dc64Support):
    return SlaveOnlineInfoResponseAddDc64Support(builder, dc64Support)
def SlaveOnlineInfoResponseAddIsRefClock(builder, isRefClock): builder.PrependBoolSlot(25, isRefClock, 0)
def AddIsRefClock(builder, isRefClock):
    return SlaveOnlineInfoResponseAddIsRefClock(builder, isRefClock)
def SlaveOnlineInfoResponseAddLineCrossed(builder, lineCrossed): builder.PrependBoolSlot(26, lineCrossed, 0)
def AddLineCrossed(builder, lineCrossed):
    return SlaveOnlineInfoResponseAddLineCrossed(builder, lineCrossed)
def SlaveOnlineInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveOnlineInfoResponseEnd(builder)
import comm.ethercat.master.fbs.EthercatIdentityInfo
try:
    from typing import List, Optional
except:
    pass

class SlaveOnlineInfoResponseT(object):

    # SlaveOnlineInfoResponseT
    def __init__(self):
        self.autoIncAddr = 0  # type: int
        self.ethercatAddr = 0  # type: int
        self.stationAlias = 0  # type: int
        self.identifyValue = 0  # type: int
        self.slaveHandle = 0  # type: int
        self.portSlaveHandles = None  # type: List[int]
        self.slaveIdentity = None  # type: Optional[comm.ethercat.master.fbs.EthercatIdentityInfo.EthercatIdentityInfoT]
        self.escType = 0  # type: int
        self.escRevision = 0  # type: int
        self.escBuild = 0  # type: int
        self.escFeatures = 0  # type: int
        self.portDescriptor = 0  # type: int
        self.reserved01 = 0  # type: int
        self.alStatus = 0  # type: int
        self.alStatusCode = 0  # type: int
        self.mbxProtocols = 0  # type: int
        self.dlStatus = 0  # type: int
        self.portState = 0  # type: int
        self.previousPort = 0  # type: int
        self.systemTimeDifference = 0  # type: int
        self.slaveDelay = 0  # type: int
        self.propagationDelay = 0  # type: int
        self.reserved02 = None  # type: List[int]
        self.dcSupport = False  # type: bool
        self.dc64Support = False  # type: bool
        self.isRefClock = False  # type: bool
        self.lineCrossed = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveOnlineInfoResponse = SlaveOnlineInfoResponse()
        slaveOnlineInfoResponse.Init(buf, pos)
        return cls.InitFromObj(slaveOnlineInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveOnlineInfoResponse):
        x = SlaveOnlineInfoResponseT()
        x._UnPack(slaveOnlineInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.autoIncAddr == other.autoIncAddr and \
            self.ethercatAddr == other.ethercatAddr and \
            self.stationAlias == other.stationAlias and \
            self.identifyValue == other.identifyValue and \
            self.slaveHandle == other.slaveHandle and \
            self.portSlaveHandles == other.portSlaveHandles and \
            self.slaveIdentity == other.slaveIdentity and \
            self.escType == other.escType and \
            self.escRevision == other.escRevision and \
            self.escBuild == other.escBuild and \
            self.escFeatures == other.escFeatures and \
            self.portDescriptor == other.portDescriptor and \
            self.reserved01 == other.reserved01 and \
            self.alStatus == other.alStatus and \
            self.alStatusCode == other.alStatusCode and \
            self.mbxProtocols == other.mbxProtocols and \
            self.dlStatus == other.dlStatus and \
            self.portState == other.portState and \
            self.previousPort == other.previousPort and \
            self.systemTimeDifference == other.systemTimeDifference and \
            self.slaveDelay == other.slaveDelay and \
            self.propagationDelay == other.propagationDelay and \
            self.reserved02 == other.reserved02 and \
            self.dcSupport == other.dcSupport and \
            self.dc64Support == other.dc64Support and \
            self.isRefClock == other.isRefClock and \
            self.lineCrossed == other.lineCrossed

    # SlaveOnlineInfoResponseT
    def _UnPack(self, slaveOnlineInfoResponse):
        if slaveOnlineInfoResponse is None:
            return
        self.autoIncAddr = slaveOnlineInfoResponse.AutoIncAddr()
        self.ethercatAddr = slaveOnlineInfoResponse.EthercatAddr()
        self.stationAlias = slaveOnlineInfoResponse.StationAlias()
        self.identifyValue = slaveOnlineInfoResponse.IdentifyValue()
        self.slaveHandle = slaveOnlineInfoResponse.SlaveHandle()
        if not slaveOnlineInfoResponse.PortSlaveHandlesIsNone():
            if np is None:
                self.portSlaveHandles = []
                for i in range(slaveOnlineInfoResponse.PortSlaveHandlesLength()):
                    self.portSlaveHandles.append(slaveOnlineInfoResponse.PortSlaveHandles(i))
            else:
                self.portSlaveHandles = slaveOnlineInfoResponse.PortSlaveHandlesAsNumpy()
        if slaveOnlineInfoResponse.SlaveIdentity() is not None:
            self.slaveIdentity = comm.ethercat.master.fbs.EthercatIdentityInfo.EthercatIdentityInfoT.InitFromObj(slaveOnlineInfoResponse.SlaveIdentity())
        self.escType = slaveOnlineInfoResponse.EscType()
        self.escRevision = slaveOnlineInfoResponse.EscRevision()
        self.escBuild = slaveOnlineInfoResponse.EscBuild()
        self.escFeatures = slaveOnlineInfoResponse.EscFeatures()
        self.portDescriptor = slaveOnlineInfoResponse.PortDescriptor()
        self.reserved01 = slaveOnlineInfoResponse.Reserved01()
        self.alStatus = slaveOnlineInfoResponse.AlStatus()
        self.alStatusCode = slaveOnlineInfoResponse.AlStatusCode()
        self.mbxProtocols = slaveOnlineInfoResponse.MbxProtocols()
        self.dlStatus = slaveOnlineInfoResponse.DlStatus()
        self.portState = slaveOnlineInfoResponse.PortState()
        self.previousPort = slaveOnlineInfoResponse.PreviousPort()
        self.systemTimeDifference = slaveOnlineInfoResponse.SystemTimeDifference()
        self.slaveDelay = slaveOnlineInfoResponse.SlaveDelay()
        self.propagationDelay = slaveOnlineInfoResponse.PropagationDelay()
        if not slaveOnlineInfoResponse.Reserved02IsNone():
            if np is None:
                self.reserved02 = []
                for i in range(slaveOnlineInfoResponse.Reserved02Length()):
                    self.reserved02.append(slaveOnlineInfoResponse.Reserved02(i))
            else:
                self.reserved02 = slaveOnlineInfoResponse.Reserved02AsNumpy()
        self.dcSupport = slaveOnlineInfoResponse.DcSupport()
        self.dc64Support = slaveOnlineInfoResponse.Dc64Support()
        self.isRefClock = slaveOnlineInfoResponse.IsRefClock()
        self.lineCrossed = slaveOnlineInfoResponse.LineCrossed()

    # SlaveOnlineInfoResponseT
    def Pack(self, builder):
        if self.portSlaveHandles is not None:
            if np is not None and type(self.portSlaveHandles) is np.ndarray:
                portSlaveHandles = builder.CreateNumpyVector(self.portSlaveHandles)
            else:
                SlaveOnlineInfoResponseStartPortSlaveHandlesVector(builder, len(self.portSlaveHandles))
                for i in reversed(range(len(self.portSlaveHandles))):
                    builder.PrependUint32(self.portSlaveHandles[i])
                portSlaveHandles = builder.EndVector()
        if self.reserved02 is not None:
            if np is not None and type(self.reserved02) is np.ndarray:
                reserved02 = builder.CreateNumpyVector(self.reserved02)
            else:
                SlaveOnlineInfoResponseStartReserved02Vector(builder, len(self.reserved02))
                for i in reversed(range(len(self.reserved02))):
                    builder.PrependUint32(self.reserved02[i])
                reserved02 = builder.EndVector()
        SlaveOnlineInfoResponseStart(builder)
        SlaveOnlineInfoResponseAddAutoIncAddr(builder, self.autoIncAddr)
        SlaveOnlineInfoResponseAddEthercatAddr(builder, self.ethercatAddr)
        SlaveOnlineInfoResponseAddStationAlias(builder, self.stationAlias)
        SlaveOnlineInfoResponseAddIdentifyValue(builder, self.identifyValue)
        SlaveOnlineInfoResponseAddSlaveHandle(builder, self.slaveHandle)
        if self.portSlaveHandles is not None:
            SlaveOnlineInfoResponseAddPortSlaveHandles(builder, portSlaveHandles)
        if self.slaveIdentity is not None:
            slaveIdentity = self.slaveIdentity.Pack(builder)
            SlaveOnlineInfoResponseAddSlaveIdentity(builder, slaveIdentity)
        SlaveOnlineInfoResponseAddEscType(builder, self.escType)
        SlaveOnlineInfoResponseAddEscRevision(builder, self.escRevision)
        SlaveOnlineInfoResponseAddEscBuild(builder, self.escBuild)
        SlaveOnlineInfoResponseAddEscFeatures(builder, self.escFeatures)
        SlaveOnlineInfoResponseAddPortDescriptor(builder, self.portDescriptor)
        SlaveOnlineInfoResponseAddReserved01(builder, self.reserved01)
        SlaveOnlineInfoResponseAddAlStatus(builder, self.alStatus)
        SlaveOnlineInfoResponseAddAlStatusCode(builder, self.alStatusCode)
        SlaveOnlineInfoResponseAddMbxProtocols(builder, self.mbxProtocols)
        SlaveOnlineInfoResponseAddDlStatus(builder, self.dlStatus)
        SlaveOnlineInfoResponseAddPortState(builder, self.portState)
        SlaveOnlineInfoResponseAddPreviousPort(builder, self.previousPort)
        SlaveOnlineInfoResponseAddSystemTimeDifference(builder, self.systemTimeDifference)
        SlaveOnlineInfoResponseAddSlaveDelay(builder, self.slaveDelay)
        SlaveOnlineInfoResponseAddPropagationDelay(builder, self.propagationDelay)
        if self.reserved02 is not None:
            SlaveOnlineInfoResponseAddReserved02(builder, reserved02)
        SlaveOnlineInfoResponseAddDcSupport(builder, self.dcSupport)
        SlaveOnlineInfoResponseAddDc64Support(builder, self.dc64Support)
        SlaveOnlineInfoResponseAddIsRefClock(builder, self.isRefClock)
        SlaveOnlineInfoResponseAddLineCrossed(builder, self.lineCrossed)
        slaveOnlineInfoResponse = SlaveOnlineInfoResponseEnd(builder)
        return slaveOnlineInfoResponse
