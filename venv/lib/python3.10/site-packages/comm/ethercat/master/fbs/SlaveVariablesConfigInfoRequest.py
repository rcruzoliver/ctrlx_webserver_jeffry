# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave variables config info request
class SlaveVariablesConfigInfoRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveVariablesConfigInfoRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveVariablesConfigInfoRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveVariablesConfigInfoRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Type and value to address a specific slave
    # SlaveVariablesConfigInfoRequest
    def AddressedRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.AddressedRequest import AddressedRequest
            obj = AddressedRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Variable type
    #e.g. "input" or "output"
    # SlaveVariablesConfigInfoRequest
    def VarType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SlaveVariablesConfigInfoRequestStart(builder): builder.StartObject(2)
def Start(builder):
    return SlaveVariablesConfigInfoRequestStart(builder)
def SlaveVariablesConfigInfoRequestAddAddressedRequest(builder, addressedRequest): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(addressedRequest), 0)
def AddAddressedRequest(builder, addressedRequest):
    return SlaveVariablesConfigInfoRequestAddAddressedRequest(builder, addressedRequest)
def SlaveVariablesConfigInfoRequestAddVarType(builder, varType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(varType), 0)
def AddVarType(builder, varType):
    return SlaveVariablesConfigInfoRequestAddVarType(builder, varType)
def SlaveVariablesConfigInfoRequestEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveVariablesConfigInfoRequestEnd(builder)
import comm.ethercat.master.fbs.AddressedRequest
try:
    from typing import Optional
except:
    pass

class SlaveVariablesConfigInfoRequestT(object):

    # SlaveVariablesConfigInfoRequestT
    def __init__(self):
        self.addressedRequest = None  # type: Optional[comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT]
        self.varType = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveVariablesConfigInfoRequest = SlaveVariablesConfigInfoRequest()
        slaveVariablesConfigInfoRequest.Init(buf, pos)
        return cls.InitFromObj(slaveVariablesConfigInfoRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveVariablesConfigInfoRequest):
        x = SlaveVariablesConfigInfoRequestT()
        x._UnPack(slaveVariablesConfigInfoRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressedRequest == other.addressedRequest and \
            self.varType == other.varType

    # SlaveVariablesConfigInfoRequestT
    def _UnPack(self, slaveVariablesConfigInfoRequest):
        if slaveVariablesConfigInfoRequest is None:
            return
        if slaveVariablesConfigInfoRequest.AddressedRequest() is not None:
            self.addressedRequest = comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT.InitFromObj(slaveVariablesConfigInfoRequest.AddressedRequest())
        self.varType = slaveVariablesConfigInfoRequest.VarType()

    # SlaveVariablesConfigInfoRequestT
    def Pack(self, builder):
        if self.addressedRequest is not None:
            addressedRequest = self.addressedRequest.Pack(builder)
        if self.varType is not None:
            varType = builder.CreateString(self.varType)
        SlaveVariablesConfigInfoRequestStart(builder)
        if self.addressedRequest is not None:
            SlaveVariablesConfigInfoRequestAddAddressedRequest(builder, addressedRequest)
        if self.varType is not None:
            SlaveVariablesConfigInfoRequestAddVarType(builder, varType)
        slaveVariablesConfigInfoRequest = SlaveVariablesConfigInfoRequestEnd(builder)
        return slaveVariablesConfigInfoRequest
