# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Topology status response
class TopologyStatusResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopologyStatusResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTopologyStatusResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TopologyStatusResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Topology state:
    #unknown: State is unknown
    #valid: State is valid
    #pending: State is pending
    # TopologyStatusResponse
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Number of topology changes (incremented each time a topology change event occurs)
    # TopologyStatusResponse
    def NumChanges(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def TopologyStatusResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return TopologyStatusResponseStart(builder)
def TopologyStatusResponseAddState(builder, state): builder.PrependUint32Slot(0, state, 0)
def AddState(builder, state):
    return TopologyStatusResponseAddState(builder, state)
def TopologyStatusResponseAddNumChanges(builder, numChanges): builder.PrependUint32Slot(1, numChanges, 0)
def AddNumChanges(builder, numChanges):
    return TopologyStatusResponseAddNumChanges(builder, numChanges)
def TopologyStatusResponseEnd(builder): return builder.EndObject()
def End(builder):
    return TopologyStatusResponseEnd(builder)

class TopologyStatusResponseT(object):

    # TopologyStatusResponseT
    def __init__(self):
        self.state = 0  # type: int
        self.numChanges = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        topologyStatusResponse = TopologyStatusResponse()
        topologyStatusResponse.Init(buf, pos)
        return cls.InitFromObj(topologyStatusResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, topologyStatusResponse):
        x = TopologyStatusResponseT()
        x._UnPack(topologyStatusResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.state == other.state and \
            self.numChanges == other.numChanges

    # TopologyStatusResponseT
    def _UnPack(self, topologyStatusResponse):
        if topologyStatusResponse is None:
            return
        self.state = topologyStatusResponse.State()
        self.numChanges = topologyStatusResponse.NumChanges()

    # TopologyStatusResponseT
    def Pack(self, builder):
        TopologyStatusResponseStart(builder)
        TopologyStatusResponseAddState(builder, self.state)
        TopologyStatusResponseAddNumChanges(builder, self.numChanges)
        topologyStatusResponse = TopologyStatusResponseEnd(builder)
        return topologyStatusResponse
