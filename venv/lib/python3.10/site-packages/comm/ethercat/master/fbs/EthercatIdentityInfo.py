# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#EtherCAT Identity Info
class EthercatIdentityInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # EthercatIdentityInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #EtherCAT-Vendor identification
    # EthercatIdentityInfo
    def VendorId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    #Product Code
    # EthercatIdentityInfo
    def ProductCode(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    #Revision Number
    # EthercatIdentityInfo
    def RevisionNumber(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    #Serial Number
    # EthercatIdentityInfo
    def SerialNumber(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))

def CreateEthercatIdentityInfo(builder, vendorId, productCode, revisionNumber, serialNumber):
    builder.Prep(4, 16)
    builder.PrependUint32(serialNumber)
    builder.PrependUint32(revisionNumber)
    builder.PrependUint32(productCode)
    builder.PrependUint32(vendorId)
    return builder.Offset()


class EthercatIdentityInfoT(object):

    # EthercatIdentityInfoT
    def __init__(self):
        self.vendorId = 0  # type: int
        self.productCode = 0  # type: int
        self.revisionNumber = 0  # type: int
        self.serialNumber = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ethercatIdentityInfo = EthercatIdentityInfo()
        ethercatIdentityInfo.Init(buf, pos)
        return cls.InitFromObj(ethercatIdentityInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ethercatIdentityInfo):
        x = EthercatIdentityInfoT()
        x._UnPack(ethercatIdentityInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.vendorId == other.vendorId and \
            self.productCode == other.productCode and \
            self.revisionNumber == other.revisionNumber and \
            self.serialNumber == other.serialNumber

    # EthercatIdentityInfoT
    def _UnPack(self, ethercatIdentityInfo):
        if ethercatIdentityInfo is None:
            return
        self.vendorId = ethercatIdentityInfo.VendorId()
        self.productCode = ethercatIdentityInfo.ProductCode()
        self.revisionNumber = ethercatIdentityInfo.RevisionNumber()
        self.serialNumber = ethercatIdentityInfo.SerialNumber()

    # EthercatIdentityInfoT
    def Pack(self, builder):
        return CreateEthercatIdentityInfo(builder, self.vendorId, self.productCode, self.revisionNumber, self.serialNumber)
