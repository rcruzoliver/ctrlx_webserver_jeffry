# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This write only node resets the bus frame statistic counters of the EtherCAT Master
class FrameStatisticReset(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameStatisticReset()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrameStatisticReset(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FrameStatisticReset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameStatisticReset
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.FrameStatisticResetRequest import FrameStatisticResetRequest
            obj = FrameStatisticResetRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FrameStatisticResetStart(builder): builder.StartObject(1)
def Start(builder):
    return FrameStatisticResetStart(builder)
def FrameStatisticResetAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return FrameStatisticResetAddRequest(builder, request)
def FrameStatisticResetEnd(builder): return builder.EndObject()
def End(builder):
    return FrameStatisticResetEnd(builder)
import comm.ethercat.master.fbs.FrameStatisticResetRequest
try:
    from typing import Optional
except:
    pass

class FrameStatisticResetT(object):

    # FrameStatisticResetT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.FrameStatisticResetRequest.FrameStatisticResetRequestT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        frameStatisticReset = FrameStatisticReset()
        frameStatisticReset.Init(buf, pos)
        return cls.InitFromObj(frameStatisticReset)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, frameStatisticReset):
        x = FrameStatisticResetT()
        x._UnPack(frameStatisticReset)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request

    # FrameStatisticResetT
    def _UnPack(self, frameStatisticReset):
        if frameStatisticReset is None:
            return
        if frameStatisticReset.Request() is not None:
            self.request = comm.ethercat.master.fbs.FrameStatisticResetRequest.FrameStatisticResetRequestT.InitFromObj(frameStatisticReset.Request())

    # FrameStatisticResetT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        FrameStatisticResetStart(builder)
        if self.request is not None:
            FrameStatisticResetAddRequest(builder, request)
        frameStatisticReset = FrameStatisticResetEnd(builder)
        return frameStatisticReset
