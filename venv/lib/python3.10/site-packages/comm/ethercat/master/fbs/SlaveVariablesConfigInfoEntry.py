# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave variable config info entry
class SlaveVariablesConfigInfoEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveVariablesConfigInfoEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveVariablesConfigInfoEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveVariablesConfigInfoEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Variable info
    # SlaveVariablesConfigInfoEntry
    def VariableInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Variable import Variable
            obj = Variable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Base data type according to ETG 1020
    # SlaveVariablesConfigInfoEntry
    def EtgBaseType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Variable protocol info
    #Only the protocol which is supported by the slave is present
    # SlaveVariablesConfigInfoEntry
    def ProtocolInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.VariableProtocolInfo import VariableProtocolInfo
            obj = VariableProtocolInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SlaveVariablesConfigInfoEntryStart(builder): builder.StartObject(3)
def Start(builder):
    return SlaveVariablesConfigInfoEntryStart(builder)
def SlaveVariablesConfigInfoEntryAddVariableInfo(builder, variableInfo): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(variableInfo), 0)
def AddVariableInfo(builder, variableInfo):
    return SlaveVariablesConfigInfoEntryAddVariableInfo(builder, variableInfo)
def SlaveVariablesConfigInfoEntryAddEtgBaseType(builder, etgBaseType): builder.PrependUint16Slot(1, etgBaseType, 0)
def AddEtgBaseType(builder, etgBaseType):
    return SlaveVariablesConfigInfoEntryAddEtgBaseType(builder, etgBaseType)
def SlaveVariablesConfigInfoEntryAddProtocolInfo(builder, protocolInfo): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(protocolInfo), 0)
def AddProtocolInfo(builder, protocolInfo):
    return SlaveVariablesConfigInfoEntryAddProtocolInfo(builder, protocolInfo)
def SlaveVariablesConfigInfoEntryEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveVariablesConfigInfoEntryEnd(builder)
import comm.datalayer.Variable
import comm.ethercat.master.fbs.VariableProtocolInfo
try:
    from typing import Optional
except:
    pass

class SlaveVariablesConfigInfoEntryT(object):

    # SlaveVariablesConfigInfoEntryT
    def __init__(self):
        self.variableInfo = None  # type: Optional[comm.datalayer.Variable.VariableT]
        self.etgBaseType = 0  # type: int
        self.protocolInfo = None  # type: Optional[comm.ethercat.master.fbs.VariableProtocolInfo.VariableProtocolInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveVariablesConfigInfoEntry = SlaveVariablesConfigInfoEntry()
        slaveVariablesConfigInfoEntry.Init(buf, pos)
        return cls.InitFromObj(slaveVariablesConfigInfoEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveVariablesConfigInfoEntry):
        x = SlaveVariablesConfigInfoEntryT()
        x._UnPack(slaveVariablesConfigInfoEntry)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.variableInfo == other.variableInfo and \
            self.etgBaseType == other.etgBaseType and \
            self.protocolInfo == other.protocolInfo

    # SlaveVariablesConfigInfoEntryT
    def _UnPack(self, slaveVariablesConfigInfoEntry):
        if slaveVariablesConfigInfoEntry is None:
            return
        if slaveVariablesConfigInfoEntry.VariableInfo() is not None:
            self.variableInfo = comm.datalayer.Variable.VariableT.InitFromObj(slaveVariablesConfigInfoEntry.VariableInfo())
        self.etgBaseType = slaveVariablesConfigInfoEntry.EtgBaseType()
        if slaveVariablesConfigInfoEntry.ProtocolInfo() is not None:
            self.protocolInfo = comm.ethercat.master.fbs.VariableProtocolInfo.VariableProtocolInfoT.InitFromObj(slaveVariablesConfigInfoEntry.ProtocolInfo())

    # SlaveVariablesConfigInfoEntryT
    def Pack(self, builder):
        if self.variableInfo is not None:
            variableInfo = self.variableInfo.Pack(builder)
        if self.protocolInfo is not None:
            protocolInfo = self.protocolInfo.Pack(builder)
        SlaveVariablesConfigInfoEntryStart(builder)
        if self.variableInfo is not None:
            SlaveVariablesConfigInfoEntryAddVariableInfo(builder, variableInfo)
        SlaveVariablesConfigInfoEntryAddEtgBaseType(builder, self.etgBaseType)
        if self.protocolInfo is not None:
            SlaveVariablesConfigInfoEntryAddProtocolInfo(builder, protocolInfo)
        slaveVariablesConfigInfoEntry = SlaveVariablesConfigInfoEntryEnd(builder)
        return slaveVariablesConfigInfoEntry
