# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Object description response
class ObjectDescriptionResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDescriptionResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectDescriptionResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectDescriptionResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Data buffer
    # ObjectDescriptionResponse
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ObjectDescriptionResponse
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ObjectDescriptionResponse
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectDescriptionResponse
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ObjectDescriptionResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return ObjectDescriptionResponseStart(builder)
def ObjectDescriptionResponseAddData(builder, data): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return ObjectDescriptionResponseAddData(builder, data)
def ObjectDescriptionResponseStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return ObjectDescriptionResponseStartDataVector(builder, numElems)
def ObjectDescriptionResponseEnd(builder): return builder.EndObject()
def End(builder):
    return ObjectDescriptionResponseEnd(builder)
try:
    from typing import List
except:
    pass

class ObjectDescriptionResponseT(object):

    # ObjectDescriptionResponseT
    def __init__(self):
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectDescriptionResponse = ObjectDescriptionResponse()
        objectDescriptionResponse.Init(buf, pos)
        return cls.InitFromObj(objectDescriptionResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, objectDescriptionResponse):
        x = ObjectDescriptionResponseT()
        x._UnPack(objectDescriptionResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.data == other.data

    # ObjectDescriptionResponseT
    def _UnPack(self, objectDescriptionResponse):
        if objectDescriptionResponse is None:
            return
        if not objectDescriptionResponse.DataIsNone():
            if np is None:
                self.data = []
                for i in range(objectDescriptionResponse.DataLength()):
                    self.data.append(objectDescriptionResponse.Data(i))
            else:
                self.data = objectDescriptionResponse.DataAsNumpy()

    # ObjectDescriptionResponseT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                ObjectDescriptionResponseStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        ObjectDescriptionResponseStart(builder)
        if self.data is not None:
            ObjectDescriptionResponseAddData(builder, data)
        objectDescriptionResponse = ObjectDescriptionResponseEnd(builder)
        return objectDescriptionResponse
