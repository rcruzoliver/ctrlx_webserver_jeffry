# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#EoE Configuration for the requested Slave
class EoeConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EoeConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEoeConfigInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EoeConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Mac Address
    #e.g. [ 2, 1, 5, 16, 3, 233] (dec) equals IEEE 802 notation: 02-01-05-10-03-E9 
    # EoeConfigInfoResponse
    def MacAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EoeConfigInfoResponse
    def MacAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EoeConfigInfoResponse
    def MacAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EoeConfigInfoResponse
    def MacAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    #IP Address
    #e.g. [1, 254, 31, 172] (dec) equals dot-decimal notation: 172.31.254.1
    # EoeConfigInfoResponse
    def IpAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EoeConfigInfoResponse
    def IpAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EoeConfigInfoResponse
    def IpAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EoeConfigInfoResponse
    def IpAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    #Subnet Mask
    # EoeConfigInfoResponse
    def SubnetMask(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EoeConfigInfoResponse
    def SubnetMaskAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EoeConfigInfoResponse
    def SubnetMaskLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EoeConfigInfoResponse
    def SubnetMaskIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    #Default Gateway
    #e.g. [253, 254, 31, 172] (dec) equals dot-decimal notation: 172.31.254.253
    # EoeConfigInfoResponse
    def DefaultGateway(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EoeConfigInfoResponse
    def DefaultGatewayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EoeConfigInfoResponse
    def DefaultGatewayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EoeConfigInfoResponse
    def DefaultGatewayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    #DNS IP
    #e.g. [253, 254, 31, 172] (dec) equals dot-decimal notation: 172.31.254.253
    # EoeConfigInfoResponse
    def DnsIpAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EoeConfigInfoResponse
    def DnsIpAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EoeConfigInfoResponse
    def DnsIpAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EoeConfigInfoResponse
    def DnsIpAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    #DNS name
    # EoeConfigInfoResponse
    def DnsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EoeConfigInfoResponseStart(builder): builder.StartObject(6)
def Start(builder):
    return EoeConfigInfoResponseStart(builder)
def EoeConfigInfoResponseAddMacAddress(builder, macAddress): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(macAddress), 0)
def AddMacAddress(builder, macAddress):
    return EoeConfigInfoResponseAddMacAddress(builder, macAddress)
def EoeConfigInfoResponseStartMacAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMacAddressVector(builder, numElems):
    return EoeConfigInfoResponseStartMacAddressVector(builder, numElems)
def EoeConfigInfoResponseAddIpAddress(builder, ipAddress): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ipAddress), 0)
def AddIpAddress(builder, ipAddress):
    return EoeConfigInfoResponseAddIpAddress(builder, ipAddress)
def EoeConfigInfoResponseStartIpAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartIpAddressVector(builder, numElems):
    return EoeConfigInfoResponseStartIpAddressVector(builder, numElems)
def EoeConfigInfoResponseAddSubnetMask(builder, subnetMask): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subnetMask), 0)
def AddSubnetMask(builder, subnetMask):
    return EoeConfigInfoResponseAddSubnetMask(builder, subnetMask)
def EoeConfigInfoResponseStartSubnetMaskVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartSubnetMaskVector(builder, numElems):
    return EoeConfigInfoResponseStartSubnetMaskVector(builder, numElems)
def EoeConfigInfoResponseAddDefaultGateway(builder, defaultGateway): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defaultGateway), 0)
def AddDefaultGateway(builder, defaultGateway):
    return EoeConfigInfoResponseAddDefaultGateway(builder, defaultGateway)
def EoeConfigInfoResponseStartDefaultGatewayVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDefaultGatewayVector(builder, numElems):
    return EoeConfigInfoResponseStartDefaultGatewayVector(builder, numElems)
def EoeConfigInfoResponseAddDnsIpAddress(builder, dnsIpAddress): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dnsIpAddress), 0)
def AddDnsIpAddress(builder, dnsIpAddress):
    return EoeConfigInfoResponseAddDnsIpAddress(builder, dnsIpAddress)
def EoeConfigInfoResponseStartDnsIpAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDnsIpAddressVector(builder, numElems):
    return EoeConfigInfoResponseStartDnsIpAddressVector(builder, numElems)
def EoeConfigInfoResponseAddDnsName(builder, dnsName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dnsName), 0)
def AddDnsName(builder, dnsName):
    return EoeConfigInfoResponseAddDnsName(builder, dnsName)
def EoeConfigInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return EoeConfigInfoResponseEnd(builder)
try:
    from typing import List
except:
    pass

class EoeConfigInfoResponseT(object):

    # EoeConfigInfoResponseT
    def __init__(self):
        self.macAddress = None  # type: List[int]
        self.ipAddress = None  # type: List[int]
        self.subnetMask = None  # type: List[int]
        self.defaultGateway = None  # type: List[int]
        self.dnsIpAddress = None  # type: List[int]
        self.dnsName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eoeConfigInfoResponse = EoeConfigInfoResponse()
        eoeConfigInfoResponse.Init(buf, pos)
        return cls.InitFromObj(eoeConfigInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, eoeConfigInfoResponse):
        x = EoeConfigInfoResponseT()
        x._UnPack(eoeConfigInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.macAddress == other.macAddress and \
            self.ipAddress == other.ipAddress and \
            self.subnetMask == other.subnetMask and \
            self.defaultGateway == other.defaultGateway and \
            self.dnsIpAddress == other.dnsIpAddress and \
            self.dnsName == other.dnsName

    # EoeConfigInfoResponseT
    def _UnPack(self, eoeConfigInfoResponse):
        if eoeConfigInfoResponse is None:
            return
        if not eoeConfigInfoResponse.MacAddressIsNone():
            if np is None:
                self.macAddress = []
                for i in range(eoeConfigInfoResponse.MacAddressLength()):
                    self.macAddress.append(eoeConfigInfoResponse.MacAddress(i))
            else:
                self.macAddress = eoeConfigInfoResponse.MacAddressAsNumpy()
        if not eoeConfigInfoResponse.IpAddressIsNone():
            if np is None:
                self.ipAddress = []
                for i in range(eoeConfigInfoResponse.IpAddressLength()):
                    self.ipAddress.append(eoeConfigInfoResponse.IpAddress(i))
            else:
                self.ipAddress = eoeConfigInfoResponse.IpAddressAsNumpy()
        if not eoeConfigInfoResponse.SubnetMaskIsNone():
            if np is None:
                self.subnetMask = []
                for i in range(eoeConfigInfoResponse.SubnetMaskLength()):
                    self.subnetMask.append(eoeConfigInfoResponse.SubnetMask(i))
            else:
                self.subnetMask = eoeConfigInfoResponse.SubnetMaskAsNumpy()
        if not eoeConfigInfoResponse.DefaultGatewayIsNone():
            if np is None:
                self.defaultGateway = []
                for i in range(eoeConfigInfoResponse.DefaultGatewayLength()):
                    self.defaultGateway.append(eoeConfigInfoResponse.DefaultGateway(i))
            else:
                self.defaultGateway = eoeConfigInfoResponse.DefaultGatewayAsNumpy()
        if not eoeConfigInfoResponse.DnsIpAddressIsNone():
            if np is None:
                self.dnsIpAddress = []
                for i in range(eoeConfigInfoResponse.DnsIpAddressLength()):
                    self.dnsIpAddress.append(eoeConfigInfoResponse.DnsIpAddress(i))
            else:
                self.dnsIpAddress = eoeConfigInfoResponse.DnsIpAddressAsNumpy()
        self.dnsName = eoeConfigInfoResponse.DnsName()

    # EoeConfigInfoResponseT
    def Pack(self, builder):
        if self.macAddress is not None:
            if np is not None and type(self.macAddress) is np.ndarray:
                macAddress = builder.CreateNumpyVector(self.macAddress)
            else:
                EoeConfigInfoResponseStartMacAddressVector(builder, len(self.macAddress))
                for i in reversed(range(len(self.macAddress))):
                    builder.PrependUint8(self.macAddress[i])
                macAddress = builder.EndVector()
        if self.ipAddress is not None:
            if np is not None and type(self.ipAddress) is np.ndarray:
                ipAddress = builder.CreateNumpyVector(self.ipAddress)
            else:
                EoeConfigInfoResponseStartIpAddressVector(builder, len(self.ipAddress))
                for i in reversed(range(len(self.ipAddress))):
                    builder.PrependUint8(self.ipAddress[i])
                ipAddress = builder.EndVector()
        if self.subnetMask is not None:
            if np is not None and type(self.subnetMask) is np.ndarray:
                subnetMask = builder.CreateNumpyVector(self.subnetMask)
            else:
                EoeConfigInfoResponseStartSubnetMaskVector(builder, len(self.subnetMask))
                for i in reversed(range(len(self.subnetMask))):
                    builder.PrependUint8(self.subnetMask[i])
                subnetMask = builder.EndVector()
        if self.defaultGateway is not None:
            if np is not None and type(self.defaultGateway) is np.ndarray:
                defaultGateway = builder.CreateNumpyVector(self.defaultGateway)
            else:
                EoeConfigInfoResponseStartDefaultGatewayVector(builder, len(self.defaultGateway))
                for i in reversed(range(len(self.defaultGateway))):
                    builder.PrependUint8(self.defaultGateway[i])
                defaultGateway = builder.EndVector()
        if self.dnsIpAddress is not None:
            if np is not None and type(self.dnsIpAddress) is np.ndarray:
                dnsIpAddress = builder.CreateNumpyVector(self.dnsIpAddress)
            else:
                EoeConfigInfoResponseStartDnsIpAddressVector(builder, len(self.dnsIpAddress))
                for i in reversed(range(len(self.dnsIpAddress))):
                    builder.PrependUint8(self.dnsIpAddress[i])
                dnsIpAddress = builder.EndVector()
        if self.dnsName is not None:
            dnsName = builder.CreateString(self.dnsName)
        EoeConfigInfoResponseStart(builder)
        if self.macAddress is not None:
            EoeConfigInfoResponseAddMacAddress(builder, macAddress)
        if self.ipAddress is not None:
            EoeConfigInfoResponseAddIpAddress(builder, ipAddress)
        if self.subnetMask is not None:
            EoeConfigInfoResponseAddSubnetMask(builder, subnetMask)
        if self.defaultGateway is not None:
            EoeConfigInfoResponseAddDefaultGateway(builder, defaultGateway)
        if self.dnsIpAddress is not None:
            EoeConfigInfoResponseAddDnsIpAddress(builder, dnsIpAddress)
        if self.dnsName is not None:
            EoeConfigInfoResponseAddDnsName(builder, dnsName)
        eoeConfigInfoResponse = EoeConfigInfoResponseEnd(builder)
        return eoeConfigInfoResponse
