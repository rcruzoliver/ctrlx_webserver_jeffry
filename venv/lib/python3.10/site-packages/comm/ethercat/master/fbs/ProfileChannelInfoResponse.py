# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Profile channel info response
class ProfileChannelInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProfileChannelInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProfileChannelInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProfileChannelInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Profile number of this device, e.g. 5001 for Modular Device Profile
    # ProfileChannelInfoResponse
    def ProfileNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Additional profile info number of this channel, e.g. Channel Profile for Encoders
    # ProfileChannelInfoResponse
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Displayed name of this channel, e.g. Encoder 1
    # ProfileChannelInfoResponse
    def DisplayName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ProfileChannelInfoResponseStart(builder): builder.StartObject(3)
def Start(builder):
    return ProfileChannelInfoResponseStart(builder)
def ProfileChannelInfoResponseAddProfileNo(builder, profileNo): builder.PrependUint16Slot(0, profileNo, 0)
def AddProfileNo(builder, profileNo):
    return ProfileChannelInfoResponseAddProfileNo(builder, profileNo)
def ProfileChannelInfoResponseAddAddInfo(builder, addInfo): builder.PrependUint16Slot(1, addInfo, 0)
def AddAddInfo(builder, addInfo):
    return ProfileChannelInfoResponseAddAddInfo(builder, addInfo)
def ProfileChannelInfoResponseAddDisplayName(builder, displayName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(displayName), 0)
def AddDisplayName(builder, displayName):
    return ProfileChannelInfoResponseAddDisplayName(builder, displayName)
def ProfileChannelInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return ProfileChannelInfoResponseEnd(builder)

class ProfileChannelInfoResponseT(object):

    # ProfileChannelInfoResponseT
    def __init__(self):
        self.profileNo = 0  # type: int
        self.addInfo = 0  # type: int
        self.displayName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileChannelInfoResponse = ProfileChannelInfoResponse()
        profileChannelInfoResponse.Init(buf, pos)
        return cls.InitFromObj(profileChannelInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, profileChannelInfoResponse):
        x = ProfileChannelInfoResponseT()
        x._UnPack(profileChannelInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.profileNo == other.profileNo and \
            self.addInfo == other.addInfo and \
            self.displayName == other.displayName

    # ProfileChannelInfoResponseT
    def _UnPack(self, profileChannelInfoResponse):
        if profileChannelInfoResponse is None:
            return
        self.profileNo = profileChannelInfoResponse.ProfileNo()
        self.addInfo = profileChannelInfoResponse.AddInfo()
        self.displayName = profileChannelInfoResponse.DisplayName()

    # ProfileChannelInfoResponseT
    def Pack(self, builder):
        if self.displayName is not None:
            displayName = builder.CreateString(self.displayName)
        ProfileChannelInfoResponseStart(builder)
        ProfileChannelInfoResponseAddProfileNo(builder, self.profileNo)
        ProfileChannelInfoResponseAddAddInfo(builder, self.addInfo)
        if self.displayName is not None:
            ProfileChannelInfoResponseAddDisplayName(builder, displayName)
        profileChannelInfoResponse = ProfileChannelInfoResponseEnd(builder)
        return profileChannelInfoResponse
