# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Address mapping entry
class AddressMappingEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddressMappingEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAddressMappingEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AddressMappingEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Type and value to address a specific slave
    # AddressMappingEntry
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.AddressedRequest import AddressedRequest
            obj = AddressedRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Slave name as written in configuration
    # AddressMappingEntry
    def SlaveName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AddressMappingEntryStart(builder): builder.StartObject(2)
def Start(builder):
    return AddressMappingEntryStart(builder)
def AddressMappingEntryAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return AddressMappingEntryAddAddress(builder, address)
def AddressMappingEntryAddSlaveName(builder, slaveName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(slaveName), 0)
def AddSlaveName(builder, slaveName):
    return AddressMappingEntryAddSlaveName(builder, slaveName)
def AddressMappingEntryEnd(builder): return builder.EndObject()
def End(builder):
    return AddressMappingEntryEnd(builder)
import comm.ethercat.master.fbs.AddressedRequest
try:
    from typing import Optional
except:
    pass

class AddressMappingEntryT(object):

    # AddressMappingEntryT
    def __init__(self):
        self.address = None  # type: Optional[comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT]
        self.slaveName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        addressMappingEntry = AddressMappingEntry()
        addressMappingEntry.Init(buf, pos)
        return cls.InitFromObj(addressMappingEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, addressMappingEntry):
        x = AddressMappingEntryT()
        x._UnPack(addressMappingEntry)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.slaveName == other.slaveName

    # AddressMappingEntryT
    def _UnPack(self, addressMappingEntry):
        if addressMappingEntry is None:
            return
        if addressMappingEntry.Address() is not None:
            self.address = comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT.InitFromObj(addressMappingEntry.Address())
        self.slaveName = addressMappingEntry.SlaveName()

    # AddressMappingEntryT
    def Pack(self, builder):
        if self.address is not None:
            address = self.address.Pack(builder)
        if self.slaveName is not None:
            slaveName = builder.CreateString(self.slaveName)
        AddressMappingEntryStart(builder)
        if self.address is not None:
            AddressMappingEntryAddAddress(builder, address)
        if self.slaveName is not None:
            AddressMappingEntryAddSlaveName(builder, slaveName)
        addressMappingEntry = AddressMappingEntryEnd(builder)
        return addressMappingEntry
