# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave state request
class SlaveStateRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveStateRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveStateRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveStateRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: 
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # SlaveStateRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType.
    # SlaveStateRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Request slave state.
    # SlaveStateRequest
    def NewState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def SlaveStateRequestStart(builder): builder.StartObject(3)
def Start(builder):
    return SlaveStateRequestStart(builder)
def SlaveStateRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return SlaveStateRequestAddAddressType(builder, addressType)
def SlaveStateRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return SlaveStateRequestAddAddress(builder, address)
def SlaveStateRequestAddNewState(builder, newState): builder.PrependUint16Slot(2, newState, 0)
def AddNewState(builder, newState):
    return SlaveStateRequestAddNewState(builder, newState)
def SlaveStateRequestEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveStateRequestEnd(builder)

class SlaveStateRequestT(object):

    # SlaveStateRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.newState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveStateRequest = SlaveStateRequest()
        slaveStateRequest.Init(buf, pos)
        return cls.InitFromObj(slaveStateRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveStateRequest):
        x = SlaveStateRequestT()
        x._UnPack(slaveStateRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.newState == other.newState

    # SlaveStateRequestT
    def _UnPack(self, slaveStateRequest):
        if slaveStateRequest is None:
            return
        self.addressType = slaveStateRequest.AddressType()
        self.address = slaveStateRequest.Address()
        self.newState = slaveStateRequest.NewState()

    # SlaveStateRequestT
    def Pack(self, builder):
        SlaveStateRequestStart(builder)
        SlaveStateRequestAddAddressType(builder, self.addressType)
        SlaveStateRequestAddAddress(builder, self.address)
        SlaveStateRequestAddNewState(builder, self.newState)
        slaveStateRequest = SlaveStateRequestEnd(builder)
        return slaveStateRequest
