# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Bus load statistic counters
class BusLoadStatisticCountersResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BusLoadStatisticCountersResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBusLoadStatisticCountersResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BusLoadStatisticCountersResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Transmitted bytes per second
    # BusLoadStatisticCountersResponse
    def TxBytesPerSecond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.MinActMaxValues import MinActMaxValues
            obj = MinActMaxValues()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Transmitted bytes per cycle
    # BusLoadStatisticCountersResponse
    def TxBytesPerCycle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.MinActMaxValues import MinActMaxValues
            obj = MinActMaxValues()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BusLoadStatisticCountersResponseStart(builder): builder.StartObject(2)
def Start(builder):
    return BusLoadStatisticCountersResponseStart(builder)
def BusLoadStatisticCountersResponseAddTxBytesPerSecond(builder, txBytesPerSecond): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(txBytesPerSecond), 0)
def AddTxBytesPerSecond(builder, txBytesPerSecond):
    return BusLoadStatisticCountersResponseAddTxBytesPerSecond(builder, txBytesPerSecond)
def BusLoadStatisticCountersResponseAddTxBytesPerCycle(builder, txBytesPerCycle): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(txBytesPerCycle), 0)
def AddTxBytesPerCycle(builder, txBytesPerCycle):
    return BusLoadStatisticCountersResponseAddTxBytesPerCycle(builder, txBytesPerCycle)
def BusLoadStatisticCountersResponseEnd(builder): return builder.EndObject()
def End(builder):
    return BusLoadStatisticCountersResponseEnd(builder)
import comm.ethercat.master.fbs.MinActMaxValues
try:
    from typing import Optional
except:
    pass

class BusLoadStatisticCountersResponseT(object):

    # BusLoadStatisticCountersResponseT
    def __init__(self):
        self.txBytesPerSecond = None  # type: Optional[comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT]
        self.txBytesPerCycle = None  # type: Optional[comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        busLoadStatisticCountersResponse = BusLoadStatisticCountersResponse()
        busLoadStatisticCountersResponse.Init(buf, pos)
        return cls.InitFromObj(busLoadStatisticCountersResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, busLoadStatisticCountersResponse):
        x = BusLoadStatisticCountersResponseT()
        x._UnPack(busLoadStatisticCountersResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.txBytesPerSecond == other.txBytesPerSecond and \
            self.txBytesPerCycle == other.txBytesPerCycle

    # BusLoadStatisticCountersResponseT
    def _UnPack(self, busLoadStatisticCountersResponse):
        if busLoadStatisticCountersResponse is None:
            return
        if busLoadStatisticCountersResponse.TxBytesPerSecond() is not None:
            self.txBytesPerSecond = comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT.InitFromObj(busLoadStatisticCountersResponse.TxBytesPerSecond())
        if busLoadStatisticCountersResponse.TxBytesPerCycle() is not None:
            self.txBytesPerCycle = comm.ethercat.master.fbs.MinActMaxValues.MinActMaxValuesT.InitFromObj(busLoadStatisticCountersResponse.TxBytesPerCycle())

    # BusLoadStatisticCountersResponseT
    def Pack(self, builder):
        BusLoadStatisticCountersResponseStart(builder)
        if self.txBytesPerSecond is not None:
            txBytesPerSecond = self.txBytesPerSecond.Pack(builder)
            BusLoadStatisticCountersResponseAddTxBytesPerSecond(builder, txBytesPerSecond)
        if self.txBytesPerCycle is not None:
            txBytesPerCycle = self.txBytesPerCycle.Pack(builder)
            BusLoadStatisticCountersResponseAddTxBytesPerCycle(builder, txBytesPerCycle)
        busLoadStatisticCountersResponse = BusLoadStatisticCountersResponseEnd(builder)
        return busLoadStatisticCountersResponse
