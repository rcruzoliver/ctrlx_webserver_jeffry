# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#EtherCAT memory info
class EthercatMemoryInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # EthercatMemoryInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Memory offset
    # EthercatMemoryInfo
    def Offset(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    #Memory size
    # EthercatMemoryInfo
    def Size(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateEthercatMemoryInfo(builder, offset, size):
    builder.Prep(4, 8)
    builder.PrependUint32(size)
    builder.PrependUint32(offset)
    return builder.Offset()


class EthercatMemoryInfoT(object):

    # EthercatMemoryInfoT
    def __init__(self):
        self.offset = 0  # type: int
        self.size = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ethercatMemoryInfo = EthercatMemoryInfo()
        ethercatMemoryInfo.Init(buf, pos)
        return cls.InitFromObj(ethercatMemoryInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ethercatMemoryInfo):
        x = EthercatMemoryInfoT()
        x._UnPack(ethercatMemoryInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.offset == other.offset and \
            self.size == other.size

    # EthercatMemoryInfoT
    def _UnPack(self, ethercatMemoryInfo):
        if ethercatMemoryInfo is None:
            return
        self.offset = ethercatMemoryInfo.Offset()
        self.size = ethercatMemoryInfo.Size()

    # EthercatMemoryInfoT
    def Pack(self, builder):
        return CreateEthercatMemoryInfo(builder, self.offset, self.size)
