# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This node delivers bus statistic data from the EtherCAT Master.
class FrameStatisticCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameStatisticCounters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrameStatisticCounters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FrameStatisticCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameStatisticCounters
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.FrameStatisticCountersResponse import FrameStatisticCountersResponse
            obj = FrameStatisticCountersResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FrameStatisticCountersStart(builder): builder.StartObject(1)
def Start(builder):
    return FrameStatisticCountersStart(builder)
def FrameStatisticCountersAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AddResponse(builder, response):
    return FrameStatisticCountersAddResponse(builder, response)
def FrameStatisticCountersEnd(builder): return builder.EndObject()
def End(builder):
    return FrameStatisticCountersEnd(builder)
import comm.ethercat.master.fbs.FrameStatisticCountersResponse
try:
    from typing import Optional
except:
    pass

class FrameStatisticCountersT(object):

    # FrameStatisticCountersT
    def __init__(self):
        self.response = None  # type: Optional[comm.ethercat.master.fbs.FrameStatisticCountersResponse.FrameStatisticCountersResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        frameStatisticCounters = FrameStatisticCounters()
        frameStatisticCounters.Init(buf, pos)
        return cls.InitFromObj(frameStatisticCounters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, frameStatisticCounters):
        x = FrameStatisticCountersT()
        x._UnPack(frameStatisticCounters)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.response == other.response

    # FrameStatisticCountersT
    def _UnPack(self, frameStatisticCounters):
        if frameStatisticCounters is None:
            return
        if frameStatisticCounters.Response() is not None:
            self.response = comm.ethercat.master.fbs.FrameStatisticCountersResponse.FrameStatisticCountersResponseT.InitFromObj(frameStatisticCounters.Response())

    # FrameStatisticCountersT
    def Pack(self, builder):
        if self.response is not None:
            response = self.response.Pack(builder)
        FrameStatisticCountersStart(builder)
        if self.response is not None:
            FrameStatisticCountersAddResponse(builder, response)
        frameStatisticCounters = FrameStatisticCountersEnd(builder)
        return frameStatisticCounters
