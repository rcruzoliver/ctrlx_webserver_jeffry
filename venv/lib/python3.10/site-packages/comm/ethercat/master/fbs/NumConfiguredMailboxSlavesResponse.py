# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Number of configured mailbox slaves response
class NumConfiguredMailboxSlavesResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NumConfiguredMailboxSlavesResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNumConfiguredMailboxSlavesResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NumConfiguredMailboxSlavesResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Number of configured mailbox slaves
    # NumConfiguredMailboxSlavesResponse
    def NumSlaves(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def NumConfiguredMailboxSlavesResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return NumConfiguredMailboxSlavesResponseStart(builder)
def NumConfiguredMailboxSlavesResponseAddNumSlaves(builder, numSlaves): builder.PrependUint32Slot(0, numSlaves, 0)
def AddNumSlaves(builder, numSlaves):
    return NumConfiguredMailboxSlavesResponseAddNumSlaves(builder, numSlaves)
def NumConfiguredMailboxSlavesResponseEnd(builder): return builder.EndObject()
def End(builder):
    return NumConfiguredMailboxSlavesResponseEnd(builder)

class NumConfiguredMailboxSlavesResponseT(object):

    # NumConfiguredMailboxSlavesResponseT
    def __init__(self):
        self.numSlaves = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        numConfiguredMailboxSlavesResponse = NumConfiguredMailboxSlavesResponse()
        numConfiguredMailboxSlavesResponse.Init(buf, pos)
        return cls.InitFromObj(numConfiguredMailboxSlavesResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, numConfiguredMailboxSlavesResponse):
        x = NumConfiguredMailboxSlavesResponseT()
        x._UnPack(numConfiguredMailboxSlavesResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.numSlaves == other.numSlaves

    # NumConfiguredMailboxSlavesResponseT
    def _UnPack(self, numConfiguredMailboxSlavesResponse):
        if numConfiguredMailboxSlavesResponse is None:
            return
        self.numSlaves = numConfiguredMailboxSlavesResponse.NumSlaves()

    # NumConfiguredMailboxSlavesResponseT
    def Pack(self, builder):
        NumConfiguredMailboxSlavesResponseStart(builder)
        NumConfiguredMailboxSlavesResponseAddNumSlaves(builder, self.numSlaves)
        numConfiguredMailboxSlavesResponse = NumConfiguredMailboxSlavesResponseEnd(builder)
        return numConfiguredMailboxSlavesResponse
