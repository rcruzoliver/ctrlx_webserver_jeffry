# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave Address Mapping Response
class SlaveAddressMappingResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveAddressMappingResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveAddressMappingResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveAddressMappingResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #List of found Slaves
    # SlaveAddressMappingResponse
    def AddressMappingEntryList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.AddressMappingEntry import AddressMappingEntry
            obj = AddressMappingEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveAddressMappingResponse
    def AddressMappingEntryListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveAddressMappingResponse
    def AddressMappingEntryListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SlaveAddressMappingResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return SlaveAddressMappingResponseStart(builder)
def SlaveAddressMappingResponseAddAddressMappingEntryList(builder, addressMappingEntryList): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(addressMappingEntryList), 0)
def AddAddressMappingEntryList(builder, addressMappingEntryList):
    return SlaveAddressMappingResponseAddAddressMappingEntryList(builder, addressMappingEntryList)
def SlaveAddressMappingResponseStartAddressMappingEntryListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAddressMappingEntryListVector(builder, numElems):
    return SlaveAddressMappingResponseStartAddressMappingEntryListVector(builder, numElems)
def SlaveAddressMappingResponseEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveAddressMappingResponseEnd(builder)
import comm.ethercat.master.fbs.AddressMappingEntry
try:
    from typing import List
except:
    pass

class SlaveAddressMappingResponseT(object):

    # SlaveAddressMappingResponseT
    def __init__(self):
        self.addressMappingEntryList = None  # type: List[comm.ethercat.master.fbs.AddressMappingEntry.AddressMappingEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveAddressMappingResponse = SlaveAddressMappingResponse()
        slaveAddressMappingResponse.Init(buf, pos)
        return cls.InitFromObj(slaveAddressMappingResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveAddressMappingResponse):
        x = SlaveAddressMappingResponseT()
        x._UnPack(slaveAddressMappingResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressMappingEntryList == other.addressMappingEntryList

    # SlaveAddressMappingResponseT
    def _UnPack(self, slaveAddressMappingResponse):
        if slaveAddressMappingResponse is None:
            return
        if not slaveAddressMappingResponse.AddressMappingEntryListIsNone():
            self.addressMappingEntryList = []
            for i in range(slaveAddressMappingResponse.AddressMappingEntryListLength()):
                if slaveAddressMappingResponse.AddressMappingEntryList(i) is None:
                    self.addressMappingEntryList.append(None)
                else:
                    addressMappingEntry_ = comm.ethercat.master.fbs.AddressMappingEntry.AddressMappingEntryT.InitFromObj(slaveAddressMappingResponse.AddressMappingEntryList(i))
                    self.addressMappingEntryList.append(addressMappingEntry_)

    # SlaveAddressMappingResponseT
    def Pack(self, builder):
        if self.addressMappingEntryList is not None:
            addressMappingEntryListlist = []
            for i in range(len(self.addressMappingEntryList)):
                addressMappingEntryListlist.append(self.addressMappingEntryList[i].Pack(builder))
            SlaveAddressMappingResponseStartAddressMappingEntryListVector(builder, len(self.addressMappingEntryList))
            for i in reversed(range(len(self.addressMappingEntryList))):
                builder.PrependUOffsetTRelative(addressMappingEntryListlist[i])
            addressMappingEntryList = builder.EndVector()
        SlaveAddressMappingResponseStart(builder)
        if self.addressMappingEntryList is not None:
            SlaveAddressMappingResponseAddAddressMappingEntryList(builder, addressMappingEntryList)
        slaveAddressMappingResponse = SlaveAddressMappingResponseEnd(builder)
        return slaveAddressMappingResponse
