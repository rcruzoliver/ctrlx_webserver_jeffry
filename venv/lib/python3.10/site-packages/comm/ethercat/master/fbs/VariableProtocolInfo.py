# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Variable protocol info
#Only the protocol which is supported by the slave is present 
class VariableProtocolInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VariableProtocolInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVariableProtocolInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VariableProtocolInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #CoE variable info
    # VariableProtocolInfo
    def Coe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.CoeVariableInfo import CoeVariableInfo
            obj = CoeVariableInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #SoE variable info
    # VariableProtocolInfo
    def Soe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.SoeVariableInfo import SoeVariableInfo
            obj = SoeVariableInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VariableProtocolInfoStart(builder): builder.StartObject(2)
def Start(builder):
    return VariableProtocolInfoStart(builder)
def VariableProtocolInfoAddCoe(builder, coe): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(coe), 0)
def AddCoe(builder, coe):
    return VariableProtocolInfoAddCoe(builder, coe)
def VariableProtocolInfoAddSoe(builder, soe): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(soe), 0)
def AddSoe(builder, soe):
    return VariableProtocolInfoAddSoe(builder, soe)
def VariableProtocolInfoEnd(builder): return builder.EndObject()
def End(builder):
    return VariableProtocolInfoEnd(builder)
import comm.ethercat.master.fbs.CoeVariableInfo
import comm.ethercat.master.fbs.SoeVariableInfo
try:
    from typing import Optional
except:
    pass

class VariableProtocolInfoT(object):

    # VariableProtocolInfoT
    def __init__(self):
        self.coe = None  # type: Optional[comm.ethercat.master.fbs.CoeVariableInfo.CoeVariableInfoT]
        self.soe = None  # type: Optional[comm.ethercat.master.fbs.SoeVariableInfo.SoeVariableInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        variableProtocolInfo = VariableProtocolInfo()
        variableProtocolInfo.Init(buf, pos)
        return cls.InitFromObj(variableProtocolInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, variableProtocolInfo):
        x = VariableProtocolInfoT()
        x._UnPack(variableProtocolInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.coe == other.coe and \
            self.soe == other.soe

    # VariableProtocolInfoT
    def _UnPack(self, variableProtocolInfo):
        if variableProtocolInfo is None:
            return
        if variableProtocolInfo.Coe() is not None:
            self.coe = comm.ethercat.master.fbs.CoeVariableInfo.CoeVariableInfoT.InitFromObj(variableProtocolInfo.Coe())
        if variableProtocolInfo.Soe() is not None:
            self.soe = comm.ethercat.master.fbs.SoeVariableInfo.SoeVariableInfoT.InitFromObj(variableProtocolInfo.Soe())

    # VariableProtocolInfoT
    def Pack(self, builder):
        if self.coe is not None:
            coe = self.coe.Pack(builder)
        if self.soe is not None:
            soe = self.soe.Pack(builder)
        VariableProtocolInfoStart(builder)
        if self.coe is not None:
            VariableProtocolInfoAddCoe(builder, coe)
        if self.soe is not None:
            VariableProtocolInfoAddSoe(builder, soe)
        variableProtocolInfo = VariableProtocolInfoEnd(builder)
        return variableProtocolInfo
