# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave register request 
class SlaveRegisterRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveRegisterRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveRegisterRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveRegisterRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: 
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # SlaveRegisterRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType.
    # SlaveRegisterRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Register offset in bytes e.g. 0x0120 for AL Control register 
    # SlaveRegisterRequest
    def RegisterOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Data buffer
    # SlaveRegisterRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SlaveRegisterRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SlaveRegisterRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveRegisterRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    #Max length of data in bytes
    # SlaveRegisterRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SlaveRegisterRequestStart(builder): builder.StartObject(5)
def Start(builder):
    return SlaveRegisterRequestStart(builder)
def SlaveRegisterRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return SlaveRegisterRequestAddAddressType(builder, addressType)
def SlaveRegisterRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return SlaveRegisterRequestAddAddress(builder, address)
def SlaveRegisterRequestAddRegisterOffset(builder, registerOffset): builder.PrependUint16Slot(2, registerOffset, 0)
def AddRegisterOffset(builder, registerOffset):
    return SlaveRegisterRequestAddRegisterOffset(builder, registerOffset)
def SlaveRegisterRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return SlaveRegisterRequestAddData(builder, data)
def SlaveRegisterRequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return SlaveRegisterRequestStartDataVector(builder, numElems)
def SlaveRegisterRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(4, maxLength, 0)
def AddMaxLength(builder, maxLength):
    return SlaveRegisterRequestAddMaxLength(builder, maxLength)
def SlaveRegisterRequestEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveRegisterRequestEnd(builder)
try:
    from typing import List
except:
    pass

class SlaveRegisterRequestT(object):

    # SlaveRegisterRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.registerOffset = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveRegisterRequest = SlaveRegisterRequest()
        slaveRegisterRequest.Init(buf, pos)
        return cls.InitFromObj(slaveRegisterRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveRegisterRequest):
        x = SlaveRegisterRequestT()
        x._UnPack(slaveRegisterRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.registerOffset == other.registerOffset and \
            self.data == other.data and \
            self.maxLength == other.maxLength

    # SlaveRegisterRequestT
    def _UnPack(self, slaveRegisterRequest):
        if slaveRegisterRequest is None:
            return
        self.addressType = slaveRegisterRequest.AddressType()
        self.address = slaveRegisterRequest.Address()
        self.registerOffset = slaveRegisterRequest.RegisterOffset()
        if not slaveRegisterRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(slaveRegisterRequest.DataLength()):
                    self.data.append(slaveRegisterRequest.Data(i))
            else:
                self.data = slaveRegisterRequest.DataAsNumpy()
        self.maxLength = slaveRegisterRequest.MaxLength()

    # SlaveRegisterRequestT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                SlaveRegisterRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        SlaveRegisterRequestStart(builder)
        SlaveRegisterRequestAddAddressType(builder, self.addressType)
        SlaveRegisterRequestAddAddress(builder, self.address)
        SlaveRegisterRequestAddRegisterOffset(builder, self.registerOffset)
        if self.data is not None:
            SlaveRegisterRequestAddData(builder, data)
        SlaveRegisterRequestAddMaxLength(builder, self.maxLength)
        slaveRegisterRequest = SlaveRegisterRequestEnd(builder)
        return slaveRegisterRequest
