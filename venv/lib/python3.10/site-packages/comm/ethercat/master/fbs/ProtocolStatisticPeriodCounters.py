# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Protocol statistics period counters, since last restart/reset or last second
class ProtocolStatisticPeriodCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # ProtocolStatisticPeriodCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProtocolStatisticPeriodCounters
    def Total(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # ProtocolStatisticPeriodCounters
    def LastSecond(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 8)
        return obj


def CreateProtocolStatisticPeriodCounters(builder, total_numRequests, total_numBytes, lastSecond_numRequests, lastSecond_numBytes):
    builder.Prep(4, 16)
    builder.Prep(4, 8)
    builder.PrependUint32(lastSecond_numBytes)
    builder.PrependUint32(lastSecond_numRequests)
    builder.Prep(4, 8)
    builder.PrependUint32(total_numBytes)
    builder.PrependUint32(total_numRequests)
    return builder.Offset()

import comm.ethercat.master.fbs.ProtocolStatisticCounters
try:
    from typing import Optional
except:
    pass

class ProtocolStatisticPeriodCountersT(object):

    # ProtocolStatisticPeriodCountersT
    def __init__(self):
        self.total = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCountersT]
        self.lastSecond = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCountersT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        protocolStatisticPeriodCounters = ProtocolStatisticPeriodCounters()
        protocolStatisticPeriodCounters.Init(buf, pos)
        return cls.InitFromObj(protocolStatisticPeriodCounters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, protocolStatisticPeriodCounters):
        x = ProtocolStatisticPeriodCountersT()
        x._UnPack(protocolStatisticPeriodCounters)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.total == other.total and \
            self.lastSecond == other.lastSecond

    # ProtocolStatisticPeriodCountersT
    def _UnPack(self, protocolStatisticPeriodCounters):
        if protocolStatisticPeriodCounters is None:
            return
        if protocolStatisticPeriodCounters.Total(comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCounters()) is not None:
            self.total = comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCountersT.InitFromObj(protocolStatisticPeriodCounters.Total(comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCounters()))
        if protocolStatisticPeriodCounters.LastSecond(comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCounters()) is not None:
            self.lastSecond = comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCountersT.InitFromObj(protocolStatisticPeriodCounters.LastSecond(comm.ethercat.master.fbs.ProtocolStatisticCounters.ProtocolStatisticCounters()))

    # ProtocolStatisticPeriodCountersT
    def Pack(self, builder):
        return CreateProtocolStatisticPeriodCounters(builder, self.total.numRequests, self.total.numBytes, self.lastSecond.numRequests, self.lastSecond.numBytes)
