# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This node delivers a summary of diagnosis information from the EtherCAT Master.
class MasterState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MasterState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMasterState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MasterState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MasterState
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.MasterStateRequest import MasterStateRequest
            obj = MasterStateRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MasterState
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.MasterStateResponse import MasterStateResponse
            obj = MasterStateResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MasterStateStart(builder): builder.StartObject(2)
def Start(builder):
    return MasterStateStart(builder)
def MasterStateAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return MasterStateAddRequest(builder, request)
def MasterStateAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AddResponse(builder, response):
    return MasterStateAddResponse(builder, response)
def MasterStateEnd(builder): return builder.EndObject()
def End(builder):
    return MasterStateEnd(builder)
import comm.ethercat.master.fbs.MasterStateRequest
import comm.ethercat.master.fbs.MasterStateResponse
try:
    from typing import Optional
except:
    pass

class MasterStateT(object):

    # MasterStateT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.MasterStateRequest.MasterStateRequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.MasterStateResponse.MasterStateResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        masterState = MasterState()
        masterState.Init(buf, pos)
        return cls.InitFromObj(masterState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, masterState):
        x = MasterStateT()
        x._UnPack(masterState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request and \
            self.response == other.response

    # MasterStateT
    def _UnPack(self, masterState):
        if masterState is None:
            return
        if masterState.Request() is not None:
            self.request = comm.ethercat.master.fbs.MasterStateRequest.MasterStateRequestT.InitFromObj(masterState.Request())
        if masterState.Response() is not None:
            self.response = comm.ethercat.master.fbs.MasterStateResponse.MasterStateResponseT.InitFromObj(masterState.Response())

    # MasterStateT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        MasterStateStart(builder)
        if self.request is not None:
            MasterStateAddRequest(builder, request)
        if self.response is not None:
            MasterStateAddResponse(builder, response)
        masterState = MasterStateEnd(builder)
        return masterState
