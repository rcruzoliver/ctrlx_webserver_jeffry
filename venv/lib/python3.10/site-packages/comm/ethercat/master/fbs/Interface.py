# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Interface response
class Interface(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Interface()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInterface(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Interface
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Port name, e.g. as written on device
    # Interface
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Reserved for future use
    # Interface
    def Device(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Link layer driver
    # Interface
    def LinkLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Reserved for future use
    # Interface
    def CapabilityList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.Capability import Capability
            obj = Capability()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Interface
    def CapabilityListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interface
    def CapabilityListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def InterfaceStart(builder): builder.StartObject(4)
def Start(builder):
    return InterfaceStart(builder)
def InterfaceAddPort(builder, port): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(port), 0)
def AddPort(builder, port):
    return InterfaceAddPort(builder, port)
def InterfaceAddDevice(builder, device): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(device), 0)
def AddDevice(builder, device):
    return InterfaceAddDevice(builder, device)
def InterfaceAddLinkLayer(builder, linkLayer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linkLayer), 0)
def AddLinkLayer(builder, linkLayer):
    return InterfaceAddLinkLayer(builder, linkLayer)
def InterfaceAddCapabilityList(builder, capabilityList): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(capabilityList), 0)
def AddCapabilityList(builder, capabilityList):
    return InterfaceAddCapabilityList(builder, capabilityList)
def InterfaceStartCapabilityListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCapabilityListVector(builder, numElems):
    return InterfaceStartCapabilityListVector(builder, numElems)
def InterfaceEnd(builder): return builder.EndObject()
def End(builder):
    return InterfaceEnd(builder)
import comm.ethercat.master.fbs.Capability
try:
    from typing import List
except:
    pass

class InterfaceT(object):

    # InterfaceT
    def __init__(self):
        self.port = None  # type: str
        self.device = None  # type: str
        self.linkLayer = None  # type: str
        self.capabilityList = None  # type: List[comm.ethercat.master.fbs.Capability.CapabilityT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        interface = Interface()
        interface.Init(buf, pos)
        return cls.InitFromObj(interface)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, interface):
        x = InterfaceT()
        x._UnPack(interface)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.port == other.port and \
            self.device == other.device and \
            self.linkLayer == other.linkLayer and \
            self.capabilityList == other.capabilityList

    # InterfaceT
    def _UnPack(self, interface):
        if interface is None:
            return
        self.port = interface.Port()
        self.device = interface.Device()
        self.linkLayer = interface.LinkLayer()
        if not interface.CapabilityListIsNone():
            self.capabilityList = []
            for i in range(interface.CapabilityListLength()):
                if interface.CapabilityList(i) is None:
                    self.capabilityList.append(None)
                else:
                    capability_ = comm.ethercat.master.fbs.Capability.CapabilityT.InitFromObj(interface.CapabilityList(i))
                    self.capabilityList.append(capability_)

    # InterfaceT
    def Pack(self, builder):
        if self.port is not None:
            port = builder.CreateString(self.port)
        if self.device is not None:
            device = builder.CreateString(self.device)
        if self.linkLayer is not None:
            linkLayer = builder.CreateString(self.linkLayer)
        if self.capabilityList is not None:
            capabilityListlist = []
            for i in range(len(self.capabilityList)):
                capabilityListlist.append(self.capabilityList[i].Pack(builder))
            InterfaceStartCapabilityListVector(builder, len(self.capabilityList))
            for i in reversed(range(len(self.capabilityList))):
                builder.PrependUOffsetTRelative(capabilityListlist[i])
            capabilityList = builder.EndVector()
        InterfaceStart(builder)
        if self.port is not None:
            InterfaceAddPort(builder, port)
        if self.device is not None:
            InterfaceAddDevice(builder, device)
        if self.linkLayer is not None:
            InterfaceAddLinkLayer(builder, linkLayer)
        if self.capabilityList is not None:
            InterfaceAddCapabilityList(builder, capabilityList)
        interface = InterfaceEnd(builder)
        return interface
