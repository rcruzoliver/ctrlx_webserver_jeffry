# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Request a new EtherCAT-Master instance
class InstancesCreateRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InstancesCreateRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstancesCreateRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InstancesCreateRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Name of EtherCAT-Master instance 
    #Must be unique, non case sensitive
    #Must start with a letter, may contain numbers
    #May contain underscore (_), but not in sequence
    #May have up to 15 characters
    # InstancesCreateRequest
    def InstanceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Port name
    # InstancesCreateRequest
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Reserved for future use
    # InstancesCreateRequest
    def LinkLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Reserved for future use
    # InstancesCreateRequest
    def Arguments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def InstancesCreateRequestStart(builder): builder.StartObject(4)
def Start(builder):
    return InstancesCreateRequestStart(builder)
def InstancesCreateRequestAddInstanceName(builder, instanceName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instanceName), 0)
def AddInstanceName(builder, instanceName):
    return InstancesCreateRequestAddInstanceName(builder, instanceName)
def InstancesCreateRequestAddPort(builder, port): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(port), 0)
def AddPort(builder, port):
    return InstancesCreateRequestAddPort(builder, port)
def InstancesCreateRequestAddLinkLayer(builder, linkLayer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linkLayer), 0)
def AddLinkLayer(builder, linkLayer):
    return InstancesCreateRequestAddLinkLayer(builder, linkLayer)
def InstancesCreateRequestAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def AddArguments(builder, arguments):
    return InstancesCreateRequestAddArguments(builder, arguments)
def InstancesCreateRequestEnd(builder): return builder.EndObject()
def End(builder):
    return InstancesCreateRequestEnd(builder)

class InstancesCreateRequestT(object):

    # InstancesCreateRequestT
    def __init__(self):
        self.instanceName = None  # type: str
        self.port = None  # type: str
        self.linkLayer = None  # type: str
        self.arguments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        instancesCreateRequest = InstancesCreateRequest()
        instancesCreateRequest.Init(buf, pos)
        return cls.InitFromObj(instancesCreateRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, instancesCreateRequest):
        x = InstancesCreateRequestT()
        x._UnPack(instancesCreateRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.instanceName == other.instanceName and \
            self.port == other.port and \
            self.linkLayer == other.linkLayer and \
            self.arguments == other.arguments

    # InstancesCreateRequestT
    def _UnPack(self, instancesCreateRequest):
        if instancesCreateRequest is None:
            return
        self.instanceName = instancesCreateRequest.InstanceName()
        self.port = instancesCreateRequest.Port()
        self.linkLayer = instancesCreateRequest.LinkLayer()
        self.arguments = instancesCreateRequest.Arguments()

    # InstancesCreateRequestT
    def Pack(self, builder):
        if self.instanceName is not None:
            instanceName = builder.CreateString(self.instanceName)
        if self.port is not None:
            port = builder.CreateString(self.port)
        if self.linkLayer is not None:
            linkLayer = builder.CreateString(self.linkLayer)
        if self.arguments is not None:
            arguments = builder.CreateString(self.arguments)
        InstancesCreateRequestStart(builder)
        if self.instanceName is not None:
            InstancesCreateRequestAddInstanceName(builder, instanceName)
        if self.port is not None:
            InstancesCreateRequestAddPort(builder, port)
        if self.linkLayer is not None:
            InstancesCreateRequestAddLinkLayer(builder, linkLayer)
        if self.arguments is not None:
            InstancesCreateRequestAddArguments(builder, arguments)
        instancesCreateRequest = InstancesCreateRequestEnd(builder)
        return instancesCreateRequest
