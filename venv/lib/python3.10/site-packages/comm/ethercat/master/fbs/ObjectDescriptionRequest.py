# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Object description request
class ObjectDescriptionRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDescriptionRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectDescriptionRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectDescriptionRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: 
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # ObjectDescriptionRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType
    # ObjectDescriptionRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Object index
    # ObjectDescriptionRequest
    def ObjectIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Maximal length of response data in bytes
    # ObjectDescriptionRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ObjectDescriptionRequestStart(builder): builder.StartObject(4)
def Start(builder):
    return ObjectDescriptionRequestStart(builder)
def ObjectDescriptionRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return ObjectDescriptionRequestAddAddressType(builder, addressType)
def ObjectDescriptionRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return ObjectDescriptionRequestAddAddress(builder, address)
def ObjectDescriptionRequestAddObjectIndex(builder, objectIndex): builder.PrependUint16Slot(2, objectIndex, 0)
def AddObjectIndex(builder, objectIndex):
    return ObjectDescriptionRequestAddObjectIndex(builder, objectIndex)
def ObjectDescriptionRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(3, maxLength, 0)
def AddMaxLength(builder, maxLength):
    return ObjectDescriptionRequestAddMaxLength(builder, maxLength)
def ObjectDescriptionRequestEnd(builder): return builder.EndObject()
def End(builder):
    return ObjectDescriptionRequestEnd(builder)

class ObjectDescriptionRequestT(object):

    # ObjectDescriptionRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.objectIndex = 0  # type: int
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectDescriptionRequest = ObjectDescriptionRequest()
        objectDescriptionRequest.Init(buf, pos)
        return cls.InitFromObj(objectDescriptionRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, objectDescriptionRequest):
        x = ObjectDescriptionRequestT()
        x._UnPack(objectDescriptionRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.objectIndex == other.objectIndex and \
            self.maxLength == other.maxLength

    # ObjectDescriptionRequestT
    def _UnPack(self, objectDescriptionRequest):
        if objectDescriptionRequest is None:
            return
        self.addressType = objectDescriptionRequest.AddressType()
        self.address = objectDescriptionRequest.Address()
        self.objectIndex = objectDescriptionRequest.ObjectIndex()
        self.maxLength = objectDescriptionRequest.MaxLength()

    # ObjectDescriptionRequestT
    def Pack(self, builder):
        ObjectDescriptionRequestStart(builder)
        ObjectDescriptionRequestAddAddressType(builder, self.addressType)
        ObjectDescriptionRequestAddAddress(builder, self.address)
        ObjectDescriptionRequestAddObjectIndex(builder, self.objectIndex)
        ObjectDescriptionRequestAddMaxLength(builder, self.maxLength)
        objectDescriptionRequest = ObjectDescriptionRequestEnd(builder)
        return objectDescriptionRequest
