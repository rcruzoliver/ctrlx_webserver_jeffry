# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Distributed Clock online information
class DcOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DcOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDcOnlineInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DcOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Sync mode of Distributed Clock (DC)
    #freerun: slaves are not synchronized
    #dcmAuto: DC configuration automatic
    #dcmEnabled: DC enabled
    #dcmBusShift: DC bus shift
    #dcmMasterShift: DC master shift
    #dcmLinkLayerRefClock: DC link layer reference clock
    #unknown: Sync mode unknown
    # DcOnlineInfoResponse
    def SyncMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Cycle time in microseconds
    # DcOnlineInfoResponse
    def CycleTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Sync offset in nanoseconds
    # DcOnlineInfoResponse
    def SyncShiftTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DcOnlineInfoResponse
    def SyncWindowMonitoring(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #DC sync window in nanoseconds
    # DcOnlineInfoResponse
    def DeviationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Continuous delay compensation
    # DcOnlineInfoResponse
    def ContinuousDelayCompensation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #EtherCAT time in nanoseconds
    # DcOnlineInfoResponse
    def SystemTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    #Send offset in nanoseconds
    # DcOnlineInfoResponse
    def SendOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Sync offset in nanoseconds
    # DcOnlineInfoResponse
    def SyncOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Output shift time in nanoseconds
    # DcOnlineInfoResponse
    def OutputShiftTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def DcOnlineInfoResponseStart(builder): builder.StartObject(10)
def Start(builder):
    return DcOnlineInfoResponseStart(builder)
def DcOnlineInfoResponseAddSyncMode(builder, syncMode): builder.PrependUint32Slot(0, syncMode, 0)
def AddSyncMode(builder, syncMode):
    return DcOnlineInfoResponseAddSyncMode(builder, syncMode)
def DcOnlineInfoResponseAddCycleTime(builder, cycleTime): builder.PrependUint32Slot(1, cycleTime, 0)
def AddCycleTime(builder, cycleTime):
    return DcOnlineInfoResponseAddCycleTime(builder, cycleTime)
def DcOnlineInfoResponseAddSyncShiftTime(builder, syncShiftTime): builder.PrependUint32Slot(2, syncShiftTime, 0)
def AddSyncShiftTime(builder, syncShiftTime):
    return DcOnlineInfoResponseAddSyncShiftTime(builder, syncShiftTime)
def DcOnlineInfoResponseAddSyncWindowMonitoring(builder, syncWindowMonitoring): builder.PrependBoolSlot(3, syncWindowMonitoring, 0)
def AddSyncWindowMonitoring(builder, syncWindowMonitoring):
    return DcOnlineInfoResponseAddSyncWindowMonitoring(builder, syncWindowMonitoring)
def DcOnlineInfoResponseAddDeviationLimit(builder, deviationLimit): builder.PrependUint32Slot(4, deviationLimit, 0)
def AddDeviationLimit(builder, deviationLimit):
    return DcOnlineInfoResponseAddDeviationLimit(builder, deviationLimit)
def DcOnlineInfoResponseAddContinuousDelayCompensation(builder, continuousDelayCompensation): builder.PrependBoolSlot(5, continuousDelayCompensation, 0)
def AddContinuousDelayCompensation(builder, continuousDelayCompensation):
    return DcOnlineInfoResponseAddContinuousDelayCompensation(builder, continuousDelayCompensation)
def DcOnlineInfoResponseAddSystemTime(builder, systemTime): builder.PrependUint64Slot(6, systemTime, 0)
def AddSystemTime(builder, systemTime):
    return DcOnlineInfoResponseAddSystemTime(builder, systemTime)
def DcOnlineInfoResponseAddSendOffset(builder, sendOffset): builder.PrependUint32Slot(7, sendOffset, 0)
def AddSendOffset(builder, sendOffset):
    return DcOnlineInfoResponseAddSendOffset(builder, sendOffset)
def DcOnlineInfoResponseAddSyncOffset(builder, syncOffset): builder.PrependUint32Slot(8, syncOffset, 0)
def AddSyncOffset(builder, syncOffset):
    return DcOnlineInfoResponseAddSyncOffset(builder, syncOffset)
def DcOnlineInfoResponseAddOutputShiftTime(builder, outputShiftTime): builder.PrependUint32Slot(9, outputShiftTime, 0)
def AddOutputShiftTime(builder, outputShiftTime):
    return DcOnlineInfoResponseAddOutputShiftTime(builder, outputShiftTime)
def DcOnlineInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return DcOnlineInfoResponseEnd(builder)

class DcOnlineInfoResponseT(object):

    # DcOnlineInfoResponseT
    def __init__(self):
        self.syncMode = 0  # type: int
        self.cycleTime = 0  # type: int
        self.syncShiftTime = 0  # type: int
        self.syncWindowMonitoring = False  # type: bool
        self.deviationLimit = 0  # type: int
        self.continuousDelayCompensation = False  # type: bool
        self.systemTime = 0  # type: int
        self.sendOffset = 0  # type: int
        self.syncOffset = 0  # type: int
        self.outputShiftTime = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dcOnlineInfoResponse = DcOnlineInfoResponse()
        dcOnlineInfoResponse.Init(buf, pos)
        return cls.InitFromObj(dcOnlineInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dcOnlineInfoResponse):
        x = DcOnlineInfoResponseT()
        x._UnPack(dcOnlineInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.syncMode == other.syncMode and \
            self.cycleTime == other.cycleTime and \
            self.syncShiftTime == other.syncShiftTime and \
            self.syncWindowMonitoring == other.syncWindowMonitoring and \
            self.deviationLimit == other.deviationLimit and \
            self.continuousDelayCompensation == other.continuousDelayCompensation and \
            self.systemTime == other.systemTime and \
            self.sendOffset == other.sendOffset and \
            self.syncOffset == other.syncOffset and \
            self.outputShiftTime == other.outputShiftTime

    # DcOnlineInfoResponseT
    def _UnPack(self, dcOnlineInfoResponse):
        if dcOnlineInfoResponse is None:
            return
        self.syncMode = dcOnlineInfoResponse.SyncMode()
        self.cycleTime = dcOnlineInfoResponse.CycleTime()
        self.syncShiftTime = dcOnlineInfoResponse.SyncShiftTime()
        self.syncWindowMonitoring = dcOnlineInfoResponse.SyncWindowMonitoring()
        self.deviationLimit = dcOnlineInfoResponse.DeviationLimit()
        self.continuousDelayCompensation = dcOnlineInfoResponse.ContinuousDelayCompensation()
        self.systemTime = dcOnlineInfoResponse.SystemTime()
        self.sendOffset = dcOnlineInfoResponse.SendOffset()
        self.syncOffset = dcOnlineInfoResponse.SyncOffset()
        self.outputShiftTime = dcOnlineInfoResponse.OutputShiftTime()

    # DcOnlineInfoResponseT
    def Pack(self, builder):
        DcOnlineInfoResponseStart(builder)
        DcOnlineInfoResponseAddSyncMode(builder, self.syncMode)
        DcOnlineInfoResponseAddCycleTime(builder, self.cycleTime)
        DcOnlineInfoResponseAddSyncShiftTime(builder, self.syncShiftTime)
        DcOnlineInfoResponseAddSyncWindowMonitoring(builder, self.syncWindowMonitoring)
        DcOnlineInfoResponseAddDeviationLimit(builder, self.deviationLimit)
        DcOnlineInfoResponseAddContinuousDelayCompensation(builder, self.continuousDelayCompensation)
        DcOnlineInfoResponseAddSystemTime(builder, self.systemTime)
        DcOnlineInfoResponseAddSendOffset(builder, self.sendOffset)
        DcOnlineInfoResponseAddSyncOffset(builder, self.syncOffset)
        DcOnlineInfoResponseAddOutputShiftTime(builder, self.outputShiftTime)
        dcOnlineInfoResponse = DcOnlineInfoResponseEnd(builder)
        return dcOnlineInfoResponse
