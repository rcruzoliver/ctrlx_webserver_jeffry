# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#EtherCAT status
class MasterStatusResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MasterStatusResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMasterStatusResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MasterStatusResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Is 0 if master and all slaves are in state "Operational" without any errors
    #Bit 0: No master ethernet link
    #Bit 1: Master not in state "Operational"
    #Bit 2: Master not in requested state
    #Bit 3: Reserved
    #Bit 4: Master in state "Init"
    #Bit 5: Master in state "Pre-Operational"
    #Bit 6: Master in state "Safe-Operational"
    #Bit 7: Reserved
    #Bit 8: Topology not OK (the configured slaves do not match to the online slaves)
    #Bit 9: One or more slaves not in master state
    #Bit 10: One or more slaves indicate error
    #Bit 11: Reserved
    #Bit 12: Distributed Clock (DC) is not within configured limits (only when DC is enabled)
    #Bit 13: Reserved
    #Bit 14: Invalid or inconsistent settings
    #Bit 15: Port not found
    #Bit 16: No license available
    #Bit 17 - 31: Reserved
    # MasterStatusResponse
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MasterStatusResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return MasterStatusResponseStart(builder)
def MasterStatusResponseAddStatus(builder, status): builder.PrependUint32Slot(0, status, 0)
def AddStatus(builder, status):
    return MasterStatusResponseAddStatus(builder, status)
def MasterStatusResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MasterStatusResponseEnd(builder)

class MasterStatusResponseT(object):

    # MasterStatusResponseT
    def __init__(self):
        self.status = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        masterStatusResponse = MasterStatusResponse()
        masterStatusResponse.Init(buf, pos)
        return cls.InitFromObj(masterStatusResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, masterStatusResponse):
        x = MasterStatusResponseT()
        x._UnPack(masterStatusResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.status == other.status

    # MasterStatusResponseT
    def _UnPack(self, masterStatusResponse):
        if masterStatusResponse is None:
            return
        self.status = masterStatusResponse.Status()

    # MasterStatusResponseT
    def Pack(self, builder):
        MasterStatusResponseStart(builder)
        MasterStatusResponseAddStatus(builder, self.status)
        masterStatusResponse = MasterStatusResponseEnd(builder)
        return masterStatusResponse
