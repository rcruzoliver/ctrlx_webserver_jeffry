# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This node reads data from an AoE EtherCAT device.
#The ADS device is addressed with target Net Id and the object with “IndexGroup”, “IndexOffset”.
#The slave must support the mailbox protocol “ADS (Automation Device Specification) over EtherCAT” (AoE).
#The slave must be in EtherCAT state PreOP, SafeOP or OP for mailbox communication.
class AoeDataRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AoeDataRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAoeDataRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AoeDataRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: 
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # AoeDataRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType
    # AoeDataRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #AoE target Net Id of the device
    #e.g. [172,31,254,254,0,254] (dec) equals dot-decimal notation: 172.31.254.254.0.254
    # AoeDataRequest
    def TargetNetId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AoeDataRequest
    def TargetNetIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AoeDataRequest
    def TargetNetIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AoeDataRequest
    def TargetNetIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    #Target port number  
    # AoeDataRequest
    def TargetPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #AoE read command index group
    # AoeDataRequest
    def IndexGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #AoE read command index offset
    # AoeDataRequest
    def IndexOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Data buffer to be written
    # AoeDataRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AoeDataRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AoeDataRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AoeDataRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    #Size of data to be read in bytes
    # AoeDataRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def AoeDataRequestStart(builder): builder.StartObject(8)
def Start(builder):
    return AoeDataRequestStart(builder)
def AoeDataRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return AoeDataRequestAddAddressType(builder, addressType)
def AoeDataRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return AoeDataRequestAddAddress(builder, address)
def AoeDataRequestAddTargetNetId(builder, targetNetId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(targetNetId), 0)
def AddTargetNetId(builder, targetNetId):
    return AoeDataRequestAddTargetNetId(builder, targetNetId)
def AoeDataRequestStartTargetNetIdVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartTargetNetIdVector(builder, numElems):
    return AoeDataRequestStartTargetNetIdVector(builder, numElems)
def AoeDataRequestAddTargetPort(builder, targetPort): builder.PrependUint16Slot(3, targetPort, 0)
def AddTargetPort(builder, targetPort):
    return AoeDataRequestAddTargetPort(builder, targetPort)
def AoeDataRequestAddIndexGroup(builder, indexGroup): builder.PrependUint32Slot(4, indexGroup, 0)
def AddIndexGroup(builder, indexGroup):
    return AoeDataRequestAddIndexGroup(builder, indexGroup)
def AoeDataRequestAddIndexOffset(builder, indexOffset): builder.PrependUint32Slot(5, indexOffset, 0)
def AddIndexOffset(builder, indexOffset):
    return AoeDataRequestAddIndexOffset(builder, indexOffset)
def AoeDataRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return AoeDataRequestAddData(builder, data)
def AoeDataRequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return AoeDataRequestStartDataVector(builder, numElems)
def AoeDataRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(7, maxLength, 0)
def AddMaxLength(builder, maxLength):
    return AoeDataRequestAddMaxLength(builder, maxLength)
def AoeDataRequestEnd(builder): return builder.EndObject()
def End(builder):
    return AoeDataRequestEnd(builder)
try:
    from typing import List
except:
    pass

class AoeDataRequestT(object):

    # AoeDataRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.targetNetId = None  # type: List[int]
        self.targetPort = 0  # type: int
        self.indexGroup = 0  # type: int
        self.indexOffset = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aoeDataRequest = AoeDataRequest()
        aoeDataRequest.Init(buf, pos)
        return cls.InitFromObj(aoeDataRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aoeDataRequest):
        x = AoeDataRequestT()
        x._UnPack(aoeDataRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.targetNetId == other.targetNetId and \
            self.targetPort == other.targetPort and \
            self.indexGroup == other.indexGroup and \
            self.indexOffset == other.indexOffset and \
            self.data == other.data and \
            self.maxLength == other.maxLength

    # AoeDataRequestT
    def _UnPack(self, aoeDataRequest):
        if aoeDataRequest is None:
            return
        self.addressType = aoeDataRequest.AddressType()
        self.address = aoeDataRequest.Address()
        if not aoeDataRequest.TargetNetIdIsNone():
            if np is None:
                self.targetNetId = []
                for i in range(aoeDataRequest.TargetNetIdLength()):
                    self.targetNetId.append(aoeDataRequest.TargetNetId(i))
            else:
                self.targetNetId = aoeDataRequest.TargetNetIdAsNumpy()
        self.targetPort = aoeDataRequest.TargetPort()
        self.indexGroup = aoeDataRequest.IndexGroup()
        self.indexOffset = aoeDataRequest.IndexOffset()
        if not aoeDataRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(aoeDataRequest.DataLength()):
                    self.data.append(aoeDataRequest.Data(i))
            else:
                self.data = aoeDataRequest.DataAsNumpy()
        self.maxLength = aoeDataRequest.MaxLength()

    # AoeDataRequestT
    def Pack(self, builder):
        if self.targetNetId is not None:
            if np is not None and type(self.targetNetId) is np.ndarray:
                targetNetId = builder.CreateNumpyVector(self.targetNetId)
            else:
                AoeDataRequestStartTargetNetIdVector(builder, len(self.targetNetId))
                for i in reversed(range(len(self.targetNetId))):
                    builder.PrependUint8(self.targetNetId[i])
                targetNetId = builder.EndVector()
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                AoeDataRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        AoeDataRequestStart(builder)
        AoeDataRequestAddAddressType(builder, self.addressType)
        AoeDataRequestAddAddress(builder, self.address)
        if self.targetNetId is not None:
            AoeDataRequestAddTargetNetId(builder, targetNetId)
        AoeDataRequestAddTargetPort(builder, self.targetPort)
        AoeDataRequestAddIndexGroup(builder, self.indexGroup)
        AoeDataRequestAddIndexOffset(builder, self.indexOffset)
        if self.data is not None:
            AoeDataRequestAddData(builder, data)
        AoeDataRequestAddMaxLength(builder, self.maxLength)
        aoeDataRequest = AoeDataRequestEnd(builder)
        return aoeDataRequest
