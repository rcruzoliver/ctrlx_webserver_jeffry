# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Checksum response 
class ChecksumResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChecksumResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChecksumResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ChecksumResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ChecksumResponse
    def Checksums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.ChecksumElement import ChecksumElement
            obj = ChecksumElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ChecksumResponse
    def ChecksumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ChecksumResponse
    def ChecksumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ChecksumResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return ChecksumResponseStart(builder)
def ChecksumResponseAddChecksums(builder, checksums): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(checksums), 0)
def AddChecksums(builder, checksums):
    return ChecksumResponseAddChecksums(builder, checksums)
def ChecksumResponseStartChecksumsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChecksumsVector(builder, numElems):
    return ChecksumResponseStartChecksumsVector(builder, numElems)
def ChecksumResponseEnd(builder): return builder.EndObject()
def End(builder):
    return ChecksumResponseEnd(builder)
import comm.ethercat.master.fbs.ChecksumElement
try:
    from typing import List
except:
    pass

class ChecksumResponseT(object):

    # ChecksumResponseT
    def __init__(self):
        self.checksums = None  # type: List[comm.ethercat.master.fbs.ChecksumElement.ChecksumElementT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        checksumResponse = ChecksumResponse()
        checksumResponse.Init(buf, pos)
        return cls.InitFromObj(checksumResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, checksumResponse):
        x = ChecksumResponseT()
        x._UnPack(checksumResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.checksums == other.checksums

    # ChecksumResponseT
    def _UnPack(self, checksumResponse):
        if checksumResponse is None:
            return
        if not checksumResponse.ChecksumsIsNone():
            self.checksums = []
            for i in range(checksumResponse.ChecksumsLength()):
                if checksumResponse.Checksums(i) is None:
                    self.checksums.append(None)
                else:
                    checksumElement_ = comm.ethercat.master.fbs.ChecksumElement.ChecksumElementT.InitFromObj(checksumResponse.Checksums(i))
                    self.checksums.append(checksumElement_)

    # ChecksumResponseT
    def Pack(self, builder):
        if self.checksums is not None:
            checksumslist = []
            for i in range(len(self.checksums)):
                checksumslist.append(self.checksums[i].Pack(builder))
            ChecksumResponseStartChecksumsVector(builder, len(self.checksums))
            for i in reversed(range(len(self.checksums))):
                builder.PrependUOffsetTRelative(checksumslist[i])
            checksums = builder.EndVector()
        ChecksumResponseStart(builder)
        if self.checksums is not None:
            ChecksumResponseAddChecksums(builder, checksums)
        checksumResponse = ChecksumResponseEnd(builder)
        return checksumResponse
