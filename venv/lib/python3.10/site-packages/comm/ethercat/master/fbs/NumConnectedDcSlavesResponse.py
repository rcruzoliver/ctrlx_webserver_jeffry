# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Number of connected slaves which support Distributed Clock response
class NumConnectedDcSlavesResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NumConnectedDcSlavesResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNumConnectedDcSlavesResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NumConnectedDcSlavesResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Number of connected slaves which support Distributed Clock
    # NumConnectedDcSlavesResponse
    def NumSlaves(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def NumConnectedDcSlavesResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return NumConnectedDcSlavesResponseStart(builder)
def NumConnectedDcSlavesResponseAddNumSlaves(builder, numSlaves): builder.PrependUint32Slot(0, numSlaves, 0)
def AddNumSlaves(builder, numSlaves):
    return NumConnectedDcSlavesResponseAddNumSlaves(builder, numSlaves)
def NumConnectedDcSlavesResponseEnd(builder): return builder.EndObject()
def End(builder):
    return NumConnectedDcSlavesResponseEnd(builder)

class NumConnectedDcSlavesResponseT(object):

    # NumConnectedDcSlavesResponseT
    def __init__(self):
        self.numSlaves = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        numConnectedDcSlavesResponse = NumConnectedDcSlavesResponse()
        numConnectedDcSlavesResponse.Init(buf, pos)
        return cls.InitFromObj(numConnectedDcSlavesResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, numConnectedDcSlavesResponse):
        x = NumConnectedDcSlavesResponseT()
        x._UnPack(numConnectedDcSlavesResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.numSlaves == other.numSlaves

    # NumConnectedDcSlavesResponseT
    def _UnPack(self, numConnectedDcSlavesResponse):
        if numConnectedDcSlavesResponse is None:
            return
        self.numSlaves = numConnectedDcSlavesResponse.NumSlaves()

    # NumConnectedDcSlavesResponseT
    def Pack(self, builder):
        NumConnectedDcSlavesResponseStart(builder)
        NumConnectedDcSlavesResponseAddNumSlaves(builder, self.numSlaves)
        numConnectedDcSlavesResponse = NumConnectedDcSlavesResponseEnd(builder)
        return numConnectedDcSlavesResponse
