# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Minimum, actual and maximum values
#Minimum value
#Current value
#Maximum value
class MinActMaxValues(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 12

    # MinActMaxValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Minimum value
    # MinActMaxValues
    def Minimum(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    #Current value
    # MinActMaxValues
    def Actual(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    #Maximum value
    # MinActMaxValues
    def Maximum(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateMinActMaxValues(builder, minimum, actual, maximum):
    builder.Prep(4, 12)
    builder.PrependUint32(maximum)
    builder.PrependUint32(actual)
    builder.PrependUint32(minimum)
    return builder.Offset()


class MinActMaxValuesT(object):

    # MinActMaxValuesT
    def __init__(self):
        self.minimum = 0  # type: int
        self.actual = 0  # type: int
        self.maximum = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        minActMaxValues = MinActMaxValues()
        minActMaxValues.Init(buf, pos)
        return cls.InitFromObj(minActMaxValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, minActMaxValues):
        x = MinActMaxValuesT()
        x._UnPack(minActMaxValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.minimum == other.minimum and \
            self.actual == other.actual and \
            self.maximum == other.maximum

    # MinActMaxValuesT
    def _UnPack(self, minActMaxValues):
        if minActMaxValues is None:
            return
        self.minimum = minActMaxValues.Minimum()
        self.actual = minActMaxValues.Actual()
        self.maximum = minActMaxValues.Maximum()

    # MinActMaxValuesT
    def Pack(self, builder):
        return CreateMinActMaxValues(builder, self.minimum, self.actual, self.maximum)
