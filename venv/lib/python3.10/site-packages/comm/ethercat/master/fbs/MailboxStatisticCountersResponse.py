# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Mailbox statistic counters response
class MailboxStatisticCountersResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MailboxStatisticCountersResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMailboxStatisticCountersResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MailboxStatisticCountersResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #AoE protocol statistic
    # MailboxStatisticCountersResponse
    def Aoe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #CoE protocol statistic
    # MailboxStatisticCountersResponse
    def Coe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #EoE protocol statistic
    # MailboxStatisticCountersResponse
    def Eoe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #FoE protocol statistic
    # MailboxStatisticCountersResponse
    def Foe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #SoE protocol statistic
    # MailboxStatisticCountersResponse
    def Soe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #VoE protocol statistic
    # MailboxStatisticCountersResponse
    def Voe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Raw protocol statistic
    # MailboxStatisticCountersResponse
    def Raw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.ProtocolStatistic import ProtocolStatistic
            obj = ProtocolStatistic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MailboxStatisticCountersResponseStart(builder): builder.StartObject(7)
def Start(builder):
    return MailboxStatisticCountersResponseStart(builder)
def MailboxStatisticCountersResponseAddAoe(builder, aoe): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(aoe), 0)
def AddAoe(builder, aoe):
    return MailboxStatisticCountersResponseAddAoe(builder, aoe)
def MailboxStatisticCountersResponseAddCoe(builder, coe): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coe), 0)
def AddCoe(builder, coe):
    return MailboxStatisticCountersResponseAddCoe(builder, coe)
def MailboxStatisticCountersResponseAddEoe(builder, eoe): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(eoe), 0)
def AddEoe(builder, eoe):
    return MailboxStatisticCountersResponseAddEoe(builder, eoe)
def MailboxStatisticCountersResponseAddFoe(builder, foe): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(foe), 0)
def AddFoe(builder, foe):
    return MailboxStatisticCountersResponseAddFoe(builder, foe)
def MailboxStatisticCountersResponseAddSoe(builder, soe): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(soe), 0)
def AddSoe(builder, soe):
    return MailboxStatisticCountersResponseAddSoe(builder, soe)
def MailboxStatisticCountersResponseAddVoe(builder, voe): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(voe), 0)
def AddVoe(builder, voe):
    return MailboxStatisticCountersResponseAddVoe(builder, voe)
def MailboxStatisticCountersResponseAddRaw(builder, raw): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(raw), 0)
def AddRaw(builder, raw):
    return MailboxStatisticCountersResponseAddRaw(builder, raw)
def MailboxStatisticCountersResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MailboxStatisticCountersResponseEnd(builder)
import comm.ethercat.master.fbs.ProtocolStatistic
try:
    from typing import Optional
except:
    pass

class MailboxStatisticCountersResponseT(object):

    # MailboxStatisticCountersResponseT
    def __init__(self):
        self.aoe = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]
        self.coe = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]
        self.eoe = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]
        self.foe = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]
        self.soe = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]
        self.voe = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]
        self.raw = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mailboxStatisticCountersResponse = MailboxStatisticCountersResponse()
        mailboxStatisticCountersResponse.Init(buf, pos)
        return cls.InitFromObj(mailboxStatisticCountersResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mailboxStatisticCountersResponse):
        x = MailboxStatisticCountersResponseT()
        x._UnPack(mailboxStatisticCountersResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.aoe == other.aoe and \
            self.coe == other.coe and \
            self.eoe == other.eoe and \
            self.foe == other.foe and \
            self.soe == other.soe and \
            self.voe == other.voe and \
            self.raw == other.raw

    # MailboxStatisticCountersResponseT
    def _UnPack(self, mailboxStatisticCountersResponse):
        if mailboxStatisticCountersResponse is None:
            return
        if mailboxStatisticCountersResponse.Aoe() is not None:
            self.aoe = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Aoe())
        if mailboxStatisticCountersResponse.Coe() is not None:
            self.coe = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Coe())
        if mailboxStatisticCountersResponse.Eoe() is not None:
            self.eoe = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Eoe())
        if mailboxStatisticCountersResponse.Foe() is not None:
            self.foe = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Foe())
        if mailboxStatisticCountersResponse.Soe() is not None:
            self.soe = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Soe())
        if mailboxStatisticCountersResponse.Voe() is not None:
            self.voe = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Voe())
        if mailboxStatisticCountersResponse.Raw() is not None:
            self.raw = comm.ethercat.master.fbs.ProtocolStatistic.ProtocolStatisticT.InitFromObj(mailboxStatisticCountersResponse.Raw())

    # MailboxStatisticCountersResponseT
    def Pack(self, builder):
        MailboxStatisticCountersResponseStart(builder)
        if self.aoe is not None:
            aoe = self.aoe.Pack(builder)
            MailboxStatisticCountersResponseAddAoe(builder, aoe)
        if self.coe is not None:
            coe = self.coe.Pack(builder)
            MailboxStatisticCountersResponseAddCoe(builder, coe)
        if self.eoe is not None:
            eoe = self.eoe.Pack(builder)
            MailboxStatisticCountersResponseAddEoe(builder, eoe)
        if self.foe is not None:
            foe = self.foe.Pack(builder)
            MailboxStatisticCountersResponseAddFoe(builder, foe)
        if self.soe is not None:
            soe = self.soe.Pack(builder)
            MailboxStatisticCountersResponseAddSoe(builder, soe)
        if self.voe is not None:
            voe = self.voe.Pack(builder)
            MailboxStatisticCountersResponseAddVoe(builder, voe)
        if self.raw is not None:
            raw = self.raw.Pack(builder)
            MailboxStatisticCountersResponseAddRaw(builder, raw)
        mailboxStatisticCountersResponse = MailboxStatisticCountersResponseEnd(builder)
        return mailboxStatisticCountersResponse
