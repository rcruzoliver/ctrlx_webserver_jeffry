# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#EtherCAT mailbox size info
class EthercatMailboxInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # EthercatMailboxInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Mailbox input size in unit of bytes (e.g. ENI: Mailbox/Recv)
    # EthercatMailboxInfo
    def SizeIn(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    #Mailbox output size in unit of bytes (e.g. ENI: Mailbox/Send)
    # EthercatMailboxInfo
    def SizeOut(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateEthercatMailboxInfo(builder, sizeIn, sizeOut):
    builder.Prep(4, 8)
    builder.PrependUint32(sizeOut)
    builder.PrependUint32(sizeIn)
    return builder.Offset()


class EthercatMailboxInfoT(object):

    # EthercatMailboxInfoT
    def __init__(self):
        self.sizeIn = 0  # type: int
        self.sizeOut = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ethercatMailboxInfo = EthercatMailboxInfo()
        ethercatMailboxInfo.Init(buf, pos)
        return cls.InitFromObj(ethercatMailboxInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ethercatMailboxInfo):
        x = EthercatMailboxInfoT()
        x._UnPack(ethercatMailboxInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sizeIn == other.sizeIn and \
            self.sizeOut == other.sizeOut

    # EthercatMailboxInfoT
    def _UnPack(self, ethercatMailboxInfo):
        if ethercatMailboxInfo is None:
            return
        self.sizeIn = ethercatMailboxInfo.SizeIn()
        self.sizeOut = ethercatMailboxInfo.SizeOut()

    # EthercatMailboxInfoT
    def Pack(self, builder):
        return CreateEthercatMailboxInfo(builder, self.sizeIn, self.sizeOut)
