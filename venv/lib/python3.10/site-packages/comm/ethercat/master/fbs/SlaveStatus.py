# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This node delivers the RemoteSlaveStatus value of an EtherCAT slave.
class SlaveStatus(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveStatus()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveStatus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveStatus
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveStatus
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.AddressedRequest import AddressedRequest
            obj = AddressedRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveStatus
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.SlaveStatusResponse import SlaveStatusResponse
            obj = SlaveStatusResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SlaveStatusStart(builder): builder.StartObject(2)
def Start(builder):
    return SlaveStatusStart(builder)
def SlaveStatusAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return SlaveStatusAddRequest(builder, request)
def SlaveStatusAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AddResponse(builder, response):
    return SlaveStatusAddResponse(builder, response)
def SlaveStatusEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveStatusEnd(builder)
import comm.ethercat.master.fbs.AddressedRequest
import comm.ethercat.master.fbs.SlaveStatusResponse
try:
    from typing import Optional
except:
    pass

class SlaveStatusT(object):

    # SlaveStatusT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.SlaveStatusResponse.SlaveStatusResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveStatus = SlaveStatus()
        slaveStatus.Init(buf, pos)
        return cls.InitFromObj(slaveStatus)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveStatus):
        x = SlaveStatusT()
        x._UnPack(slaveStatus)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request and \
            self.response == other.response

    # SlaveStatusT
    def _UnPack(self, slaveStatus):
        if slaveStatus is None:
            return
        if slaveStatus.Request() is not None:
            self.request = comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT.InitFromObj(slaveStatus.Request())
        if slaveStatus.Response() is not None:
            self.response = comm.ethercat.master.fbs.SlaveStatusResponse.SlaveStatusResponseT.InitFromObj(slaveStatus.Response())

    # SlaveStatusT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        SlaveStatusStart(builder)
        if self.request is not None:
            SlaveStatusAddRequest(builder, request)
        if self.response is not None:
            SlaveStatusAddResponse(builder, response)
        slaveStatus = SlaveStatusEnd(builder)
        return slaveStatus
