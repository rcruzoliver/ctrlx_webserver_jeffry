# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Link layer configuration info response
class LinkLayerConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinkLayerConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinkLayerConfigInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinkLayerConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Port name
    # LinkLayerConfigInfoResponse
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Link layer driver
    # LinkLayerConfigInfoResponse
    def LinkLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Arguments for link layer driver
    # LinkLayerConfigInfoResponse
    def Arguments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LinkLayerConfigInfoResponseStart(builder): builder.StartObject(3)
def Start(builder):
    return LinkLayerConfigInfoResponseStart(builder)
def LinkLayerConfigInfoResponseAddPort(builder, port): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(port), 0)
def AddPort(builder, port):
    return LinkLayerConfigInfoResponseAddPort(builder, port)
def LinkLayerConfigInfoResponseAddLinkLayer(builder, linkLayer): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkLayer), 0)
def AddLinkLayer(builder, linkLayer):
    return LinkLayerConfigInfoResponseAddLinkLayer(builder, linkLayer)
def LinkLayerConfigInfoResponseAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def AddArguments(builder, arguments):
    return LinkLayerConfigInfoResponseAddArguments(builder, arguments)
def LinkLayerConfigInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return LinkLayerConfigInfoResponseEnd(builder)

class LinkLayerConfigInfoResponseT(object):

    # LinkLayerConfigInfoResponseT
    def __init__(self):
        self.port = None  # type: str
        self.linkLayer = None  # type: str
        self.arguments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linkLayerConfigInfoResponse = LinkLayerConfigInfoResponse()
        linkLayerConfigInfoResponse.Init(buf, pos)
        return cls.InitFromObj(linkLayerConfigInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, linkLayerConfigInfoResponse):
        x = LinkLayerConfigInfoResponseT()
        x._UnPack(linkLayerConfigInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.port == other.port and \
            self.linkLayer == other.linkLayer and \
            self.arguments == other.arguments

    # LinkLayerConfigInfoResponseT
    def _UnPack(self, linkLayerConfigInfoResponse):
        if linkLayerConfigInfoResponse is None:
            return
        self.port = linkLayerConfigInfoResponse.Port()
        self.linkLayer = linkLayerConfigInfoResponse.LinkLayer()
        self.arguments = linkLayerConfigInfoResponse.Arguments()

    # LinkLayerConfigInfoResponseT
    def Pack(self, builder):
        if self.port is not None:
            port = builder.CreateString(self.port)
        if self.linkLayer is not None:
            linkLayer = builder.CreateString(self.linkLayer)
        if self.arguments is not None:
            arguments = builder.CreateString(self.arguments)
        LinkLayerConfigInfoResponseStart(builder)
        if self.port is not None:
            LinkLayerConfigInfoResponseAddPort(builder, port)
        if self.linkLayer is not None:
            LinkLayerConfigInfoResponseAddLinkLayer(builder, linkLayer)
        if self.arguments is not None:
            LinkLayerConfigInfoResponseAddArguments(builder, arguments)
        linkLayerConfigInfoResponse = LinkLayerConfigInfoResponseEnd(builder)
        return linkLayerConfigInfoResponse
