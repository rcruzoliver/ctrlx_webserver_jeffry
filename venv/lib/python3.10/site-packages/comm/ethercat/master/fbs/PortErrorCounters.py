# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Port error counters
class PortErrorCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # PortErrorCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Invalid Frame Counter (ESC register 0x0300 / 0x0302 / 0x0304 / 0x0306)
    # PortErrorCounters
    def InvalidFrameCounter(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    #RX Error Counter (MII/EBUS) (ESC register 0x0301 / 0x0303 / 0x0305 / 0x0307)
    # PortErrorCounters
    def RxErrorCounter(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
    #Forwarded RX Error Counter (ESC register 0x0308 : 0x030B)
    # PortErrorCounters
    def FwdRxErrorCounter(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    #Lost Link Counter (ESC register 0x0310 : 0x0313)
    # PortErrorCounters
    def LostLinkCounter(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(3))

def CreatePortErrorCounters(builder, invalidFrameCounter, rxErrorCounter, fwdRxErrorCounter, lostLinkCounter):
    builder.Prep(1, 4)
    builder.PrependUint8(lostLinkCounter)
    builder.PrependUint8(fwdRxErrorCounter)
    builder.PrependUint8(rxErrorCounter)
    builder.PrependUint8(invalidFrameCounter)
    return builder.Offset()


class PortErrorCountersT(object):

    # PortErrorCountersT
    def __init__(self):
        self.invalidFrameCounter = 0  # type: int
        self.rxErrorCounter = 0  # type: int
        self.fwdRxErrorCounter = 0  # type: int
        self.lostLinkCounter = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        portErrorCounters = PortErrorCounters()
        portErrorCounters.Init(buf, pos)
        return cls.InitFromObj(portErrorCounters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, portErrorCounters):
        x = PortErrorCountersT()
        x._UnPack(portErrorCounters)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.invalidFrameCounter == other.invalidFrameCounter and \
            self.rxErrorCounter == other.rxErrorCounter and \
            self.fwdRxErrorCounter == other.fwdRxErrorCounter and \
            self.lostLinkCounter == other.lostLinkCounter

    # PortErrorCountersT
    def _UnPack(self, portErrorCounters):
        if portErrorCounters is None:
            return
        self.invalidFrameCounter = portErrorCounters.InvalidFrameCounter()
        self.rxErrorCounter = portErrorCounters.RxErrorCounter()
        self.fwdRxErrorCounter = portErrorCounters.FwdRxErrorCounter()
        self.lostLinkCounter = portErrorCounters.LostLinkCounter()

    # PortErrorCountersT
    def Pack(self, builder):
        return CreatePortErrorCounters(builder, self.invalidFrameCounter, self.rxErrorCounter, self.fwdRxErrorCounter, self.lostLinkCounter)
