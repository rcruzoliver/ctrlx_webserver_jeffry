# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#This node returns the CoE (CANopen over EtherCAT) object description for a specific object (SDO) from a slave
class ObjectDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectDescription
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.ObjectDescriptionRequest import ObjectDescriptionRequest
            obj = ObjectDescriptionRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectDescription
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.ObjectDescriptionResponse import ObjectDescriptionResponse
            obj = ObjectDescriptionResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ObjectDescriptionStart(builder): builder.StartObject(2)
def Start(builder):
    return ObjectDescriptionStart(builder)
def ObjectDescriptionAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AddRequest(builder, request):
    return ObjectDescriptionAddRequest(builder, request)
def ObjectDescriptionAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AddResponse(builder, response):
    return ObjectDescriptionAddResponse(builder, response)
def ObjectDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return ObjectDescriptionEnd(builder)
import comm.ethercat.master.fbs.ObjectDescriptionRequest
import comm.ethercat.master.fbs.ObjectDescriptionResponse
try:
    from typing import Optional
except:
    pass

class ObjectDescriptionT(object):

    # ObjectDescriptionT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.ObjectDescriptionRequest.ObjectDescriptionRequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.ObjectDescriptionResponse.ObjectDescriptionResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectDescription = ObjectDescription()
        objectDescription.Init(buf, pos)
        return cls.InitFromObj(objectDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, objectDescription):
        x = ObjectDescriptionT()
        x._UnPack(objectDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.request == other.request and \
            self.response == other.response

    # ObjectDescriptionT
    def _UnPack(self, objectDescription):
        if objectDescription is None:
            return
        if objectDescription.Request() is not None:
            self.request = comm.ethercat.master.fbs.ObjectDescriptionRequest.ObjectDescriptionRequestT.InitFromObj(objectDescription.Request())
        if objectDescription.Response() is not None:
            self.response = comm.ethercat.master.fbs.ObjectDescriptionResponse.ObjectDescriptionResponseT.InitFromObj(objectDescription.Response())

    # ObjectDescriptionT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        ObjectDescriptionStart(builder)
        if self.request is not None:
            ObjectDescriptionAddRequest(builder, request)
        if self.response is not None:
            ObjectDescriptionAddResponse(builder, response)
        objectDescription = ObjectDescriptionEnd(builder)
        return objectDescription
