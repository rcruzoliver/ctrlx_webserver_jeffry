# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Object dictionary request
class ObjectDictionaryListRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDictionaryListRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectDictionaryListRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObjectDictionaryListRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: 
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # ObjectDictionaryListRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType
    # ObjectDictionaryListRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Object dictionary list type
    #length: lengths of each list type
    #all: all objects
    #rxPDOMap: only pdo mappable objects
    #txPDOMap: only pdo mappable objects that can be changed
    #storeForeReplacement: only stored for a device replacement object
    #startupParam: only startup parameter objects
    # ObjectDictionaryListRequest
    def ListType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Max number of elements returned by the request
    # ObjectDictionaryListRequest
    def MaxElements(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ObjectDictionaryListRequestStart(builder): builder.StartObject(4)
def Start(builder):
    return ObjectDictionaryListRequestStart(builder)
def ObjectDictionaryListRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return ObjectDictionaryListRequestAddAddressType(builder, addressType)
def ObjectDictionaryListRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return ObjectDictionaryListRequestAddAddress(builder, address)
def ObjectDictionaryListRequestAddListType(builder, listType): builder.PrependUint8Slot(2, listType, 0)
def AddListType(builder, listType):
    return ObjectDictionaryListRequestAddListType(builder, listType)
def ObjectDictionaryListRequestAddMaxElements(builder, maxElements): builder.PrependUint32Slot(3, maxElements, 0)
def AddMaxElements(builder, maxElements):
    return ObjectDictionaryListRequestAddMaxElements(builder, maxElements)
def ObjectDictionaryListRequestEnd(builder): return builder.EndObject()
def End(builder):
    return ObjectDictionaryListRequestEnd(builder)

class ObjectDictionaryListRequestT(object):

    # ObjectDictionaryListRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.listType = 0  # type: int
        self.maxElements = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectDictionaryListRequest = ObjectDictionaryListRequest()
        objectDictionaryListRequest.Init(buf, pos)
        return cls.InitFromObj(objectDictionaryListRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, objectDictionaryListRequest):
        x = ObjectDictionaryListRequestT()
        x._UnPack(objectDictionaryListRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.listType == other.listType and \
            self.maxElements == other.maxElements

    # ObjectDictionaryListRequestT
    def _UnPack(self, objectDictionaryListRequest):
        if objectDictionaryListRequest is None:
            return
        self.addressType = objectDictionaryListRequest.AddressType()
        self.address = objectDictionaryListRequest.Address()
        self.listType = objectDictionaryListRequest.ListType()
        self.maxElements = objectDictionaryListRequest.MaxElements()

    # ObjectDictionaryListRequestT
    def Pack(self, builder):
        ObjectDictionaryListRequestStart(builder)
        ObjectDictionaryListRequestAddAddressType(builder, self.addressType)
        ObjectDictionaryListRequestAddAddress(builder, self.address)
        ObjectDictionaryListRequestAddListType(builder, self.listType)
        ObjectDictionaryListRequestAddMaxElements(builder, self.maxElements)
        objectDictionaryListRequest = ObjectDictionaryListRequestEnd(builder)
        return objectDictionaryListRequest
