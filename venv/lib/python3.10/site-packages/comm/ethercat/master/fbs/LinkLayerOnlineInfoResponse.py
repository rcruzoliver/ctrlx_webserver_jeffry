# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Link layer online info response
class LinkLayerOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinkLayerOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinkLayerOnlineInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinkLayerOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Port name
    # LinkLayerOnlineInfoResponse
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Link layer driver
    # LinkLayerOnlineInfoResponse
    def LinkLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Arguments for link layer driver
    # LinkLayerOnlineInfoResponse
    def Arguments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Status message
    # LinkLayerOnlineInfoResponse
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Mac Address
    #e.g. [ 2, 1, 5, 16, 3, 233] (dec) equals IEEE 802 notation: 02-01-05-10-03-E9 
    # LinkLayerOnlineInfoResponse
    def MacAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # LinkLayerOnlineInfoResponse
    def MacAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # LinkLayerOnlineInfoResponse
    def MacAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinkLayerOnlineInfoResponse
    def MacAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    #Frame repeat supported by link layer
    # LinkLayerOnlineInfoResponse
    def FrameRepeatCntSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Link speed in unit of MBaud (MBit/s)
    # LinkLayerOnlineInfoResponse
    def LinkSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Link mode
    #undefined: Undefined - do not use
    #interrupt: Interrupt based
    #polling: Polling based
    # LinkLayerOnlineInfoResponse
    def LinkMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Link status
    #undefined: Undefined - do not use
    #ok: Link exists
    #disconnected: Disconnected - link down
    #halfduplex: Half-duplex mode
    # LinkLayerOnlineInfoResponse
    def LinkStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Width of reference clock in bits
    # LinkLayerOnlineInfoResponse
    def RefClockWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #System time in nanoseconds
    # LinkLayerOnlineInfoResponse
    def SystemTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    #Physical error counter
    # LinkLayerOnlineInfoResponse
    def PhysicalErrorCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Telegram error counter
    # LinkLayerOnlineInfoResponse
    def TelegramErrorCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def LinkLayerOnlineInfoResponseStart(builder): builder.StartObject(13)
def Start(builder):
    return LinkLayerOnlineInfoResponseStart(builder)
def LinkLayerOnlineInfoResponseAddPort(builder, port): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(port), 0)
def AddPort(builder, port):
    return LinkLayerOnlineInfoResponseAddPort(builder, port)
def LinkLayerOnlineInfoResponseAddLinkLayer(builder, linkLayer): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkLayer), 0)
def AddLinkLayer(builder, linkLayer):
    return LinkLayerOnlineInfoResponseAddLinkLayer(builder, linkLayer)
def LinkLayerOnlineInfoResponseAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def AddArguments(builder, arguments):
    return LinkLayerOnlineInfoResponseAddArguments(builder, arguments)
def LinkLayerOnlineInfoResponseAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def AddMessage(builder, message):
    return LinkLayerOnlineInfoResponseAddMessage(builder, message)
def LinkLayerOnlineInfoResponseAddMacAddress(builder, macAddress): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(macAddress), 0)
def AddMacAddress(builder, macAddress):
    return LinkLayerOnlineInfoResponseAddMacAddress(builder, macAddress)
def LinkLayerOnlineInfoResponseStartMacAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartMacAddressVector(builder, numElems):
    return LinkLayerOnlineInfoResponseStartMacAddressVector(builder, numElems)
def LinkLayerOnlineInfoResponseAddFrameRepeatCntSupport(builder, frameRepeatCntSupport): builder.PrependBoolSlot(5, frameRepeatCntSupport, 0)
def AddFrameRepeatCntSupport(builder, frameRepeatCntSupport):
    return LinkLayerOnlineInfoResponseAddFrameRepeatCntSupport(builder, frameRepeatCntSupport)
def LinkLayerOnlineInfoResponseAddLinkSpeed(builder, linkSpeed): builder.PrependUint32Slot(6, linkSpeed, 0)
def AddLinkSpeed(builder, linkSpeed):
    return LinkLayerOnlineInfoResponseAddLinkSpeed(builder, linkSpeed)
def LinkLayerOnlineInfoResponseAddLinkMode(builder, linkMode): builder.PrependUint32Slot(7, linkMode, 0)
def AddLinkMode(builder, linkMode):
    return LinkLayerOnlineInfoResponseAddLinkMode(builder, linkMode)
def LinkLayerOnlineInfoResponseAddLinkStatus(builder, linkStatus): builder.PrependUint32Slot(8, linkStatus, 0)
def AddLinkStatus(builder, linkStatus):
    return LinkLayerOnlineInfoResponseAddLinkStatus(builder, linkStatus)
def LinkLayerOnlineInfoResponseAddRefClockWidth(builder, refClockWidth): builder.PrependUint32Slot(9, refClockWidth, 0)
def AddRefClockWidth(builder, refClockWidth):
    return LinkLayerOnlineInfoResponseAddRefClockWidth(builder, refClockWidth)
def LinkLayerOnlineInfoResponseAddSystemTime(builder, systemTime): builder.PrependUint64Slot(10, systemTime, 0)
def AddSystemTime(builder, systemTime):
    return LinkLayerOnlineInfoResponseAddSystemTime(builder, systemTime)
def LinkLayerOnlineInfoResponseAddPhysicalErrorCnt(builder, physicalErrorCnt): builder.PrependUint32Slot(11, physicalErrorCnt, 0)
def AddPhysicalErrorCnt(builder, physicalErrorCnt):
    return LinkLayerOnlineInfoResponseAddPhysicalErrorCnt(builder, physicalErrorCnt)
def LinkLayerOnlineInfoResponseAddTelegramErrorCnt(builder, telegramErrorCnt): builder.PrependUint32Slot(12, telegramErrorCnt, 0)
def AddTelegramErrorCnt(builder, telegramErrorCnt):
    return LinkLayerOnlineInfoResponseAddTelegramErrorCnt(builder, telegramErrorCnt)
def LinkLayerOnlineInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return LinkLayerOnlineInfoResponseEnd(builder)
try:
    from typing import List
except:
    pass

class LinkLayerOnlineInfoResponseT(object):

    # LinkLayerOnlineInfoResponseT
    def __init__(self):
        self.port = None  # type: str
        self.linkLayer = None  # type: str
        self.arguments = None  # type: str
        self.message = None  # type: str
        self.macAddress = None  # type: List[int]
        self.frameRepeatCntSupport = False  # type: bool
        self.linkSpeed = 0  # type: int
        self.linkMode = 0  # type: int
        self.linkStatus = 0  # type: int
        self.refClockWidth = 0  # type: int
        self.systemTime = 0  # type: int
        self.physicalErrorCnt = 0  # type: int
        self.telegramErrorCnt = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linkLayerOnlineInfoResponse = LinkLayerOnlineInfoResponse()
        linkLayerOnlineInfoResponse.Init(buf, pos)
        return cls.InitFromObj(linkLayerOnlineInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, linkLayerOnlineInfoResponse):
        x = LinkLayerOnlineInfoResponseT()
        x._UnPack(linkLayerOnlineInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.port == other.port and \
            self.linkLayer == other.linkLayer and \
            self.arguments == other.arguments and \
            self.message == other.message and \
            self.macAddress == other.macAddress and \
            self.frameRepeatCntSupport == other.frameRepeatCntSupport and \
            self.linkSpeed == other.linkSpeed and \
            self.linkMode == other.linkMode and \
            self.linkStatus == other.linkStatus and \
            self.refClockWidth == other.refClockWidth and \
            self.systemTime == other.systemTime and \
            self.physicalErrorCnt == other.physicalErrorCnt and \
            self.telegramErrorCnt == other.telegramErrorCnt

    # LinkLayerOnlineInfoResponseT
    def _UnPack(self, linkLayerOnlineInfoResponse):
        if linkLayerOnlineInfoResponse is None:
            return
        self.port = linkLayerOnlineInfoResponse.Port()
        self.linkLayer = linkLayerOnlineInfoResponse.LinkLayer()
        self.arguments = linkLayerOnlineInfoResponse.Arguments()
        self.message = linkLayerOnlineInfoResponse.Message()
        if not linkLayerOnlineInfoResponse.MacAddressIsNone():
            if np is None:
                self.macAddress = []
                for i in range(linkLayerOnlineInfoResponse.MacAddressLength()):
                    self.macAddress.append(linkLayerOnlineInfoResponse.MacAddress(i))
            else:
                self.macAddress = linkLayerOnlineInfoResponse.MacAddressAsNumpy()
        self.frameRepeatCntSupport = linkLayerOnlineInfoResponse.FrameRepeatCntSupport()
        self.linkSpeed = linkLayerOnlineInfoResponse.LinkSpeed()
        self.linkMode = linkLayerOnlineInfoResponse.LinkMode()
        self.linkStatus = linkLayerOnlineInfoResponse.LinkStatus()
        self.refClockWidth = linkLayerOnlineInfoResponse.RefClockWidth()
        self.systemTime = linkLayerOnlineInfoResponse.SystemTime()
        self.physicalErrorCnt = linkLayerOnlineInfoResponse.PhysicalErrorCnt()
        self.telegramErrorCnt = linkLayerOnlineInfoResponse.TelegramErrorCnt()

    # LinkLayerOnlineInfoResponseT
    def Pack(self, builder):
        if self.port is not None:
            port = builder.CreateString(self.port)
        if self.linkLayer is not None:
            linkLayer = builder.CreateString(self.linkLayer)
        if self.arguments is not None:
            arguments = builder.CreateString(self.arguments)
        if self.message is not None:
            message = builder.CreateString(self.message)
        if self.macAddress is not None:
            if np is not None and type(self.macAddress) is np.ndarray:
                macAddress = builder.CreateNumpyVector(self.macAddress)
            else:
                LinkLayerOnlineInfoResponseStartMacAddressVector(builder, len(self.macAddress))
                for i in reversed(range(len(self.macAddress))):
                    builder.PrependUint8(self.macAddress[i])
                macAddress = builder.EndVector()
        LinkLayerOnlineInfoResponseStart(builder)
        if self.port is not None:
            LinkLayerOnlineInfoResponseAddPort(builder, port)
        if self.linkLayer is not None:
            LinkLayerOnlineInfoResponseAddLinkLayer(builder, linkLayer)
        if self.arguments is not None:
            LinkLayerOnlineInfoResponseAddArguments(builder, arguments)
        if self.message is not None:
            LinkLayerOnlineInfoResponseAddMessage(builder, message)
        if self.macAddress is not None:
            LinkLayerOnlineInfoResponseAddMacAddress(builder, macAddress)
        LinkLayerOnlineInfoResponseAddFrameRepeatCntSupport(builder, self.frameRepeatCntSupport)
        LinkLayerOnlineInfoResponseAddLinkSpeed(builder, self.linkSpeed)
        LinkLayerOnlineInfoResponseAddLinkMode(builder, self.linkMode)
        LinkLayerOnlineInfoResponseAddLinkStatus(builder, self.linkStatus)
        LinkLayerOnlineInfoResponseAddRefClockWidth(builder, self.refClockWidth)
        LinkLayerOnlineInfoResponseAddSystemTime(builder, self.systemTime)
        LinkLayerOnlineInfoResponseAddPhysicalErrorCnt(builder, self.physicalErrorCnt)
        LinkLayerOnlineInfoResponseAddTelegramErrorCnt(builder, self.telegramErrorCnt)
        linkLayerOnlineInfoResponse = LinkLayerOnlineInfoResponseEnd(builder)
        return linkLayerOnlineInfoResponse
