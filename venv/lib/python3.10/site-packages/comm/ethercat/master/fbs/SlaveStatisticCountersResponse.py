# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave statistic counters response
class SlaveStatisticCountersResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveStatisticCountersResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveStatisticCountersResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveStatisticCountersResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Application layer status code (ESC register 0x0134)
    # SlaveStatisticCountersResponse
    def AlStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Error Counter ‘Processing Unit’ (ESC register 0x030C)
    # SlaveStatisticCountersResponse
    def ProcUnitErrorCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Error Counter ‘Process Data Interface’ (ESC register 0x030D)
    # SlaveStatisticCountersResponse
    def PdiErrorCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Port related error counters
    # SlaveStatisticCountersResponse
    def PortErrorCounters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            from comm.ethercat.master.fbs.PortErrorCounters import PortErrorCounters
            obj = PortErrorCounters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveStatisticCountersResponse
    def PortErrorCountersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveStatisticCountersResponse
    def PortErrorCountersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def SlaveStatisticCountersResponseStart(builder): builder.StartObject(4)
def Start(builder):
    return SlaveStatisticCountersResponseStart(builder)
def SlaveStatisticCountersResponseAddAlStatusCode(builder, alStatusCode): builder.PrependUint16Slot(0, alStatusCode, 0)
def AddAlStatusCode(builder, alStatusCode):
    return SlaveStatisticCountersResponseAddAlStatusCode(builder, alStatusCode)
def SlaveStatisticCountersResponseAddProcUnitErrorCounter(builder, procUnitErrorCounter): builder.PrependUint8Slot(1, procUnitErrorCounter, 0)
def AddProcUnitErrorCounter(builder, procUnitErrorCounter):
    return SlaveStatisticCountersResponseAddProcUnitErrorCounter(builder, procUnitErrorCounter)
def SlaveStatisticCountersResponseAddPdiErrorCounter(builder, pdiErrorCounter): builder.PrependUint8Slot(2, pdiErrorCounter, 0)
def AddPdiErrorCounter(builder, pdiErrorCounter):
    return SlaveStatisticCountersResponseAddPdiErrorCounter(builder, pdiErrorCounter)
def SlaveStatisticCountersResponseAddPortErrorCounters(builder, portErrorCounters): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(portErrorCounters), 0)
def AddPortErrorCounters(builder, portErrorCounters):
    return SlaveStatisticCountersResponseAddPortErrorCounters(builder, portErrorCounters)
def SlaveStatisticCountersResponseStartPortErrorCountersVector(builder, numElems): return builder.StartVector(4, numElems, 1)
def StartPortErrorCountersVector(builder, numElems):
    return SlaveStatisticCountersResponseStartPortErrorCountersVector(builder, numElems)
def SlaveStatisticCountersResponseEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveStatisticCountersResponseEnd(builder)
import comm.ethercat.master.fbs.PortErrorCounters
try:
    from typing import List
except:
    pass

class SlaveStatisticCountersResponseT(object):

    # SlaveStatisticCountersResponseT
    def __init__(self):
        self.alStatusCode = 0  # type: int
        self.procUnitErrorCounter = 0  # type: int
        self.pdiErrorCounter = 0  # type: int
        self.portErrorCounters = None  # type: List[comm.ethercat.master.fbs.PortErrorCounters.PortErrorCountersT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveStatisticCountersResponse = SlaveStatisticCountersResponse()
        slaveStatisticCountersResponse.Init(buf, pos)
        return cls.InitFromObj(slaveStatisticCountersResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveStatisticCountersResponse):
        x = SlaveStatisticCountersResponseT()
        x._UnPack(slaveStatisticCountersResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.alStatusCode == other.alStatusCode and \
            self.procUnitErrorCounter == other.procUnitErrorCounter and \
            self.pdiErrorCounter == other.pdiErrorCounter and \
            self.portErrorCounters == other.portErrorCounters

    # SlaveStatisticCountersResponseT
    def _UnPack(self, slaveStatisticCountersResponse):
        if slaveStatisticCountersResponse is None:
            return
        self.alStatusCode = slaveStatisticCountersResponse.AlStatusCode()
        self.procUnitErrorCounter = slaveStatisticCountersResponse.ProcUnitErrorCounter()
        self.pdiErrorCounter = slaveStatisticCountersResponse.PdiErrorCounter()
        if not slaveStatisticCountersResponse.PortErrorCountersIsNone():
            self.portErrorCounters = []
            for i in range(slaveStatisticCountersResponse.PortErrorCountersLength()):
                if slaveStatisticCountersResponse.PortErrorCounters(i) is None:
                    self.portErrorCounters.append(None)
                else:
                    portErrorCounters_ = comm.ethercat.master.fbs.PortErrorCounters.PortErrorCountersT.InitFromObj(slaveStatisticCountersResponse.PortErrorCounters(i))
                    self.portErrorCounters.append(portErrorCounters_)

    # SlaveStatisticCountersResponseT
    def Pack(self, builder):
        if self.portErrorCounters is not None:
            SlaveStatisticCountersResponseStartPortErrorCountersVector(builder, len(self.portErrorCounters))
            for i in reversed(range(len(self.portErrorCounters))):
                self.portErrorCounters[i].Pack(builder)
            portErrorCounters = builder.EndVector()
        SlaveStatisticCountersResponseStart(builder)
        SlaveStatisticCountersResponseAddAlStatusCode(builder, self.alStatusCode)
        SlaveStatisticCountersResponseAddProcUnitErrorCounter(builder, self.procUnitErrorCounter)
        SlaveStatisticCountersResponseAddPdiErrorCounter(builder, self.pdiErrorCounter)
        if self.portErrorCounters is not None:
            SlaveStatisticCountersResponseAddPortErrorCounters(builder, portErrorCounters)
        slaveStatisticCountersResponse = SlaveStatisticCountersResponseEnd(builder)
        return slaveStatisticCountersResponse
