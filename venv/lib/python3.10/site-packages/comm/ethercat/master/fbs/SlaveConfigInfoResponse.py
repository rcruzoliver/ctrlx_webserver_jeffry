# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave configuration response
class SlaveConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveConfigInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Auto increment address
    # SlaveConfigInfoResponse
    def AutoIncAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #EtherCAT address, fixed physical
    # SlaveConfigInfoResponse
    def EthercatAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Address offset (ADO) for identification command
    # SlaveConfigInfoResponse
    def IdentifyAdo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Identification value to be validated (identifyAdo value)
    # SlaveConfigInfoResponse
    def IdentifyValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Internal slave id (internal use)
    # SlaveConfigInfoResponse
    def SlaveHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Index of the hot connect group (0 = mandatory)
    # SlaveConfigInfoResponse
    def HcGroupIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #EtherCAT address of the previous slave
    # SlaveConfigInfoResponse
    def PreviousEthercatAddr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Connected port of the previous slave
    # SlaveConfigInfoResponse
    def PreviousPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Slave identity info
    # SlaveConfigInfoResponse
    def SlaveIdentity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatIdentityInfo import EthercatIdentityInfo
            obj = EthercatIdentityInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #configured device name
    # SlaveConfigInfoResponse
    def SlaveName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    #Mailbox supported Protocols (config data)
    #Bit 0: AoE (ADS over EtherCAT) (ADS: Automation Device Specification)
    #Bit 1: EoE (Ethernet over EtherCAT)
    #Bit 2: CoE (CAN application protocol over EtherCAT)
    #Bit 3: FoE (File access over EtherCAT)
    #Bit 4: SoE (Servo drive over EtherCAT)
    #Bit 5: VoE (Vendor specific protocol over EtherCAT)
    #Bit 6 to 31: Reserved
    # SlaveConfigInfoResponse
    def MbxProtocols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Mailbox standard size
    # SlaveConfigInfoResponse
    def MbxStandard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMailboxInfo import EthercatMailboxInfo
            obj = EthercatMailboxInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Mailbox bootstrap size
    # SlaveConfigInfoResponse
    def MbxBootstrap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from comm.ethercat.master.fbs.EthercatMailboxInfo import EthercatMailboxInfo
            obj = EthercatMailboxInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Process data in size and offset
    #Offset and size both in units of bits
    # SlaveConfigInfoResponse
    def ProcessDataIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def ProcessDataInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def ProcessDataInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    #Process data out size and offset
    #Offset and size both in units of bits
    # SlaveConfigInfoResponse
    def ProcessDataOut(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from comm.ethercat.master.fbs.EthercatMemoryInfo import EthercatMemoryInfo
            obj = EthercatMemoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveConfigInfoResponse
    def ProcessDataOutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def ProcessDataOutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    #Number of process input variables 
    # SlaveConfigInfoResponse
    def NumProcessVarsIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Number of process output variables
    # SlaveConfigInfoResponse
    def NumProcessVarsOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Port descriptor (ESC register 0x0007) (0b10 = EBUS, 0b11 = MII/..) (Port0^Bit0:1, Port1^Bit2:3, Port2^Bit4:5, Port3^Bit6:7)
    # SlaveConfigInfoResponse
    def PortDescriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Reserved
    # SlaveConfigInfoResponse
    def Reserved01(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SlaveConfigInfoResponse
    def Reserved01AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved01Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved01IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    #(internal - do not use)
    # SlaveConfigInfoResponse
    def WkcStateDiagOffsIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsInAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    #(internal - do not use)
    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOut(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOutAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOutLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def WkcStateDiagOffsOutIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    #Reserved
    # SlaveConfigInfoResponse
    def Reserved02(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SlaveConfigInfoResponse
    def Reserved02AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved02Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveConfigInfoResponse
    def Reserved02IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    #Slave is present connected and reachable over the bus (online)
    # SlaveConfigInfoResponse
    def IsPresent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #The Hot Connect Group of the slave is present
    # SlaveConfigInfoResponse
    def IsHcGroupPresent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    #Slave supports DC (Distributed Clock)
    # SlaveConfigInfoResponse
    def DcSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SlaveConfigInfoResponseStart(builder): builder.StartObject(25)
def Start(builder):
    return SlaveConfigInfoResponseStart(builder)
def SlaveConfigInfoResponseAddAutoIncAddr(builder, autoIncAddr): builder.PrependUint16Slot(0, autoIncAddr, 0)
def AddAutoIncAddr(builder, autoIncAddr):
    return SlaveConfigInfoResponseAddAutoIncAddr(builder, autoIncAddr)
def SlaveConfigInfoResponseAddEthercatAddr(builder, ethercatAddr): builder.PrependUint16Slot(1, ethercatAddr, 0)
def AddEthercatAddr(builder, ethercatAddr):
    return SlaveConfigInfoResponseAddEthercatAddr(builder, ethercatAddr)
def SlaveConfigInfoResponseAddIdentifyAdo(builder, identifyAdo): builder.PrependUint16Slot(2, identifyAdo, 0)
def AddIdentifyAdo(builder, identifyAdo):
    return SlaveConfigInfoResponseAddIdentifyAdo(builder, identifyAdo)
def SlaveConfigInfoResponseAddIdentifyValue(builder, identifyValue): builder.PrependUint16Slot(3, identifyValue, 0)
def AddIdentifyValue(builder, identifyValue):
    return SlaveConfigInfoResponseAddIdentifyValue(builder, identifyValue)
def SlaveConfigInfoResponseAddSlaveHandle(builder, slaveHandle): builder.PrependUint32Slot(4, slaveHandle, 0)
def AddSlaveHandle(builder, slaveHandle):
    return SlaveConfigInfoResponseAddSlaveHandle(builder, slaveHandle)
def SlaveConfigInfoResponseAddHcGroupIdx(builder, hcGroupIdx): builder.PrependUint32Slot(5, hcGroupIdx, 0)
def AddHcGroupIdx(builder, hcGroupIdx):
    return SlaveConfigInfoResponseAddHcGroupIdx(builder, hcGroupIdx)
def SlaveConfigInfoResponseAddPreviousEthercatAddr(builder, previousEthercatAddr): builder.PrependUint16Slot(6, previousEthercatAddr, 0)
def AddPreviousEthercatAddr(builder, previousEthercatAddr):
    return SlaveConfigInfoResponseAddPreviousEthercatAddr(builder, previousEthercatAddr)
def SlaveConfigInfoResponseAddPreviousPort(builder, previousPort): builder.PrependUint16Slot(7, previousPort, 0)
def AddPreviousPort(builder, previousPort):
    return SlaveConfigInfoResponseAddPreviousPort(builder, previousPort)
def SlaveConfigInfoResponseAddSlaveIdentity(builder, slaveIdentity): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(slaveIdentity), 0)
def AddSlaveIdentity(builder, slaveIdentity):
    return SlaveConfigInfoResponseAddSlaveIdentity(builder, slaveIdentity)
def SlaveConfigInfoResponseAddSlaveName(builder, slaveName): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(slaveName), 0)
def AddSlaveName(builder, slaveName):
    return SlaveConfigInfoResponseAddSlaveName(builder, slaveName)
def SlaveConfigInfoResponseAddMbxProtocols(builder, mbxProtocols): builder.PrependUint32Slot(10, mbxProtocols, 0)
def AddMbxProtocols(builder, mbxProtocols):
    return SlaveConfigInfoResponseAddMbxProtocols(builder, mbxProtocols)
def SlaveConfigInfoResponseAddMbxStandard(builder, mbxStandard): builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(mbxStandard), 0)
def AddMbxStandard(builder, mbxStandard):
    return SlaveConfigInfoResponseAddMbxStandard(builder, mbxStandard)
def SlaveConfigInfoResponseAddMbxBootstrap(builder, mbxBootstrap): builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(mbxBootstrap), 0)
def AddMbxBootstrap(builder, mbxBootstrap):
    return SlaveConfigInfoResponseAddMbxBootstrap(builder, mbxBootstrap)
def SlaveConfigInfoResponseAddProcessDataIn(builder, processDataIn): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(processDataIn), 0)
def AddProcessDataIn(builder, processDataIn):
    return SlaveConfigInfoResponseAddProcessDataIn(builder, processDataIn)
def SlaveConfigInfoResponseStartProcessDataInVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartProcessDataInVector(builder, numElems):
    return SlaveConfigInfoResponseStartProcessDataInVector(builder, numElems)
def SlaveConfigInfoResponseAddProcessDataOut(builder, processDataOut): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(processDataOut), 0)
def AddProcessDataOut(builder, processDataOut):
    return SlaveConfigInfoResponseAddProcessDataOut(builder, processDataOut)
def SlaveConfigInfoResponseStartProcessDataOutVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartProcessDataOutVector(builder, numElems):
    return SlaveConfigInfoResponseStartProcessDataOutVector(builder, numElems)
def SlaveConfigInfoResponseAddNumProcessVarsIn(builder, numProcessVarsIn): builder.PrependUint16Slot(15, numProcessVarsIn, 0)
def AddNumProcessVarsIn(builder, numProcessVarsIn):
    return SlaveConfigInfoResponseAddNumProcessVarsIn(builder, numProcessVarsIn)
def SlaveConfigInfoResponseAddNumProcessVarsOut(builder, numProcessVarsOut): builder.PrependUint16Slot(16, numProcessVarsOut, 0)
def AddNumProcessVarsOut(builder, numProcessVarsOut):
    return SlaveConfigInfoResponseAddNumProcessVarsOut(builder, numProcessVarsOut)
def SlaveConfigInfoResponseAddPortDescriptor(builder, portDescriptor): builder.PrependUint8Slot(17, portDescriptor, 0)
def AddPortDescriptor(builder, portDescriptor):
    return SlaveConfigInfoResponseAddPortDescriptor(builder, portDescriptor)
def SlaveConfigInfoResponseAddReserved01(builder, reserved01): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(reserved01), 0)
def AddReserved01(builder, reserved01):
    return SlaveConfigInfoResponseAddReserved01(builder, reserved01)
def SlaveConfigInfoResponseStartReserved01Vector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartReserved01Vector(builder, numElems):
    return SlaveConfigInfoResponseStartReserved01Vector(builder, numElems)
def SlaveConfigInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(wkcStateDiagOffsIn), 0)
def AddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn):
    return SlaveConfigInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn)
def SlaveConfigInfoResponseStartWkcStateDiagOffsInVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartWkcStateDiagOffsInVector(builder, numElems):
    return SlaveConfigInfoResponseStartWkcStateDiagOffsInVector(builder, numElems)
def SlaveConfigInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(wkcStateDiagOffsOut), 0)
def AddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut):
    return SlaveConfigInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut)
def SlaveConfigInfoResponseStartWkcStateDiagOffsOutVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartWkcStateDiagOffsOutVector(builder, numElems):
    return SlaveConfigInfoResponseStartWkcStateDiagOffsOutVector(builder, numElems)
def SlaveConfigInfoResponseAddReserved02(builder, reserved02): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(reserved02), 0)
def AddReserved02(builder, reserved02):
    return SlaveConfigInfoResponseAddReserved02(builder, reserved02)
def SlaveConfigInfoResponseStartReserved02Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartReserved02Vector(builder, numElems):
    return SlaveConfigInfoResponseStartReserved02Vector(builder, numElems)
def SlaveConfigInfoResponseAddIsPresent(builder, isPresent): builder.PrependBoolSlot(22, isPresent, 0)
def AddIsPresent(builder, isPresent):
    return SlaveConfigInfoResponseAddIsPresent(builder, isPresent)
def SlaveConfigInfoResponseAddIsHcGroupPresent(builder, isHcGroupPresent): builder.PrependBoolSlot(23, isHcGroupPresent, 0)
def AddIsHcGroupPresent(builder, isHcGroupPresent):
    return SlaveConfigInfoResponseAddIsHcGroupPresent(builder, isHcGroupPresent)
def SlaveConfigInfoResponseAddDcSupport(builder, dcSupport): builder.PrependBoolSlot(24, dcSupport, 0)
def AddDcSupport(builder, dcSupport):
    return SlaveConfigInfoResponseAddDcSupport(builder, dcSupport)
def SlaveConfigInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveConfigInfoResponseEnd(builder)
import comm.ethercat.master.fbs.EthercatIdentityInfo
import comm.ethercat.master.fbs.EthercatMailboxInfo
import comm.ethercat.master.fbs.EthercatMemoryInfo
try:
    from typing import List, Optional
except:
    pass

class SlaveConfigInfoResponseT(object):

    # SlaveConfigInfoResponseT
    def __init__(self):
        self.autoIncAddr = 0  # type: int
        self.ethercatAddr = 0  # type: int
        self.identifyAdo = 0  # type: int
        self.identifyValue = 0  # type: int
        self.slaveHandle = 0  # type: int
        self.hcGroupIdx = 0  # type: int
        self.previousEthercatAddr = 0  # type: int
        self.previousPort = 0  # type: int
        self.slaveIdentity = None  # type: Optional[comm.ethercat.master.fbs.EthercatIdentityInfo.EthercatIdentityInfoT]
        self.slaveName = None  # type: str
        self.mbxProtocols = 0  # type: int
        self.mbxStandard = None  # type: Optional[comm.ethercat.master.fbs.EthercatMailboxInfo.EthercatMailboxInfoT]
        self.mbxBootstrap = None  # type: Optional[comm.ethercat.master.fbs.EthercatMailboxInfo.EthercatMailboxInfoT]
        self.processDataIn = None  # type: List[comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT]
        self.processDataOut = None  # type: List[comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT]
        self.numProcessVarsIn = 0  # type: int
        self.numProcessVarsOut = 0  # type: int
        self.portDescriptor = 0  # type: int
        self.reserved01 = None  # type: List[int]
        self.wkcStateDiagOffsIn = None  # type: List[int]
        self.wkcStateDiagOffsOut = None  # type: List[int]
        self.reserved02 = None  # type: List[int]
        self.isPresent = False  # type: bool
        self.isHcGroupPresent = False  # type: bool
        self.dcSupport = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveConfigInfoResponse = SlaveConfigInfoResponse()
        slaveConfigInfoResponse.Init(buf, pos)
        return cls.InitFromObj(slaveConfigInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveConfigInfoResponse):
        x = SlaveConfigInfoResponseT()
        x._UnPack(slaveConfigInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.autoIncAddr == other.autoIncAddr and \
            self.ethercatAddr == other.ethercatAddr and \
            self.identifyAdo == other.identifyAdo and \
            self.identifyValue == other.identifyValue and \
            self.slaveHandle == other.slaveHandle and \
            self.hcGroupIdx == other.hcGroupIdx and \
            self.previousEthercatAddr == other.previousEthercatAddr and \
            self.previousPort == other.previousPort and \
            self.slaveIdentity == other.slaveIdentity and \
            self.slaveName == other.slaveName and \
            self.mbxProtocols == other.mbxProtocols and \
            self.mbxStandard == other.mbxStandard and \
            self.mbxBootstrap == other.mbxBootstrap and \
            self.processDataIn == other.processDataIn and \
            self.processDataOut == other.processDataOut and \
            self.numProcessVarsIn == other.numProcessVarsIn and \
            self.numProcessVarsOut == other.numProcessVarsOut and \
            self.portDescriptor == other.portDescriptor and \
            self.reserved01 == other.reserved01 and \
            self.wkcStateDiagOffsIn == other.wkcStateDiagOffsIn and \
            self.wkcStateDiagOffsOut == other.wkcStateDiagOffsOut and \
            self.reserved02 == other.reserved02 and \
            self.isPresent == other.isPresent and \
            self.isHcGroupPresent == other.isHcGroupPresent and \
            self.dcSupport == other.dcSupport

    # SlaveConfigInfoResponseT
    def _UnPack(self, slaveConfigInfoResponse):
        if slaveConfigInfoResponse is None:
            return
        self.autoIncAddr = slaveConfigInfoResponse.AutoIncAddr()
        self.ethercatAddr = slaveConfigInfoResponse.EthercatAddr()
        self.identifyAdo = slaveConfigInfoResponse.IdentifyAdo()
        self.identifyValue = slaveConfigInfoResponse.IdentifyValue()
        self.slaveHandle = slaveConfigInfoResponse.SlaveHandle()
        self.hcGroupIdx = slaveConfigInfoResponse.HcGroupIdx()
        self.previousEthercatAddr = slaveConfigInfoResponse.PreviousEthercatAddr()
        self.previousPort = slaveConfigInfoResponse.PreviousPort()
        if slaveConfigInfoResponse.SlaveIdentity() is not None:
            self.slaveIdentity = comm.ethercat.master.fbs.EthercatIdentityInfo.EthercatIdentityInfoT.InitFromObj(slaveConfigInfoResponse.SlaveIdentity())
        self.slaveName = slaveConfigInfoResponse.SlaveName()
        self.mbxProtocols = slaveConfigInfoResponse.MbxProtocols()
        if slaveConfigInfoResponse.MbxStandard() is not None:
            self.mbxStandard = comm.ethercat.master.fbs.EthercatMailboxInfo.EthercatMailboxInfoT.InitFromObj(slaveConfigInfoResponse.MbxStandard())
        if slaveConfigInfoResponse.MbxBootstrap() is not None:
            self.mbxBootstrap = comm.ethercat.master.fbs.EthercatMailboxInfo.EthercatMailboxInfoT.InitFromObj(slaveConfigInfoResponse.MbxBootstrap())
        if not slaveConfigInfoResponse.ProcessDataInIsNone():
            self.processDataIn = []
            for i in range(slaveConfigInfoResponse.ProcessDataInLength()):
                if slaveConfigInfoResponse.ProcessDataIn(i) is None:
                    self.processDataIn.append(None)
                else:
                    ethercatMemoryInfo_ = comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT.InitFromObj(slaveConfigInfoResponse.ProcessDataIn(i))
                    self.processDataIn.append(ethercatMemoryInfo_)
        if not slaveConfigInfoResponse.ProcessDataOutIsNone():
            self.processDataOut = []
            for i in range(slaveConfigInfoResponse.ProcessDataOutLength()):
                if slaveConfigInfoResponse.ProcessDataOut(i) is None:
                    self.processDataOut.append(None)
                else:
                    ethercatMemoryInfo_ = comm.ethercat.master.fbs.EthercatMemoryInfo.EthercatMemoryInfoT.InitFromObj(slaveConfigInfoResponse.ProcessDataOut(i))
                    self.processDataOut.append(ethercatMemoryInfo_)
        self.numProcessVarsIn = slaveConfigInfoResponse.NumProcessVarsIn()
        self.numProcessVarsOut = slaveConfigInfoResponse.NumProcessVarsOut()
        self.portDescriptor = slaveConfigInfoResponse.PortDescriptor()
        if not slaveConfigInfoResponse.Reserved01IsNone():
            if np is None:
                self.reserved01 = []
                for i in range(slaveConfigInfoResponse.Reserved01Length()):
                    self.reserved01.append(slaveConfigInfoResponse.Reserved01(i))
            else:
                self.reserved01 = slaveConfigInfoResponse.Reserved01AsNumpy()
        if not slaveConfigInfoResponse.WkcStateDiagOffsInIsNone():
            if np is None:
                self.wkcStateDiagOffsIn = []
                for i in range(slaveConfigInfoResponse.WkcStateDiagOffsInLength()):
                    self.wkcStateDiagOffsIn.append(slaveConfigInfoResponse.WkcStateDiagOffsIn(i))
            else:
                self.wkcStateDiagOffsIn = slaveConfigInfoResponse.WkcStateDiagOffsInAsNumpy()
        if not slaveConfigInfoResponse.WkcStateDiagOffsOutIsNone():
            if np is None:
                self.wkcStateDiagOffsOut = []
                for i in range(slaveConfigInfoResponse.WkcStateDiagOffsOutLength()):
                    self.wkcStateDiagOffsOut.append(slaveConfigInfoResponse.WkcStateDiagOffsOut(i))
            else:
                self.wkcStateDiagOffsOut = slaveConfigInfoResponse.WkcStateDiagOffsOutAsNumpy()
        if not slaveConfigInfoResponse.Reserved02IsNone():
            if np is None:
                self.reserved02 = []
                for i in range(slaveConfigInfoResponse.Reserved02Length()):
                    self.reserved02.append(slaveConfigInfoResponse.Reserved02(i))
            else:
                self.reserved02 = slaveConfigInfoResponse.Reserved02AsNumpy()
        self.isPresent = slaveConfigInfoResponse.IsPresent()
        self.isHcGroupPresent = slaveConfigInfoResponse.IsHcGroupPresent()
        self.dcSupport = slaveConfigInfoResponse.DcSupport()

    # SlaveConfigInfoResponseT
    def Pack(self, builder):
        if self.slaveName is not None:
            slaveName = builder.CreateString(self.slaveName)
        if self.processDataIn is not None:
            SlaveConfigInfoResponseStartProcessDataInVector(builder, len(self.processDataIn))
            for i in reversed(range(len(self.processDataIn))):
                self.processDataIn[i].Pack(builder)
            processDataIn = builder.EndVector()
        if self.processDataOut is not None:
            SlaveConfigInfoResponseStartProcessDataOutVector(builder, len(self.processDataOut))
            for i in reversed(range(len(self.processDataOut))):
                self.processDataOut[i].Pack(builder)
            processDataOut = builder.EndVector()
        if self.reserved01 is not None:
            if np is not None and type(self.reserved01) is np.ndarray:
                reserved01 = builder.CreateNumpyVector(self.reserved01)
            else:
                SlaveConfigInfoResponseStartReserved01Vector(builder, len(self.reserved01))
                for i in reversed(range(len(self.reserved01))):
                    builder.PrependUint8(self.reserved01[i])
                reserved01 = builder.EndVector()
        if self.wkcStateDiagOffsIn is not None:
            if np is not None and type(self.wkcStateDiagOffsIn) is np.ndarray:
                wkcStateDiagOffsIn = builder.CreateNumpyVector(self.wkcStateDiagOffsIn)
            else:
                SlaveConfigInfoResponseStartWkcStateDiagOffsInVector(builder, len(self.wkcStateDiagOffsIn))
                for i in reversed(range(len(self.wkcStateDiagOffsIn))):
                    builder.PrependUint16(self.wkcStateDiagOffsIn[i])
                wkcStateDiagOffsIn = builder.EndVector()
        if self.wkcStateDiagOffsOut is not None:
            if np is not None and type(self.wkcStateDiagOffsOut) is np.ndarray:
                wkcStateDiagOffsOut = builder.CreateNumpyVector(self.wkcStateDiagOffsOut)
            else:
                SlaveConfigInfoResponseStartWkcStateDiagOffsOutVector(builder, len(self.wkcStateDiagOffsOut))
                for i in reversed(range(len(self.wkcStateDiagOffsOut))):
                    builder.PrependUint16(self.wkcStateDiagOffsOut[i])
                wkcStateDiagOffsOut = builder.EndVector()
        if self.reserved02 is not None:
            if np is not None and type(self.reserved02) is np.ndarray:
                reserved02 = builder.CreateNumpyVector(self.reserved02)
            else:
                SlaveConfigInfoResponseStartReserved02Vector(builder, len(self.reserved02))
                for i in reversed(range(len(self.reserved02))):
                    builder.PrependUint32(self.reserved02[i])
                reserved02 = builder.EndVector()
        SlaveConfigInfoResponseStart(builder)
        SlaveConfigInfoResponseAddAutoIncAddr(builder, self.autoIncAddr)
        SlaveConfigInfoResponseAddEthercatAddr(builder, self.ethercatAddr)
        SlaveConfigInfoResponseAddIdentifyAdo(builder, self.identifyAdo)
        SlaveConfigInfoResponseAddIdentifyValue(builder, self.identifyValue)
        SlaveConfigInfoResponseAddSlaveHandle(builder, self.slaveHandle)
        SlaveConfigInfoResponseAddHcGroupIdx(builder, self.hcGroupIdx)
        SlaveConfigInfoResponseAddPreviousEthercatAddr(builder, self.previousEthercatAddr)
        SlaveConfigInfoResponseAddPreviousPort(builder, self.previousPort)
        if self.slaveIdentity is not None:
            slaveIdentity = self.slaveIdentity.Pack(builder)
            SlaveConfigInfoResponseAddSlaveIdentity(builder, slaveIdentity)
        if self.slaveName is not None:
            SlaveConfigInfoResponseAddSlaveName(builder, slaveName)
        SlaveConfigInfoResponseAddMbxProtocols(builder, self.mbxProtocols)
        if self.mbxStandard is not None:
            mbxStandard = self.mbxStandard.Pack(builder)
            SlaveConfigInfoResponseAddMbxStandard(builder, mbxStandard)
        if self.mbxBootstrap is not None:
            mbxBootstrap = self.mbxBootstrap.Pack(builder)
            SlaveConfigInfoResponseAddMbxBootstrap(builder, mbxBootstrap)
        if self.processDataIn is not None:
            SlaveConfigInfoResponseAddProcessDataIn(builder, processDataIn)
        if self.processDataOut is not None:
            SlaveConfigInfoResponseAddProcessDataOut(builder, processDataOut)
        SlaveConfigInfoResponseAddNumProcessVarsIn(builder, self.numProcessVarsIn)
        SlaveConfigInfoResponseAddNumProcessVarsOut(builder, self.numProcessVarsOut)
        SlaveConfigInfoResponseAddPortDescriptor(builder, self.portDescriptor)
        if self.reserved01 is not None:
            SlaveConfigInfoResponseAddReserved01(builder, reserved01)
        if self.wkcStateDiagOffsIn is not None:
            SlaveConfigInfoResponseAddWkcStateDiagOffsIn(builder, wkcStateDiagOffsIn)
        if self.wkcStateDiagOffsOut is not None:
            SlaveConfigInfoResponseAddWkcStateDiagOffsOut(builder, wkcStateDiagOffsOut)
        if self.reserved02 is not None:
            SlaveConfigInfoResponseAddReserved02(builder, reserved02)
        SlaveConfigInfoResponseAddIsPresent(builder, self.isPresent)
        SlaveConfigInfoResponseAddIsHcGroupPresent(builder, self.isHcGroupPresent)
        SlaveConfigInfoResponseAddDcSupport(builder, self.dcSupport)
        slaveConfigInfoResponse = SlaveConfigInfoResponseEnd(builder)
        return slaveConfigInfoResponse
