# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Protocol statistic counters 
class ProtocolStatistic(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 32

    # ProtocolStatistic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProtocolStatistic
    def Read(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # ProtocolStatistic
    def Write(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 16)
        return obj


def CreateProtocolStatistic(builder, read_total_numRequests, read_total_numBytes, read_lastSecond_numRequests, read_lastSecond_numBytes, write_total_numRequests, write_total_numBytes, write_lastSecond_numRequests, write_lastSecond_numBytes):
    builder.Prep(4, 32)
    builder.Prep(4, 16)
    builder.Prep(4, 8)
    builder.PrependUint32(write_lastSecond_numBytes)
    builder.PrependUint32(write_lastSecond_numRequests)
    builder.Prep(4, 8)
    builder.PrependUint32(write_total_numBytes)
    builder.PrependUint32(write_total_numRequests)
    builder.Prep(4, 16)
    builder.Prep(4, 8)
    builder.PrependUint32(read_lastSecond_numBytes)
    builder.PrependUint32(read_lastSecond_numRequests)
    builder.Prep(4, 8)
    builder.PrependUint32(read_total_numBytes)
    builder.PrependUint32(read_total_numRequests)
    return builder.Offset()

import comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters
try:
    from typing import Optional
except:
    pass

class ProtocolStatisticT(object):

    # ProtocolStatisticT
    def __init__(self):
        self.read = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCountersT]
        self.write = None  # type: Optional[comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCountersT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        protocolStatistic = ProtocolStatistic()
        protocolStatistic.Init(buf, pos)
        return cls.InitFromObj(protocolStatistic)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, protocolStatistic):
        x = ProtocolStatisticT()
        x._UnPack(protocolStatistic)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.read == other.read and \
            self.write == other.write

    # ProtocolStatisticT
    def _UnPack(self, protocolStatistic):
        if protocolStatistic is None:
            return
        if protocolStatistic.Read(comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCounters()) is not None:
            self.read = comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCountersT.InitFromObj(protocolStatistic.Read(comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCounters()))
        if protocolStatistic.Write(comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCounters()) is not None:
            self.write = comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCountersT.InitFromObj(protocolStatistic.Write(comm.ethercat.master.fbs.ProtocolStatisticPeriodCounters.ProtocolStatisticPeriodCounters()))

    # ProtocolStatisticT
    def Pack(self, builder):
        return CreateProtocolStatistic(builder, self.read.total.numRequests, self.read.total.numBytes, self.read.lastSecond.numRequests, self.read.lastSecond.numBytes, self.write.total.numRequests, self.write.total.numBytes, self.write.lastSecond.numRequests, self.write.lastSecond.numBytes)
