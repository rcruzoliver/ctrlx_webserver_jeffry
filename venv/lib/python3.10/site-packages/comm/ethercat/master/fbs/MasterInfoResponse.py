# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Master info response
class MasterInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MasterInfoResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMasterInfoResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MasterInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Returns the current and requested EtherCAT master state.
    #If both are equal, the master is done switching states.
    # MasterInfoResponse
    def MasterState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.MasterStateResponse import MasterStateResponse
            obj = MasterStateResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Master status, 0 = master and all slaves are in Op, no errors or inconsistencies are present
    # MasterInfoResponse
    def MasterStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    #Checksum elements
    # MasterInfoResponse
    def Checksums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.ChecksumElement import ChecksumElement
            obj = ChecksumElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MasterInfoResponse
    def ChecksumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MasterInfoResponse
    def ChecksumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    #Topology status
    # MasterInfoResponse
    def TopologyStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.TopologyStatusResponse import TopologyStatusResponse
            obj = TopologyStatusResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #System time in nanoseconds since 2000-01-01
    # MasterInfoResponse
    def SystemTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    #Task info
    # MasterInfoResponse
    def TaskInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.taskInfo import taskInfo
            obj = taskInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MasterInfoResponse
    def TaskInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MasterInfoResponse
    def TaskInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    #EtherCAT master component state
    # MasterInfoResponse
    def ComponentState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs2.State import State
            obj = State()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MasterInfoResponseStart(builder): builder.StartObject(7)
def Start(builder):
    return MasterInfoResponseStart(builder)
def MasterInfoResponseAddMasterState(builder, masterState): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(masterState), 0)
def AddMasterState(builder, masterState):
    return MasterInfoResponseAddMasterState(builder, masterState)
def MasterInfoResponseAddMasterStatus(builder, masterStatus): builder.PrependUint32Slot(1, masterStatus, 0)
def AddMasterStatus(builder, masterStatus):
    return MasterInfoResponseAddMasterStatus(builder, masterStatus)
def MasterInfoResponseAddChecksums(builder, checksums): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checksums), 0)
def AddChecksums(builder, checksums):
    return MasterInfoResponseAddChecksums(builder, checksums)
def MasterInfoResponseStartChecksumsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChecksumsVector(builder, numElems):
    return MasterInfoResponseStartChecksumsVector(builder, numElems)
def MasterInfoResponseAddTopologyStatus(builder, topologyStatus): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(topologyStatus), 0)
def AddTopologyStatus(builder, topologyStatus):
    return MasterInfoResponseAddTopologyStatus(builder, topologyStatus)
def MasterInfoResponseAddSystemTime(builder, systemTime): builder.PrependUint64Slot(4, systemTime, 0)
def AddSystemTime(builder, systemTime):
    return MasterInfoResponseAddSystemTime(builder, systemTime)
def MasterInfoResponseAddTaskInfos(builder, taskInfos): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(taskInfos), 0)
def AddTaskInfos(builder, taskInfos):
    return MasterInfoResponseAddTaskInfos(builder, taskInfos)
def MasterInfoResponseStartTaskInfosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTaskInfosVector(builder, numElems):
    return MasterInfoResponseStartTaskInfosVector(builder, numElems)
def MasterInfoResponseAddComponentState(builder, componentState): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(componentState), 0)
def AddComponentState(builder, componentState):
    return MasterInfoResponseAddComponentState(builder, componentState)
def MasterInfoResponseEnd(builder): return builder.EndObject()
def End(builder):
    return MasterInfoResponseEnd(builder)
import comm.ethercat.master.fbs.ChecksumElement
import comm.ethercat.master.fbs.MasterStateResponse
import comm.ethercat.master.fbs.TopologyStatusResponse
import comm.ethercat.master.fbs.taskInfo
import common.scheduler.fbs2.State
try:
    from typing import List, Optional
except:
    pass

class MasterInfoResponseT(object):

    # MasterInfoResponseT
    def __init__(self):
        self.masterState = None  # type: Optional[comm.ethercat.master.fbs.MasterStateResponse.MasterStateResponseT]
        self.masterStatus = 0  # type: int
        self.checksums = None  # type: List[comm.ethercat.master.fbs.ChecksumElement.ChecksumElementT]
        self.topologyStatus = None  # type: Optional[comm.ethercat.master.fbs.TopologyStatusResponse.TopologyStatusResponseT]
        self.systemTime = 0  # type: int
        self.taskInfos = None  # type: List[comm.ethercat.master.fbs.taskInfo.taskInfoT]
        self.componentState = None  # type: Optional[common.scheduler.fbs2.State.StateT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        masterInfoResponse = MasterInfoResponse()
        masterInfoResponse.Init(buf, pos)
        return cls.InitFromObj(masterInfoResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, masterInfoResponse):
        x = MasterInfoResponseT()
        x._UnPack(masterInfoResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.masterState == other.masterState and \
            self.masterStatus == other.masterStatus and \
            self.checksums == other.checksums and \
            self.topologyStatus == other.topologyStatus and \
            self.systemTime == other.systemTime and \
            self.taskInfos == other.taskInfos and \
            self.componentState == other.componentState

    # MasterInfoResponseT
    def _UnPack(self, masterInfoResponse):
        if masterInfoResponse is None:
            return
        if masterInfoResponse.MasterState() is not None:
            self.masterState = comm.ethercat.master.fbs.MasterStateResponse.MasterStateResponseT.InitFromObj(masterInfoResponse.MasterState())
        self.masterStatus = masterInfoResponse.MasterStatus()
        if not masterInfoResponse.ChecksumsIsNone():
            self.checksums = []
            for i in range(masterInfoResponse.ChecksumsLength()):
                if masterInfoResponse.Checksums(i) is None:
                    self.checksums.append(None)
                else:
                    checksumElement_ = comm.ethercat.master.fbs.ChecksumElement.ChecksumElementT.InitFromObj(masterInfoResponse.Checksums(i))
                    self.checksums.append(checksumElement_)
        if masterInfoResponse.TopologyStatus() is not None:
            self.topologyStatus = comm.ethercat.master.fbs.TopologyStatusResponse.TopologyStatusResponseT.InitFromObj(masterInfoResponse.TopologyStatus())
        self.systemTime = masterInfoResponse.SystemTime()
        if not masterInfoResponse.TaskInfosIsNone():
            self.taskInfos = []
            for i in range(masterInfoResponse.TaskInfosLength()):
                if masterInfoResponse.TaskInfos(i) is None:
                    self.taskInfos.append(None)
                else:
                    taskInfo_ = comm.ethercat.master.fbs.taskInfo.taskInfoT.InitFromObj(masterInfoResponse.TaskInfos(i))
                    self.taskInfos.append(taskInfo_)
        if masterInfoResponse.ComponentState() is not None:
            self.componentState = common.scheduler.fbs2.State.StateT.InitFromObj(masterInfoResponse.ComponentState())

    # MasterInfoResponseT
    def Pack(self, builder):
        if self.masterState is not None:
            masterState = self.masterState.Pack(builder)
        if self.checksums is not None:
            checksumslist = []
            for i in range(len(self.checksums)):
                checksumslist.append(self.checksums[i].Pack(builder))
            MasterInfoResponseStartChecksumsVector(builder, len(self.checksums))
            for i in reversed(range(len(self.checksums))):
                builder.PrependUOffsetTRelative(checksumslist[i])
            checksums = builder.EndVector()
        if self.topologyStatus is not None:
            topologyStatus = self.topologyStatus.Pack(builder)
        if self.taskInfos is not None:
            taskInfoslist = []
            for i in range(len(self.taskInfos)):
                taskInfoslist.append(self.taskInfos[i].Pack(builder))
            MasterInfoResponseStartTaskInfosVector(builder, len(self.taskInfos))
            for i in reversed(range(len(self.taskInfos))):
                builder.PrependUOffsetTRelative(taskInfoslist[i])
            taskInfos = builder.EndVector()
        if self.componentState is not None:
            componentState = self.componentState.Pack(builder)
        MasterInfoResponseStart(builder)
        if self.masterState is not None:
            MasterInfoResponseAddMasterState(builder, masterState)
        MasterInfoResponseAddMasterStatus(builder, self.masterStatus)
        if self.checksums is not None:
            MasterInfoResponseAddChecksums(builder, checksums)
        if self.topologyStatus is not None:
            MasterInfoResponseAddTopologyStatus(builder, topologyStatus)
        MasterInfoResponseAddSystemTime(builder, self.systemTime)
        if self.taskInfos is not None:
            MasterInfoResponseAddTaskInfos(builder, taskInfos)
        if self.componentState is not None:
            MasterInfoResponseAddComponentState(builder, componentState)
        masterInfoResponse = MasterInfoResponseEnd(builder)
        return masterInfoResponse
