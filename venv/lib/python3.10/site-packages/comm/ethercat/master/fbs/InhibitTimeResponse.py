# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Inhibit time response
class InhibitTimeResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InhibitTimeResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInhibitTimeResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InhibitTimeResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Inhibit time in milliseconds
    # InhibitTimeResponse
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def InhibitTimeResponseStart(builder): builder.StartObject(1)
def Start(builder):
    return InhibitTimeResponseStart(builder)
def InhibitTimeResponseAddTime(builder, time): builder.PrependUint32Slot(0, time, 0)
def AddTime(builder, time):
    return InhibitTimeResponseAddTime(builder, time)
def InhibitTimeResponseEnd(builder): return builder.EndObject()
def End(builder):
    return InhibitTimeResponseEnd(builder)

class InhibitTimeResponseT(object):

    # InhibitTimeResponseT
    def __init__(self):
        self.time = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        inhibitTimeResponse = InhibitTimeResponse()
        inhibitTimeResponse.Init(buf, pos)
        return cls.InitFromObj(inhibitTimeResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, inhibitTimeResponse):
        x = InhibitTimeResponseT()
        x._UnPack(inhibitTimeResponse)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.time == other.time

    # InhibitTimeResponseT
    def _UnPack(self, inhibitTimeResponse):
        if inhibitTimeResponse is None:
            return
        self.time = inhibitTimeResponse.Time()

    # InhibitTimeResponseT
    def Pack(self, builder):
        InhibitTimeResponseStart(builder)
        InhibitTimeResponseAddTime(builder, self.time)
        inhibitTimeResponse = InhibitTimeResponseEnd(builder)
        return inhibitTimeResponse
