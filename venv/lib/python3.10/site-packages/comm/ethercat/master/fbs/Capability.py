# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Reserved for future use
class Capability(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Capability()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCapability(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Capability
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Capability
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Capability
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CapabilityStart(builder): builder.StartObject(2)
def Start(builder):
    return CapabilityStart(builder)
def CapabilityAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CapabilityAddName(builder, name)
def CapabilityAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return CapabilityAddValue(builder, value)
def CapabilityEnd(builder): return builder.EndObject()
def End(builder):
    return CapabilityEnd(builder)

class CapabilityT(object):

    # CapabilityT
    def __init__(self):
        self.name = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        capability = Capability()
        capability.Init(buf, pos)
        return cls.InitFromObj(capability)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, capability):
        x = CapabilityT()
        x._UnPack(capability)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.value == other.value

    # CapabilityT
    def _UnPack(self, capability):
        if capability is None:
            return
        self.name = capability.Name()
        self.value = capability.Value()

    # CapabilityT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.value is not None:
            value = builder.CreateString(self.value)
        CapabilityStart(builder)
        if self.name is not None:
            CapabilityAddName(builder, name)
        if self.value is not None:
            CapabilityAddValue(builder, value)
        capability = CapabilityEnd(builder)
        return capability
