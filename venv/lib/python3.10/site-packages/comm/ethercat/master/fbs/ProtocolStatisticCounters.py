# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Protocol statistic counters
class ProtocolStatisticCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # ProtocolStatisticCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Number of requests
    # ProtocolStatisticCounters
    def NumRequests(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    #Number of bytes send or received
    # ProtocolStatisticCounters
    def NumBytes(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateProtocolStatisticCounters(builder, numRequests, numBytes):
    builder.Prep(4, 8)
    builder.PrependUint32(numBytes)
    builder.PrependUint32(numRequests)
    return builder.Offset()


class ProtocolStatisticCountersT(object):

    # ProtocolStatisticCountersT
    def __init__(self):
        self.numRequests = 0  # type: int
        self.numBytes = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        protocolStatisticCounters = ProtocolStatisticCounters()
        protocolStatisticCounters.Init(buf, pos)
        return cls.InitFromObj(protocolStatisticCounters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, protocolStatisticCounters):
        x = ProtocolStatisticCountersT()
        x._UnPack(protocolStatisticCounters)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.numRequests == other.numRequests and \
            self.numBytes == other.numBytes

    # ProtocolStatisticCountersT
    def _UnPack(self, protocolStatisticCounters):
        if protocolStatisticCounters is None:
            return
        self.numRequests = protocolStatisticCounters.NumRequests()
        self.numBytes = protocolStatisticCounters.NumBytes()

    # ProtocolStatisticCountersT
    def Pack(self, builder):
        return CreateProtocolStatisticCounters(builder, self.numRequests, self.numBytes)
