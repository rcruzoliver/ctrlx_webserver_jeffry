# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Task info
class taskInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = taskInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAstaskInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # taskInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Task from within the EtherCAT master callable will be called
    # taskInfo
    def Task(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs.Task import Task
            obj = Task()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    #Life sign counter
    # taskInfo
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def taskInfoStart(builder): builder.StartObject(2)
def Start(builder):
    return taskInfoStart(builder)
def taskInfoAddTask(builder, task): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(task), 0)
def AddTask(builder, task):
    return taskInfoAddTask(builder, task)
def taskInfoAddCounter(builder, counter): builder.PrependUint64Slot(1, counter, 0)
def AddCounter(builder, counter):
    return taskInfoAddCounter(builder, counter)
def taskInfoEnd(builder): return builder.EndObject()
def End(builder):
    return taskInfoEnd(builder)
import common.scheduler.fbs.Task
try:
    from typing import Optional
except:
    pass

class taskInfoT(object):

    # taskInfoT
    def __init__(self):
        self.task = None  # type: Optional[common.scheduler.fbs.Task.TaskT]
        self.counter = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        taskInfo = taskInfo()
        taskInfo.Init(buf, pos)
        return cls.InitFromObj(taskInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, taskInfo):
        x = taskInfoT()
        x._UnPack(taskInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.task == other.task and \
            self.counter == other.counter

    # taskInfoT
    def _UnPack(self, taskInfo):
        if taskInfo is None:
            return
        if taskInfo.Task() is not None:
            self.task = common.scheduler.fbs.Task.TaskT.InitFromObj(taskInfo.Task())
        self.counter = taskInfo.Counter()

    # taskInfoT
    def Pack(self, builder):
        if self.task is not None:
            task = self.task.Pack(builder)
        taskInfoStart(builder)
        if self.task is not None:
            taskInfoAddTask(builder, task)
        taskInfoAddCounter(builder, self.counter)
        taskInfo = taskInfoEnd(builder)
        return taskInfo
