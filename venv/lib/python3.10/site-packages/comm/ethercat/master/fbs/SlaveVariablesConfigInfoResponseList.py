# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Slave variable config info response list
class SlaveVariablesConfigInfoResponseList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveVariablesConfigInfoResponseList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSlaveVariablesConfigInfoResponseList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SlaveVariablesConfigInfoResponseList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveVariablesConfigInfoResponseList
    def SlVarConfInfoResponseList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.SlaveVariablesConfigInfoEntry import SlaveVariablesConfigInfoEntry
            obj = SlaveVariablesConfigInfoEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveVariablesConfigInfoResponseList
    def SlVarConfInfoResponseListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveVariablesConfigInfoResponseList
    def SlVarConfInfoResponseListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SlaveVariablesConfigInfoResponseListStart(builder): builder.StartObject(1)
def Start(builder):
    return SlaveVariablesConfigInfoResponseListStart(builder)
def SlaveVariablesConfigInfoResponseListAddSlVarConfInfoResponseList(builder, slVarConfInfoResponseList): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(slVarConfInfoResponseList), 0)
def AddSlVarConfInfoResponseList(builder, slVarConfInfoResponseList):
    return SlaveVariablesConfigInfoResponseListAddSlVarConfInfoResponseList(builder, slVarConfInfoResponseList)
def SlaveVariablesConfigInfoResponseListStartSlVarConfInfoResponseListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSlVarConfInfoResponseListVector(builder, numElems):
    return SlaveVariablesConfigInfoResponseListStartSlVarConfInfoResponseListVector(builder, numElems)
def SlaveVariablesConfigInfoResponseListEnd(builder): return builder.EndObject()
def End(builder):
    return SlaveVariablesConfigInfoResponseListEnd(builder)
import comm.ethercat.master.fbs.SlaveVariablesConfigInfoEntry
try:
    from typing import List
except:
    pass

class SlaveVariablesConfigInfoResponseListT(object):

    # SlaveVariablesConfigInfoResponseListT
    def __init__(self):
        self.slVarConfInfoResponseList = None  # type: List[comm.ethercat.master.fbs.SlaveVariablesConfigInfoEntry.SlaveVariablesConfigInfoEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveVariablesConfigInfoResponseList = SlaveVariablesConfigInfoResponseList()
        slaveVariablesConfigInfoResponseList.Init(buf, pos)
        return cls.InitFromObj(slaveVariablesConfigInfoResponseList)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, slaveVariablesConfigInfoResponseList):
        x = SlaveVariablesConfigInfoResponseListT()
        x._UnPack(slaveVariablesConfigInfoResponseList)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.slVarConfInfoResponseList == other.slVarConfInfoResponseList

    # SlaveVariablesConfigInfoResponseListT
    def _UnPack(self, slaveVariablesConfigInfoResponseList):
        if slaveVariablesConfigInfoResponseList is None:
            return
        if not slaveVariablesConfigInfoResponseList.SlVarConfInfoResponseListIsNone():
            self.slVarConfInfoResponseList = []
            for i in range(slaveVariablesConfigInfoResponseList.SlVarConfInfoResponseListLength()):
                if slaveVariablesConfigInfoResponseList.SlVarConfInfoResponseList(i) is None:
                    self.slVarConfInfoResponseList.append(None)
                else:
                    slaveVariablesConfigInfoEntry_ = comm.ethercat.master.fbs.SlaveVariablesConfigInfoEntry.SlaveVariablesConfigInfoEntryT.InitFromObj(slaveVariablesConfigInfoResponseList.SlVarConfInfoResponseList(i))
                    self.slVarConfInfoResponseList.append(slaveVariablesConfigInfoEntry_)

    # SlaveVariablesConfigInfoResponseListT
    def Pack(self, builder):
        if self.slVarConfInfoResponseList is not None:
            slVarConfInfoResponseListlist = []
            for i in range(len(self.slVarConfInfoResponseList)):
                slVarConfInfoResponseListlist.append(self.slVarConfInfoResponseList[i].Pack(builder))
            SlaveVariablesConfigInfoResponseListStartSlVarConfInfoResponseListVector(builder, len(self.slVarConfInfoResponseList))
            for i in reversed(range(len(self.slVarConfInfoResponseList))):
                builder.PrependUOffsetTRelative(slVarConfInfoResponseListlist[i])
            slVarConfInfoResponseList = builder.EndVector()
        SlaveVariablesConfigInfoResponseListStart(builder)
        if self.slVarConfInfoResponseList is not None:
            SlaveVariablesConfigInfoResponseListAddSlVarConfInfoResponseList(builder, slVarConfInfoResponseList)
        slaveVariablesConfigInfoResponseList = SlaveVariablesConfigInfoResponseListEnd(builder)
        return slaveVariablesConfigInfoResponseList
