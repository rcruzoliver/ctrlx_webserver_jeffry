# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#CoE variable info
class CoeVariableInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CoeVariableInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCoeVariableInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CoeVariableInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #PDO index, e.g. 0x1A00
    # CoeVariableInfo
    def PdoIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Object index, e.g. 0x3000
    # CoeVariableInfo
    def ObjectIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Sub index, e.g. 0x01
    # CoeVariableInfo
    def SubIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def CoeVariableInfoStart(builder): builder.StartObject(3)
def Start(builder):
    return CoeVariableInfoStart(builder)
def CoeVariableInfoAddPdoIndex(builder, pdoIndex): builder.PrependUint16Slot(0, pdoIndex, 0)
def AddPdoIndex(builder, pdoIndex):
    return CoeVariableInfoAddPdoIndex(builder, pdoIndex)
def CoeVariableInfoAddObjectIndex(builder, objectIndex): builder.PrependUint16Slot(1, objectIndex, 0)
def AddObjectIndex(builder, objectIndex):
    return CoeVariableInfoAddObjectIndex(builder, objectIndex)
def CoeVariableInfoAddSubIndex(builder, subIndex): builder.PrependUint8Slot(2, subIndex, 0)
def AddSubIndex(builder, subIndex):
    return CoeVariableInfoAddSubIndex(builder, subIndex)
def CoeVariableInfoEnd(builder): return builder.EndObject()
def End(builder):
    return CoeVariableInfoEnd(builder)

class CoeVariableInfoT(object):

    # CoeVariableInfoT
    def __init__(self):
        self.pdoIndex = 0  # type: int
        self.objectIndex = 0  # type: int
        self.subIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        coeVariableInfo = CoeVariableInfo()
        coeVariableInfo.Init(buf, pos)
        return cls.InitFromObj(coeVariableInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, coeVariableInfo):
        x = CoeVariableInfoT()
        x._UnPack(coeVariableInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pdoIndex == other.pdoIndex and \
            self.objectIndex == other.objectIndex and \
            self.subIndex == other.subIndex

    # CoeVariableInfoT
    def _UnPack(self, coeVariableInfo):
        if coeVariableInfo is None:
            return
        self.pdoIndex = coeVariableInfo.PdoIndex()
        self.objectIndex = coeVariableInfo.ObjectIndex()
        self.subIndex = coeVariableInfo.SubIndex()

    # CoeVariableInfoT
    def Pack(self, builder):
        CoeVariableInfoStart(builder)
        CoeVariableInfoAddPdoIndex(builder, self.pdoIndex)
        CoeVariableInfoAddObjectIndex(builder, self.objectIndex)
        CoeVariableInfoAddSubIndex(builder, self.subIndex)
        coeVariableInfo = CoeVariableInfoEnd(builder)
        return coeVariableInfo
