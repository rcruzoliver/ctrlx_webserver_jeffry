# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Profile channel info request
class ProfileChannelInfoRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProfileChannelInfoRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProfileChannelInfoRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProfileChannelInfoRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: 
    #undefined: Undefined - do not use
    #autoincrement: Auto increment address
    #fixedphysical: EtherCAT address (fixed physical address)
    # ProfileChannelInfoRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType.
    # ProfileChannelInfoRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    #Channel number for request info
    # ProfileChannelInfoRequest
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ProfileChannelInfoRequestStart(builder): builder.StartObject(3)
def Start(builder):
    return ProfileChannelInfoRequestStart(builder)
def ProfileChannelInfoRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return ProfileChannelInfoRequestAddAddressType(builder, addressType)
def ProfileChannelInfoRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return ProfileChannelInfoRequestAddAddress(builder, address)
def ProfileChannelInfoRequestAddChannel(builder, channel): builder.PrependUint32Slot(2, channel, 0)
def AddChannel(builder, channel):
    return ProfileChannelInfoRequestAddChannel(builder, channel)
def ProfileChannelInfoRequestEnd(builder): return builder.EndObject()
def End(builder):
    return ProfileChannelInfoRequestEnd(builder)

class ProfileChannelInfoRequestT(object):

    # ProfileChannelInfoRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.channel = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileChannelInfoRequest = ProfileChannelInfoRequest()
        profileChannelInfoRequest.Init(buf, pos)
        return cls.InitFromObj(profileChannelInfoRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, profileChannelInfoRequest):
        x = ProfileChannelInfoRequestT()
        x._UnPack(profileChannelInfoRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address and \
            self.channel == other.channel

    # ProfileChannelInfoRequestT
    def _UnPack(self, profileChannelInfoRequest):
        if profileChannelInfoRequest is None:
            return
        self.addressType = profileChannelInfoRequest.AddressType()
        self.address = profileChannelInfoRequest.Address()
        self.channel = profileChannelInfoRequest.Channel()

    # ProfileChannelInfoRequestT
    def Pack(self, builder):
        ProfileChannelInfoRequestStart(builder)
        ProfileChannelInfoRequestAddAddressType(builder, self.addressType)
        ProfileChannelInfoRequestAddAddress(builder, self.address)
        ProfileChannelInfoRequestAddChannel(builder, self.channel)
        profileChannelInfoRequest = ProfileChannelInfoRequestEnd(builder)
        return profileChannelInfoRequest
