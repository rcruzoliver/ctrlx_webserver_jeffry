# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Returns a list of capable interfaces
class CapableInterfaces(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CapableInterfaces()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCapableInterfaces(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CapableInterfaces
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CapableInterfaces
    def InterfaceList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.ethercat.master.fbs.Interface import Interface
            obj = Interface()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CapableInterfaces
    def InterfaceListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CapableInterfaces
    def InterfaceListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CapableInterfacesStart(builder): builder.StartObject(1)
def Start(builder):
    return CapableInterfacesStart(builder)
def CapableInterfacesAddInterfaceList(builder, interfaceList): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(interfaceList), 0)
def AddInterfaceList(builder, interfaceList):
    return CapableInterfacesAddInterfaceList(builder, interfaceList)
def CapableInterfacesStartInterfaceListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInterfaceListVector(builder, numElems):
    return CapableInterfacesStartInterfaceListVector(builder, numElems)
def CapableInterfacesEnd(builder): return builder.EndObject()
def End(builder):
    return CapableInterfacesEnd(builder)
import comm.ethercat.master.fbs.Interface
try:
    from typing import List
except:
    pass

class CapableInterfacesT(object):

    # CapableInterfacesT
    def __init__(self):
        self.interfaceList = None  # type: List[comm.ethercat.master.fbs.Interface.InterfaceT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        capableInterfaces = CapableInterfaces()
        capableInterfaces.Init(buf, pos)
        return cls.InitFromObj(capableInterfaces)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, capableInterfaces):
        x = CapableInterfacesT()
        x._UnPack(capableInterfaces)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.interfaceList == other.interfaceList

    # CapableInterfacesT
    def _UnPack(self, capableInterfaces):
        if capableInterfaces is None:
            return
        if not capableInterfaces.InterfaceListIsNone():
            self.interfaceList = []
            for i in range(capableInterfaces.InterfaceListLength()):
                if capableInterfaces.InterfaceList(i) is None:
                    self.interfaceList.append(None)
                else:
                    interface_ = comm.ethercat.master.fbs.Interface.InterfaceT.InitFromObj(capableInterfaces.InterfaceList(i))
                    self.interfaceList.append(interface_)

    # CapableInterfacesT
    def Pack(self, builder):
        if self.interfaceList is not None:
            interfaceListlist = []
            for i in range(len(self.interfaceList)):
                interfaceListlist.append(self.interfaceList[i].Pack(builder))
            CapableInterfacesStartInterfaceListVector(builder, len(self.interfaceList))
            for i in reversed(range(len(self.interfaceList))):
                builder.PrependUOffsetTRelative(interfaceListlist[i])
            interfaceList = builder.EndVector()
        CapableInterfacesStart(builder)
        if self.interfaceList is not None:
            CapableInterfacesAddInterfaceList(builder, interfaceList)
        capableInterfaces = CapableInterfacesEnd(builder)
        return capableInterfaces
