# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

#Type and value to address a specific slave
class AddressedRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddressedRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAddressedRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AddressedRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    #Address type: Auto increment address or EtherCAT address 
    # AddressedRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    #Address depending on addressType
    # AddressedRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def AddressedRequestStart(builder): builder.StartObject(2)
def Start(builder):
    return AddressedRequestStart(builder)
def AddressedRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AddAddressType(builder, addressType):
    return AddressedRequestAddAddressType(builder, addressType)
def AddressedRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AddAddress(builder, address):
    return AddressedRequestAddAddress(builder, address)
def AddressedRequestEnd(builder): return builder.EndObject()
def End(builder):
    return AddressedRequestEnd(builder)

class AddressedRequestT(object):

    # AddressedRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        addressedRequest = AddressedRequest()
        addressedRequest.Init(buf, pos)
        return cls.InitFromObj(addressedRequest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, addressedRequest):
        x = AddressedRequestT()
        x._UnPack(addressedRequest)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.addressType == other.addressType and \
            self.address == other.address

    # AddressedRequestT
    def _UnPack(self, addressedRequest):
        if addressedRequest is None:
            return
        self.addressType = addressedRequest.AddressType()
        self.address = addressedRequest.Address()

    # AddressedRequestT
    def Pack(self, builder):
        AddressedRequestStart(builder)
        AddressedRequestAddAddressType(builder, self.addressType)
        AddressedRequestAddAddress(builder, self.address)
        addressedRequest = AddressedRequestEnd(builder)
        return addressedRequest
