# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class mappingEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = mappingEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsmappingEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # mappingEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Id-string of the mapping entry
    # mappingEntry
    def ValueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # datalayer uri of the mapping entry
    # mappingEntry
    def DatalayerUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # variable type of mapped variable
    # mappingEntry
    def ProfileVar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # is current item is required
    # mappingEntry
    def Required(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def mappingEntryStart(builder): builder.StartObject(4)
def Start(builder):
    return mappingEntryStart(builder)
def mappingEntryAddValueId(builder, valueId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(valueId), 0)
def AddValueId(builder, valueId):
    return mappingEntryAddValueId(builder, valueId)
def mappingEntryAddDatalayerUri(builder, datalayerUri): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(datalayerUri), 0)
def AddDatalayerUri(builder, datalayerUri):
    return mappingEntryAddDatalayerUri(builder, datalayerUri)
def mappingEntryAddProfileVar(builder, profileVar): builder.PrependInt8Slot(2, profileVar, 0)
def AddProfileVar(builder, profileVar):
    return mappingEntryAddProfileVar(builder, profileVar)
def mappingEntryAddRequired(builder, required): builder.PrependBoolSlot(3, required, 0)
def AddRequired(builder, required):
    return mappingEntryAddRequired(builder, required)
def mappingEntryEnd(builder): return builder.EndObject()
def End(builder):
    return mappingEntryEnd(builder)

class mappingEntryT(object):

    # mappingEntryT
    def __init__(self):
        self.valueId = None  # type: str
        self.datalayerUri = None  # type: str
        self.profileVar = 0  # type: int
        self.required = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mappingEntry = mappingEntry()
        mappingEntry.Init(buf, pos)
        return cls.InitFromObj(mappingEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mappingEntry):
        x = mappingEntryT()
        x._UnPack(mappingEntry)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valueId == other.valueId and \
            self.datalayerUri == other.datalayerUri and \
            self.profileVar == other.profileVar and \
            self.required == other.required

    # mappingEntryT
    def _UnPack(self, mappingEntry):
        if mappingEntry is None:
            return
        self.valueId = mappingEntry.ValueId()
        self.datalayerUri = mappingEntry.DatalayerUri()
        self.profileVar = mappingEntry.ProfileVar()
        self.required = mappingEntry.Required()

    # mappingEntryT
    def Pack(self, builder):
        if self.valueId is not None:
            valueId = builder.CreateString(self.valueId)
        if self.datalayerUri is not None:
            datalayerUri = builder.CreateString(self.datalayerUri)
        mappingEntryStart(builder)
        if self.valueId is not None:
            mappingEntryAddValueId(builder, valueId)
        if self.datalayerUri is not None:
            mappingEntryAddDatalayerUri(builder, datalayerUri)
        mappingEntryAddProfileVar(builder, self.profileVar)
        mappingEntryAddRequired(builder, self.required)
        mappingEntry = mappingEntryEnd(builder)
        return mappingEntry
