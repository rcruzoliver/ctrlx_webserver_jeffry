# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProfileCategory(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProfileCategory()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProfileCategory(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProfileCategory
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProfileCategory
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

def ProfileCategoryStart(builder): builder.StartObject(1)
def Start(builder):
    return ProfileCategoryStart(builder)
def ProfileCategoryAddCategory(builder, category): builder.PrependUint32Slot(0, category, 1)
def AddCategory(builder, category):
    return ProfileCategoryAddCategory(builder, category)
def ProfileCategoryEnd(builder): return builder.EndObject()
def End(builder):
    return ProfileCategoryEnd(builder)

class ProfileCategoryT(object):

    # ProfileCategoryT
    def __init__(self):
        self.category = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileCategory = ProfileCategory()
        profileCategory.Init(buf, pos)
        return cls.InitFromObj(profileCategory)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, profileCategory):
        x = ProfileCategoryT()
        x._UnPack(profileCategory)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.category == other.category

    # ProfileCategoryT
    def _UnPack(self, profileCategory):
        if profileCategory is None:
            return
        self.category = profileCategory.Category()

    # ProfileCategoryT
    def Pack(self, builder):
        ProfileCategoryStart(builder)
        ProfileCategoryAddCategory(builder, self.category)
        profileCategory = ProfileCategoryEnd(builder)
        return profileCategory
