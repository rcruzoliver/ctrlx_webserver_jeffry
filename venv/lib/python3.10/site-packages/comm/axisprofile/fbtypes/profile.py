# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsprofile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # profile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profile
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # profile
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def profileStart(builder): builder.StartObject(2)
def Start(builder):
    return profileStart(builder)
def profileAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return profileAddName(builder, name)
def profileAddType(builder, type): builder.PrependUint32Slot(1, type, 0)
def AddType(builder, type):
    return profileAddType(builder, type)
def profileEnd(builder): return builder.EndObject()
def End(builder):
    return profileEnd(builder)

class profileT(object):

    # profileT
    def __init__(self):
        self.name = None  # type: str
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profile = profile()
        profile.Init(buf, pos)
        return cls.InitFromObj(profile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, profile):
        x = profileT()
        x._UnPack(profile)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.type == other.type

    # profileT
    def _UnPack(self, profile):
        if profile is None:
            return
        self.name = profile.Name()
        self.type = profile.Type()

    # profileT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        profileStart(builder)
        if self.name is not None:
            profileAddName(builder, name)
        profileAddType(builder, self.type)
        profile = profileEnd(builder)
        return profile
