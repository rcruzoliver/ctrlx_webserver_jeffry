# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profileDeviceScalingType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profileDeviceScalingType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsprofileDeviceScalingType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # profileDeviceScalingType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profileDeviceScalingType
    def ScalingType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def profileDeviceScalingTypeStart(builder): builder.StartObject(1)
def Start(builder):
    return profileDeviceScalingTypeStart(builder)
def profileDeviceScalingTypeAddScalingType(builder, scalingType): builder.PrependInt32Slot(0, scalingType, 0)
def AddScalingType(builder, scalingType):
    return profileDeviceScalingTypeAddScalingType(builder, scalingType)
def profileDeviceScalingTypeEnd(builder): return builder.EndObject()
def End(builder):
    return profileDeviceScalingTypeEnd(builder)

class profileDeviceScalingTypeT(object):

    # profileDeviceScalingTypeT
    def __init__(self):
        self.scalingType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileDeviceScalingType = profileDeviceScalingType()
        profileDeviceScalingType.Init(buf, pos)
        return cls.InitFromObj(profileDeviceScalingType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, profileDeviceScalingType):
        x = profileDeviceScalingTypeT()
        x._UnPack(profileDeviceScalingType)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.scalingType == other.scalingType

    # profileDeviceScalingTypeT
    def _UnPack(self, profileDeviceScalingType):
        if profileDeviceScalingType is None:
            return
        self.scalingType = profileDeviceScalingType.ScalingType()

    # profileDeviceScalingTypeT
    def Pack(self, builder):
        profileDeviceScalingTypeStart(builder)
        profileDeviceScalingTypeAddScalingType(builder, self.scalingType)
        profileDeviceScalingType = profileDeviceScalingTypeEnd(builder)
        return profileDeviceScalingType
