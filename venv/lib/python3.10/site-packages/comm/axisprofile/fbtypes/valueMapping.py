# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class valueMapping(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = valueMapping()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsvalueMapping(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # valueMapping
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # valueMapping
    def Mapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.axisprofile.fbtypes.mappingEntry import mappingEntry
            obj = mappingEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # valueMapping
    def MappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # valueMapping
    def MappingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def valueMappingStart(builder): builder.StartObject(1)
def Start(builder):
    return valueMappingStart(builder)
def valueMappingAddMapping(builder, mapping): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mapping), 0)
def AddMapping(builder, mapping):
    return valueMappingAddMapping(builder, mapping)
def valueMappingStartMappingVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMappingVector(builder, numElems):
    return valueMappingStartMappingVector(builder, numElems)
def valueMappingEnd(builder): return builder.EndObject()
def End(builder):
    return valueMappingEnd(builder)
import comm.axisprofile.fbtypes.mappingEntry
try:
    from typing import List
except:
    pass

class valueMappingT(object):

    # valueMappingT
    def __init__(self):
        self.mapping = None  # type: List[comm.axisprofile.fbtypes.mappingEntry.mappingEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        valueMapping = valueMapping()
        valueMapping.Init(buf, pos)
        return cls.InitFromObj(valueMapping)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, valueMapping):
        x = valueMappingT()
        x._UnPack(valueMapping)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mapping == other.mapping

    # valueMappingT
    def _UnPack(self, valueMapping):
        if valueMapping is None:
            return
        if not valueMapping.MappingIsNone():
            self.mapping = []
            for i in range(valueMapping.MappingLength()):
                if valueMapping.Mapping(i) is None:
                    self.mapping.append(None)
                else:
                    mappingEntry_ = comm.axisprofile.fbtypes.mappingEntry.mappingEntryT.InitFromObj(valueMapping.Mapping(i))
                    self.mapping.append(mappingEntry_)

    # valueMappingT
    def Pack(self, builder):
        if self.mapping is not None:
            mappinglist = []
            for i in range(len(self.mapping)):
                mappinglist.append(self.mapping[i].Pack(builder))
            valueMappingStartMappingVector(builder, len(self.mapping))
            for i in reversed(range(len(self.mapping))):
                builder.PrependUOffsetTRelative(mappinglist[i])
            mapping = builder.EndVector()
        valueMappingStart(builder)
        if self.mapping is not None:
            valueMappingAddMapping(builder, mapping)
        valueMapping = valueMappingEnd(builder)
        return valueMapping
