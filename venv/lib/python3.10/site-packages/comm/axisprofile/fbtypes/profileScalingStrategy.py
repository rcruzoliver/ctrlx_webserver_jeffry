# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profileScalingStrategy(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profileScalingStrategy()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsprofileScalingStrategy(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # profileScalingStrategy
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profileScalingStrategy
    def Strategy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def profileScalingStrategyStart(builder): builder.StartObject(1)
def Start(builder):
    return profileScalingStrategyStart(builder)
def profileScalingStrategyAddStrategy(builder, strategy): builder.PrependUint32Slot(0, strategy, 0)
def AddStrategy(builder, strategy):
    return profileScalingStrategyAddStrategy(builder, strategy)
def profileScalingStrategyEnd(builder): return builder.EndObject()
def End(builder):
    return profileScalingStrategyEnd(builder)

class profileScalingStrategyT(object):

    # profileScalingStrategyT
    def __init__(self):
        self.strategy = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileScalingStrategy = profileScalingStrategy()
        profileScalingStrategy.Init(buf, pos)
        return cls.InitFromObj(profileScalingStrategy)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, profileScalingStrategy):
        x = profileScalingStrategyT()
        x._UnPack(profileScalingStrategy)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.strategy == other.strategy

    # profileScalingStrategyT
    def _UnPack(self, profileScalingStrategy):
        if profileScalingStrategy is None:
            return
        self.strategy = profileScalingStrategy.Strategy()

    # profileScalingStrategyT
    def Pack(self, builder):
        profileScalingStrategyStart(builder)
        profileScalingStrategyAddStrategy(builder, self.strategy)
        profileScalingStrategy = profileScalingStrategyEnd(builder)
        return profileScalingStrategy
