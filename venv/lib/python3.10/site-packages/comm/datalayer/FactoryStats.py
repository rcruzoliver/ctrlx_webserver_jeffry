# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FactoryStats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FactoryStats()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFactoryStats(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FactoryStats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # number of clients
    # FactoryStats
    def NumClients(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # number of provider
    # FactoryStats
    def NumProviders(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # number of open requests from clients
    # FactoryStats
    def OpenClientRequests(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # number of open requests from provider
    # FactoryStats
    def OpenProviderRequests(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FactoryStatsStart(builder): builder.StartObject(4)
def Start(builder):
    return FactoryStatsStart(builder)
def FactoryStatsAddNumClients(builder, numClients): builder.PrependUint32Slot(0, numClients, 0)
def AddNumClients(builder, numClients):
    return FactoryStatsAddNumClients(builder, numClients)
def FactoryStatsAddNumProviders(builder, numProviders): builder.PrependUint32Slot(1, numProviders, 0)
def AddNumProviders(builder, numProviders):
    return FactoryStatsAddNumProviders(builder, numProviders)
def FactoryStatsAddOpenClientRequests(builder, openClientRequests): builder.PrependUint32Slot(2, openClientRequests, 0)
def AddOpenClientRequests(builder, openClientRequests):
    return FactoryStatsAddOpenClientRequests(builder, openClientRequests)
def FactoryStatsAddOpenProviderRequests(builder, openProviderRequests): builder.PrependUint32Slot(3, openProviderRequests, 0)
def AddOpenProviderRequests(builder, openProviderRequests):
    return FactoryStatsAddOpenProviderRequests(builder, openProviderRequests)
def FactoryStatsEnd(builder): return builder.EndObject()
def End(builder):
    return FactoryStatsEnd(builder)

class FactoryStatsT(object):

    # FactoryStatsT
    def __init__(self):
        self.numClients = 0  # type: int
        self.numProviders = 0  # type: int
        self.openClientRequests = 0  # type: int
        self.openProviderRequests = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        factoryStats = FactoryStats()
        factoryStats.Init(buf, pos)
        return cls.InitFromObj(factoryStats)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, factoryStats):
        x = FactoryStatsT()
        x._UnPack(factoryStats)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.numClients == other.numClients and \
            self.numProviders == other.numProviders and \
            self.openClientRequests == other.openClientRequests and \
            self.openProviderRequests == other.openProviderRequests

    # FactoryStatsT
    def _UnPack(self, factoryStats):
        if factoryStats is None:
            return
        self.numClients = factoryStats.NumClients()
        self.numProviders = factoryStats.NumProviders()
        self.openClientRequests = factoryStats.OpenClientRequests()
        self.openProviderRequests = factoryStats.OpenProviderRequests()

    # FactoryStatsT
    def Pack(self, builder):
        FactoryStatsStart(builder)
        FactoryStatsAddNumClients(builder, self.numClients)
        FactoryStatsAddNumProviders(builder, self.numProviders)
        FactoryStatsAddOpenClientRequests(builder, self.openClientRequests)
        FactoryStatsAddOpenProviderRequests(builder, self.openProviderRequests)
        factoryStats = FactoryStatsEnd(builder)
        return factoryStats
