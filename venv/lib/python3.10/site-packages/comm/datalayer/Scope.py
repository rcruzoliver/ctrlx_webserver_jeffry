# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Scope(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Scope()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScope(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Scope
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Identifier of the Scope
    # Scope
    def Identifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Human readable name of the Scope
    # Scope
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the Scope
    # Scope
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of permission string for read operations
    # Scope
    def PermissionsR(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsRLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsRIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # List of permission string for read/write operations
    # Scope
    def PermissionsRw(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsRwLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsRwIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # List of permission string for execute operations
    # Scope
    def PermissionsX(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsXLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsXIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # List of permission string for all operations
    # Scope
    def PermissionsRwx(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsRwxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsRwxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def ScopeStart(builder): builder.StartObject(7)
def Start(builder):
    return ScopeStart(builder)
def ScopeAddIdentifier(builder, identifier): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(identifier), 0)
def AddIdentifier(builder, identifier):
    return ScopeAddIdentifier(builder, identifier)
def ScopeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ScopeAddName(builder, name)
def ScopeAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return ScopeAddDescription(builder, description)
def ScopeAddPermissionsR(builder, permissionsR): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsR), 0)
def AddPermissionsR(builder, permissionsR):
    return ScopeAddPermissionsR(builder, permissionsR)
def ScopeStartPermissionsRVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPermissionsRVector(builder, numElems):
    return ScopeStartPermissionsRVector(builder, numElems)
def ScopeAddPermissionsRw(builder, permissionsRw): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsRw), 0)
def AddPermissionsRw(builder, permissionsRw):
    return ScopeAddPermissionsRw(builder, permissionsRw)
def ScopeStartPermissionsRwVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPermissionsRwVector(builder, numElems):
    return ScopeStartPermissionsRwVector(builder, numElems)
def ScopeAddPermissionsX(builder, permissionsX): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsX), 0)
def AddPermissionsX(builder, permissionsX):
    return ScopeAddPermissionsX(builder, permissionsX)
def ScopeStartPermissionsXVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPermissionsXVector(builder, numElems):
    return ScopeStartPermissionsXVector(builder, numElems)
def ScopeAddPermissionsRwx(builder, permissionsRwx): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsRwx), 0)
def AddPermissionsRwx(builder, permissionsRwx):
    return ScopeAddPermissionsRwx(builder, permissionsRwx)
def ScopeStartPermissionsRwxVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPermissionsRwxVector(builder, numElems):
    return ScopeStartPermissionsRwxVector(builder, numElems)
def ScopeEnd(builder): return builder.EndObject()
def End(builder):
    return ScopeEnd(builder)
try:
    from typing import List
except:
    pass

class ScopeT(object):

    # ScopeT
    def __init__(self):
        self.identifier = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.permissionsR = None  # type: List[str]
        self.permissionsRw = None  # type: List[str]
        self.permissionsX = None  # type: List[str]
        self.permissionsRwx = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scope = Scope()
        scope.Init(buf, pos)
        return cls.InitFromObj(scope)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scope):
        x = ScopeT()
        x._UnPack(scope)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.identifier == other.identifier and \
            self.name == other.name and \
            self.description == other.description and \
            self.permissionsR == other.permissionsR and \
            self.permissionsRw == other.permissionsRw and \
            self.permissionsX == other.permissionsX and \
            self.permissionsRwx == other.permissionsRwx

    # ScopeT
    def _UnPack(self, scope):
        if scope is None:
            return
        self.identifier = scope.Identifier()
        self.name = scope.Name()
        self.description = scope.Description()
        if not scope.PermissionsRIsNone():
            self.permissionsR = []
            for i in range(scope.PermissionsRLength()):
                self.permissionsR.append(scope.PermissionsR(i))
        if not scope.PermissionsRwIsNone():
            self.permissionsRw = []
            for i in range(scope.PermissionsRwLength()):
                self.permissionsRw.append(scope.PermissionsRw(i))
        if not scope.PermissionsXIsNone():
            self.permissionsX = []
            for i in range(scope.PermissionsXLength()):
                self.permissionsX.append(scope.PermissionsX(i))
        if not scope.PermissionsRwxIsNone():
            self.permissionsRwx = []
            for i in range(scope.PermissionsRwxLength()):
                self.permissionsRwx.append(scope.PermissionsRwx(i))

    # ScopeT
    def Pack(self, builder):
        if self.identifier is not None:
            identifier = builder.CreateString(self.identifier)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.permissionsR is not None:
            permissionsRlist = []
            for i in range(len(self.permissionsR)):
                permissionsRlist.append(builder.CreateString(self.permissionsR[i]))
            ScopeStartPermissionsRVector(builder, len(self.permissionsR))
            for i in reversed(range(len(self.permissionsR))):
                builder.PrependUOffsetTRelative(permissionsRlist[i])
            permissionsR = builder.EndVector()
        if self.permissionsRw is not None:
            permissionsRwlist = []
            for i in range(len(self.permissionsRw)):
                permissionsRwlist.append(builder.CreateString(self.permissionsRw[i]))
            ScopeStartPermissionsRwVector(builder, len(self.permissionsRw))
            for i in reversed(range(len(self.permissionsRw))):
                builder.PrependUOffsetTRelative(permissionsRwlist[i])
            permissionsRw = builder.EndVector()
        if self.permissionsX is not None:
            permissionsXlist = []
            for i in range(len(self.permissionsX)):
                permissionsXlist.append(builder.CreateString(self.permissionsX[i]))
            ScopeStartPermissionsXVector(builder, len(self.permissionsX))
            for i in reversed(range(len(self.permissionsX))):
                builder.PrependUOffsetTRelative(permissionsXlist[i])
            permissionsX = builder.EndVector()
        if self.permissionsRwx is not None:
            permissionsRwxlist = []
            for i in range(len(self.permissionsRwx)):
                permissionsRwxlist.append(builder.CreateString(self.permissionsRwx[i]))
            ScopeStartPermissionsRwxVector(builder, len(self.permissionsRwx))
            for i in reversed(range(len(self.permissionsRwx))):
                builder.PrependUOffsetTRelative(permissionsRwxlist[i])
            permissionsRwx = builder.EndVector()
        ScopeStart(builder)
        if self.identifier is not None:
            ScopeAddIdentifier(builder, identifier)
        if self.name is not None:
            ScopeAddName(builder, name)
        if self.description is not None:
            ScopeAddDescription(builder, description)
        if self.permissionsR is not None:
            ScopeAddPermissionsR(builder, permissionsR)
        if self.permissionsRw is not None:
            ScopeAddPermissionsRw(builder, permissionsRw)
        if self.permissionsX is not None:
            ScopeAddPermissionsX(builder, permissionsX)
        if self.permissionsRwx is not None:
            ScopeAddPermissionsRwx(builder, permissionsRwx)
        scope = ScopeEnd(builder)
        return scope
