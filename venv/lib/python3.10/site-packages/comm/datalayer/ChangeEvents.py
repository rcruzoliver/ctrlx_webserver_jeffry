# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ChangeEvents(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ChangeEvents()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChangeEvents(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ChangeEvents
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ChangeEvents
    def ValueChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # ChangeEvents
    def BrowselistChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ChangeEvents
    def MetadataChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ChangeEventsStart(builder): builder.StartObject(3)
def Start(builder):
    return ChangeEventsStart(builder)
def ChangeEventsAddValueChange(builder, valueChange): builder.PrependInt32Slot(0, valueChange, 1)
def AddValueChange(builder, valueChange):
    return ChangeEventsAddValueChange(builder, valueChange)
def ChangeEventsAddBrowselistChange(builder, browselistChange): builder.PrependBoolSlot(1, browselistChange, 0)
def AddBrowselistChange(builder, browselistChange):
    return ChangeEventsAddBrowselistChange(builder, browselistChange)
def ChangeEventsAddMetadataChange(builder, metadataChange): builder.PrependBoolSlot(2, metadataChange, 0)
def AddMetadataChange(builder, metadataChange):
    return ChangeEventsAddMetadataChange(builder, metadataChange)
def ChangeEventsEnd(builder): return builder.EndObject()
def End(builder):
    return ChangeEventsEnd(builder)

class ChangeEventsT(object):

    # ChangeEventsT
    def __init__(self):
        self.valueChange = 1  # type: int
        self.browselistChange = False  # type: bool
        self.metadataChange = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        changeEvents = ChangeEvents()
        changeEvents.Init(buf, pos)
        return cls.InitFromObj(changeEvents)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, changeEvents):
        x = ChangeEventsT()
        x._UnPack(changeEvents)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valueChange == other.valueChange and \
            self.browselistChange == other.browselistChange and \
            self.metadataChange == other.metadataChange

    # ChangeEventsT
    def _UnPack(self, changeEvents):
        if changeEvents is None:
            return
        self.valueChange = changeEvents.ValueChange()
        self.browselistChange = changeEvents.BrowselistChange()
        self.metadataChange = changeEvents.MetadataChange()

    # ChangeEventsT
    def Pack(self, builder):
        ChangeEventsStart(builder)
        ChangeEventsAddValueChange(builder, self.valueChange)
        ChangeEventsAddBrowselistChange(builder, self.browselistChange)
        ChangeEventsAddMetadataChange(builder, self.metadataChange)
        changeEvents = ChangeEventsEnd(builder)
        return changeEvents
