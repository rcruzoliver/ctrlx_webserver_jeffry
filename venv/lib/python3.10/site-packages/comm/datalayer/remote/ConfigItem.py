# automatically generated by the FlatBuffers compiler, do not modify

# namespace: remote

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConfigItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConfigItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConfigItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConfigItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the remote connection
    # ConfigItem
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # remote data layer connection string
    # ConfigItem
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ConfigItemStart(builder): builder.StartObject(2)
def Start(builder):
    return ConfigItemStart(builder)
def ConfigItemAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ConfigItemAddName(builder, name)
def ConfigItemAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return ConfigItemAddAddress(builder, address)
def ConfigItemEnd(builder): return builder.EndObject()
def End(builder):
    return ConfigItemEnd(builder)

class ConfigItemT(object):

    # ConfigItemT
    def __init__(self):
        self.name = None  # type: str
        self.address = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        configItem = ConfigItem()
        configItem.Init(buf, pos)
        return cls.InitFromObj(configItem)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, configItem):
        x = ConfigItemT()
        x._UnPack(configItem)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.address == other.address

    # ConfigItemT
    def _UnPack(self, configItem):
        if configItem is None:
            return
        self.name = configItem.Name()
        self.address = configItem.Address()

    # ConfigItemT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.address is not None:
            address = builder.CreateString(self.address)
        ConfigItemStart(builder)
        if self.name is not None:
            ConfigItemAddName(builder, name)
        if self.address is not None:
            ConfigItemAddAddress(builder, address)
        configItem = ConfigItemEnd(builder)
        return configItem
