# automatically generated by the FlatBuffers compiler, do not modify

# namespace: remote

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReverseConnection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReverseConnection()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReverseConnection(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReverseConnection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # local id of reverse connection
    # ReverseConnection
    def ConnectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # address to remote control to connect to (connect string)
    # ReverseConnection
    def ConnectionAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name the datalayer appears on remote server
    # ReverseConnection
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ReverseConnectionStart(builder): builder.StartObject(3)
def Start(builder):
    return ReverseConnectionStart(builder)
def ReverseConnectionAddConnectionId(builder, connectionId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(connectionId), 0)
def AddConnectionId(builder, connectionId):
    return ReverseConnectionAddConnectionId(builder, connectionId)
def ReverseConnectionAddConnectionAddress(builder, connectionAddress): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(connectionAddress), 0)
def AddConnectionAddress(builder, connectionAddress):
    return ReverseConnectionAddConnectionAddress(builder, connectionAddress)
def ReverseConnectionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ReverseConnectionAddName(builder, name)
def ReverseConnectionEnd(builder): return builder.EndObject()
def End(builder):
    return ReverseConnectionEnd(builder)

class ReverseConnectionT(object):

    # ReverseConnectionT
    def __init__(self):
        self.connectionId = None  # type: str
        self.connectionAddress = None  # type: str
        self.name = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        reverseConnection = ReverseConnection()
        reverseConnection.Init(buf, pos)
        return cls.InitFromObj(reverseConnection)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, reverseConnection):
        x = ReverseConnectionT()
        x._UnPack(reverseConnection)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.connectionId == other.connectionId and \
            self.connectionAddress == other.connectionAddress and \
            self.name == other.name

    # ReverseConnectionT
    def _UnPack(self, reverseConnection):
        if reverseConnection is None:
            return
        self.connectionId = reverseConnection.ConnectionId()
        self.connectionAddress = reverseConnection.ConnectionAddress()
        self.name = reverseConnection.Name()

    # ReverseConnectionT
    def Pack(self, builder):
        if self.connectionId is not None:
            connectionId = builder.CreateString(self.connectionId)
        if self.connectionAddress is not None:
            connectionAddress = builder.CreateString(self.connectionAddress)
        if self.name is not None:
            name = builder.CreateString(self.name)
        ReverseConnectionStart(builder)
        if self.connectionId is not None:
            ReverseConnectionAddConnectionId(builder, connectionId)
        if self.connectionAddress is not None:
            ReverseConnectionAddConnectionAddress(builder, connectionAddress)
        if self.name is not None:
            ReverseConnectionAddName(builder, name)
        reverseConnection = ReverseConnectionEnd(builder)
        return reverseConnection
