# automatically generated by the FlatBuffers compiler, do not modify

# namespace: remote

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReverseConnections(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReverseConnections()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReverseConnections(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ReverseConnections
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReverseConnections
    def ReverseConnections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.remote.ReverseConnection import ReverseConnection
            obj = ReverseConnection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReverseConnections
    def ReverseConnectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ReverseConnections
    def ReverseConnectionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ReverseConnectionsStart(builder): builder.StartObject(1)
def Start(builder):
    return ReverseConnectionsStart(builder)
def ReverseConnectionsAddReverseConnections(builder, reverseConnections): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(reverseConnections), 0)
def AddReverseConnections(builder, reverseConnections):
    return ReverseConnectionsAddReverseConnections(builder, reverseConnections)
def ReverseConnectionsStartReverseConnectionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartReverseConnectionsVector(builder, numElems):
    return ReverseConnectionsStartReverseConnectionsVector(builder, numElems)
def ReverseConnectionsEnd(builder): return builder.EndObject()
def End(builder):
    return ReverseConnectionsEnd(builder)
import comm.datalayer.remote.ReverseConnection
try:
    from typing import List
except:
    pass

class ReverseConnectionsT(object):

    # ReverseConnectionsT
    def __init__(self):
        self.reverseConnections = None  # type: List[comm.datalayer.remote.ReverseConnection.ReverseConnectionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        reverseConnections = ReverseConnections()
        reverseConnections.Init(buf, pos)
        return cls.InitFromObj(reverseConnections)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, reverseConnections):
        x = ReverseConnectionsT()
        x._UnPack(reverseConnections)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.reverseConnections == other.reverseConnections

    # ReverseConnectionsT
    def _UnPack(self, reverseConnections):
        if reverseConnections is None:
            return
        if not reverseConnections.ReverseConnectionsIsNone():
            self.reverseConnections = []
            for i in range(reverseConnections.ReverseConnectionsLength()):
                if reverseConnections.ReverseConnections(i) is None:
                    self.reverseConnections.append(None)
                else:
                    reverseConnection_ = comm.datalayer.remote.ReverseConnection.ReverseConnectionT.InitFromObj(reverseConnections.ReverseConnections(i))
                    self.reverseConnections.append(reverseConnection_)

    # ReverseConnectionsT
    def Pack(self, builder):
        if self.reverseConnections is not None:
            reverseConnectionslist = []
            for i in range(len(self.reverseConnections)):
                reverseConnectionslist.append(self.reverseConnections[i].Pack(builder))
            ReverseConnectionsStartReverseConnectionsVector(builder, len(self.reverseConnections))
            for i in reversed(range(len(self.reverseConnections))):
                builder.PrependUOffsetTRelative(reverseConnectionslist[i])
            reverseConnections = builder.EndVector()
        ReverseConnectionsStart(builder)
        if self.reverseConnections is not None:
            ReverseConnectionsAddReverseConnections(builder, reverseConnections)
        reverseConnections = ReverseConnectionsEnd(builder)
        return reverseConnections
