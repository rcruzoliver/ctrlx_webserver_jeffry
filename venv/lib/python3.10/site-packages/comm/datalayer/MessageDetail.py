# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MessageDetail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MessageDetail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessageDetail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MessageDetail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # source timestamp of message as FILETIME
    # MessageDetail
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def MessageDetailStart(builder): builder.StartObject(1)
def Start(builder):
    return MessageDetailStart(builder)
def MessageDetailAddTimestamp(builder, timestamp): builder.PrependUint64Slot(0, timestamp, 0)
def AddTimestamp(builder, timestamp):
    return MessageDetailAddTimestamp(builder, timestamp)
def MessageDetailEnd(builder): return builder.EndObject()
def End(builder):
    return MessageDetailEnd(builder)

class MessageDetailT(object):

    # MessageDetailT
    def __init__(self):
        self.timestamp = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        messageDetail = MessageDetail()
        messageDetail.Init(buf, pos)
        return cls.InitFromObj(messageDetail)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, messageDetail):
        x = MessageDetailT()
        x._UnPack(messageDetail)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.timestamp == other.timestamp

    # MessageDetailT
    def _UnPack(self, messageDetail):
        if messageDetail is None:
            return
        self.timestamp = messageDetail.Timestamp()

    # MessageDetailT
    def Pack(self, builder):
        MessageDetailStart(builder)
        MessageDetailAddTimestamp(builder, self.timestamp)
        messageDetail = MessageDetailEnd(builder)
        return messageDetail
