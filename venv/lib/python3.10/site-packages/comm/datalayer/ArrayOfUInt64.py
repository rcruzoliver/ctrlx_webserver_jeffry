# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfUInt64(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfUInt64()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfUInt64(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfUInt64
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfUInt64
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ArrayOfUInt64
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # ArrayOfUInt64
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfUInt64
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfUInt64Start(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfUInt64Start(builder)
def ArrayOfUInt64AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ArrayOfUInt64AddValue(builder, value)
def ArrayOfUInt64StartValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartValueVector(builder, numElems):
    return ArrayOfUInt64StartValueVector(builder, numElems)
def ArrayOfUInt64End(builder): return builder.EndObject()
def End(builder):
    return ArrayOfUInt64End(builder)
try:
    from typing import List
except:
    pass

class ArrayOfUInt64T(object):

    # ArrayOfUInt64T
    def __init__(self):
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfUint64 = ArrayOfUInt64()
        arrayOfUint64.Init(buf, pos)
        return cls.InitFromObj(arrayOfUint64)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfUint64):
        x = ArrayOfUInt64T()
        x._UnPack(arrayOfUint64)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # ArrayOfUInt64T
    def _UnPack(self, arrayOfUint64):
        if arrayOfUint64 is None:
            return
        if not arrayOfUint64.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(arrayOfUint64.ValueLength()):
                    self.value.append(arrayOfUint64.Value(i))
            else:
                self.value = arrayOfUint64.ValueAsNumpy()

    # ArrayOfUInt64T
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                ArrayOfUInt64StartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependUint64(self.value[i])
                value = builder.EndVector()
        ArrayOfUInt64Start(builder)
        if self.value is not None:
            ArrayOfUInt64AddValue(builder, value)
        arrayOfUint64 = ArrayOfUInt64End(builder)
        return arrayOfUint64
