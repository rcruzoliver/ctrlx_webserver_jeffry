# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Metadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Metadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMetadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Metadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Metadata
    def NodeClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Metadata
    def Operations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.AllowedOperations import AllowedOperations
            obj = AllowedOperations()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # markdown text only
    # Metadata
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # URL to description
    # Metadata
    def DescriptionUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Metadata
    def DisplayName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Metadata
    def DisplayFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Metadata
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Metadata
    def Extensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Extension import Extension
            obj = Extension()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Metadata
    def ExtensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Metadata
    def ExtensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Metadata
    def References(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Reference import Reference
            obj = Reference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Metadata
    def ReferencesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Metadata
    def ReferencesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Metadata
    def Descriptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.LocaleText import LocaleText
            obj = LocaleText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Metadata
    def DescriptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Metadata
    def DescriptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Metadata
    def DisplayNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.LocaleText import LocaleText
            obj = LocaleText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Metadata
    def DisplayNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Metadata
    def DisplayNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def MetadataStart(builder): builder.StartObject(11)
def Start(builder):
    return MetadataStart(builder)
def MetadataAddNodeClass(builder, nodeClass): builder.PrependInt8Slot(0, nodeClass, 0)
def AddNodeClass(builder, nodeClass):
    return MetadataAddNodeClass(builder, nodeClass)
def MetadataAddOperations(builder, operations): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(operations), 0)
def AddOperations(builder, operations):
    return MetadataAddOperations(builder, operations)
def MetadataAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return MetadataAddDescription(builder, description)
def MetadataAddDescriptionUrl(builder, descriptionUrl): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(descriptionUrl), 0)
def AddDescriptionUrl(builder, descriptionUrl):
    return MetadataAddDescriptionUrl(builder, descriptionUrl)
def MetadataAddDisplayName(builder, displayName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(displayName), 0)
def AddDisplayName(builder, displayName):
    return MetadataAddDisplayName(builder, displayName)
def MetadataAddDisplayFormat(builder, displayFormat): builder.PrependInt8Slot(5, displayFormat, 0)
def AddDisplayFormat(builder, displayFormat):
    return MetadataAddDisplayFormat(builder, displayFormat)
def MetadataAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def AddUnit(builder, unit):
    return MetadataAddUnit(builder, unit)
def MetadataAddExtensions(builder, extensions): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(extensions), 0)
def AddExtensions(builder, extensions):
    return MetadataAddExtensions(builder, extensions)
def MetadataStartExtensionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartExtensionsVector(builder, numElems):
    return MetadataStartExtensionsVector(builder, numElems)
def MetadataAddReferences(builder, references): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(references), 0)
def AddReferences(builder, references):
    return MetadataAddReferences(builder, references)
def MetadataStartReferencesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartReferencesVector(builder, numElems):
    return MetadataStartReferencesVector(builder, numElems)
def MetadataAddDescriptions(builder, descriptions): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(descriptions), 0)
def AddDescriptions(builder, descriptions):
    return MetadataAddDescriptions(builder, descriptions)
def MetadataStartDescriptionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDescriptionsVector(builder, numElems):
    return MetadataStartDescriptionsVector(builder, numElems)
def MetadataAddDisplayNames(builder, displayNames): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(displayNames), 0)
def AddDisplayNames(builder, displayNames):
    return MetadataAddDisplayNames(builder, displayNames)
def MetadataStartDisplayNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDisplayNamesVector(builder, numElems):
    return MetadataStartDisplayNamesVector(builder, numElems)
def MetadataEnd(builder): return builder.EndObject()
def End(builder):
    return MetadataEnd(builder)
import comm.datalayer.AllowedOperations
import comm.datalayer.Extension
import comm.datalayer.LocaleText
import comm.datalayer.Reference
try:
    from typing import List, Optional
except:
    pass

class MetadataT(object):

    # MetadataT
    def __init__(self):
        self.nodeClass = 0  # type: int
        self.operations = None  # type: Optional[comm.datalayer.AllowedOperations.AllowedOperationsT]
        self.description = None  # type: str
        self.descriptionUrl = None  # type: str
        self.displayName = None  # type: str
        self.displayFormat = 0  # type: int
        self.unit = None  # type: str
        self.extensions = None  # type: List[comm.datalayer.Extension.ExtensionT]
        self.references = None  # type: List[comm.datalayer.Reference.ReferenceT]
        self.descriptions = None  # type: List[comm.datalayer.LocaleText.LocaleTextT]
        self.displayNames = None  # type: List[comm.datalayer.LocaleText.LocaleTextT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        metadata = Metadata()
        metadata.Init(buf, pos)
        return cls.InitFromObj(metadata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, metadata):
        x = MetadataT()
        x._UnPack(metadata)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.nodeClass == other.nodeClass and \
            self.operations == other.operations and \
            self.description == other.description and \
            self.descriptionUrl == other.descriptionUrl and \
            self.displayName == other.displayName and \
            self.displayFormat == other.displayFormat and \
            self.unit == other.unit and \
            self.extensions == other.extensions and \
            self.references == other.references and \
            self.descriptions == other.descriptions and \
            self.displayNames == other.displayNames

    # MetadataT
    def _UnPack(self, metadata):
        if metadata is None:
            return
        self.nodeClass = metadata.NodeClass()
        if metadata.Operations() is not None:
            self.operations = comm.datalayer.AllowedOperations.AllowedOperationsT.InitFromObj(metadata.Operations())
        self.description = metadata.Description()
        self.descriptionUrl = metadata.DescriptionUrl()
        self.displayName = metadata.DisplayName()
        self.displayFormat = metadata.DisplayFormat()
        self.unit = metadata.Unit()
        if not metadata.ExtensionsIsNone():
            self.extensions = []
            for i in range(metadata.ExtensionsLength()):
                if metadata.Extensions(i) is None:
                    self.extensions.append(None)
                else:
                    extension_ = comm.datalayer.Extension.ExtensionT.InitFromObj(metadata.Extensions(i))
                    self.extensions.append(extension_)
        if not metadata.ReferencesIsNone():
            self.references = []
            for i in range(metadata.ReferencesLength()):
                if metadata.References(i) is None:
                    self.references.append(None)
                else:
                    reference_ = comm.datalayer.Reference.ReferenceT.InitFromObj(metadata.References(i))
                    self.references.append(reference_)
        if not metadata.DescriptionsIsNone():
            self.descriptions = []
            for i in range(metadata.DescriptionsLength()):
                if metadata.Descriptions(i) is None:
                    self.descriptions.append(None)
                else:
                    localeText_ = comm.datalayer.LocaleText.LocaleTextT.InitFromObj(metadata.Descriptions(i))
                    self.descriptions.append(localeText_)
        if not metadata.DisplayNamesIsNone():
            self.displayNames = []
            for i in range(metadata.DisplayNamesLength()):
                if metadata.DisplayNames(i) is None:
                    self.displayNames.append(None)
                else:
                    localeText_ = comm.datalayer.LocaleText.LocaleTextT.InitFromObj(metadata.DisplayNames(i))
                    self.displayNames.append(localeText_)

    # MetadataT
    def Pack(self, builder):
        if self.operations is not None:
            operations = self.operations.Pack(builder)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.descriptionUrl is not None:
            descriptionUrl = builder.CreateString(self.descriptionUrl)
        if self.displayName is not None:
            displayName = builder.CreateString(self.displayName)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        if self.extensions is not None:
            extensionslist = []
            for i in range(len(self.extensions)):
                extensionslist.append(self.extensions[i].Pack(builder))
            MetadataStartExtensionsVector(builder, len(self.extensions))
            for i in reversed(range(len(self.extensions))):
                builder.PrependUOffsetTRelative(extensionslist[i])
            extensions = builder.EndVector()
        if self.references is not None:
            referenceslist = []
            for i in range(len(self.references)):
                referenceslist.append(self.references[i].Pack(builder))
            MetadataStartReferencesVector(builder, len(self.references))
            for i in reversed(range(len(self.references))):
                builder.PrependUOffsetTRelative(referenceslist[i])
            references = builder.EndVector()
        if self.descriptions is not None:
            descriptionslist = []
            for i in range(len(self.descriptions)):
                descriptionslist.append(self.descriptions[i].Pack(builder))
            MetadataStartDescriptionsVector(builder, len(self.descriptions))
            for i in reversed(range(len(self.descriptions))):
                builder.PrependUOffsetTRelative(descriptionslist[i])
            descriptions = builder.EndVector()
        if self.displayNames is not None:
            displayNameslist = []
            for i in range(len(self.displayNames)):
                displayNameslist.append(self.displayNames[i].Pack(builder))
            MetadataStartDisplayNamesVector(builder, len(self.displayNames))
            for i in reversed(range(len(self.displayNames))):
                builder.PrependUOffsetTRelative(displayNameslist[i])
            displayNames = builder.EndVector()
        MetadataStart(builder)
        MetadataAddNodeClass(builder, self.nodeClass)
        if self.operations is not None:
            MetadataAddOperations(builder, operations)
        if self.description is not None:
            MetadataAddDescription(builder, description)
        if self.descriptionUrl is not None:
            MetadataAddDescriptionUrl(builder, descriptionUrl)
        if self.displayName is not None:
            MetadataAddDisplayName(builder, displayName)
        MetadataAddDisplayFormat(builder, self.displayFormat)
        if self.unit is not None:
            MetadataAddUnit(builder, unit)
        if self.extensions is not None:
            MetadataAddExtensions(builder, extensions)
        if self.references is not None:
            MetadataAddReferences(builder, references)
        if self.descriptions is not None:
            MetadataAddDescriptions(builder, descriptions)
        if self.displayNames is not None:
            MetadataAddDisplayNames(builder, displayNames)
        metadata = MetadataEnd(builder)
        return metadata
