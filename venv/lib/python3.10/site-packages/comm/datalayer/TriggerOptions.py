# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TriggerOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TriggerOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTriggerOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TriggerOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TriggerOptions
    def QueueSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 1

def TriggerOptionsStart(builder): builder.StartObject(1)
def Start(builder):
    return TriggerOptionsStart(builder)
def TriggerOptionsAddQueueSize(builder, queueSize): builder.PrependUint16Slot(0, queueSize, 1)
def AddQueueSize(builder, queueSize):
    return TriggerOptionsAddQueueSize(builder, queueSize)
def TriggerOptionsEnd(builder): return builder.EndObject()
def End(builder):
    return TriggerOptionsEnd(builder)

class TriggerOptionsT(object):

    # TriggerOptionsT
    def __init__(self):
        self.queueSize = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        triggerOptions = TriggerOptions()
        triggerOptions.Init(buf, pos)
        return cls.InitFromObj(triggerOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, triggerOptions):
        x = TriggerOptionsT()
        x._UnPack(triggerOptions)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.queueSize == other.queueSize

    # TriggerOptionsT
    def _UnPack(self, triggerOptions):
        if triggerOptions is None:
            return
        self.queueSize = triggerOptions.QueueSize()

    # TriggerOptionsT
    def Pack(self, builder):
        TriggerOptionsStart(builder)
        TriggerOptionsAddQueueSize(builder, self.queueSize)
        triggerOptions = TriggerOptionsEnd(builder)
        return triggerOptions
