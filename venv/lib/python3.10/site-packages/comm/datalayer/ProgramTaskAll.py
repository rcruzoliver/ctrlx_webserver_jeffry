# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProgramTaskAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProgramTaskAll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProgramTaskAll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProgramTaskAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProgramTaskAll
    def Tasks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.ProgramTask import ProgramTask
            obj = ProgramTask()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProgramTaskAll
    def TasksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProgramTaskAll
    def TasksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ProgramTaskAllStart(builder): builder.StartObject(1)
def Start(builder):
    return ProgramTaskAllStart(builder)
def ProgramTaskAllAddTasks(builder, tasks): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tasks), 0)
def AddTasks(builder, tasks):
    return ProgramTaskAllAddTasks(builder, tasks)
def ProgramTaskAllStartTasksVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTasksVector(builder, numElems):
    return ProgramTaskAllStartTasksVector(builder, numElems)
def ProgramTaskAllEnd(builder): return builder.EndObject()
def End(builder):
    return ProgramTaskAllEnd(builder)
import comm.datalayer.ProgramTask
try:
    from typing import List
except:
    pass

class ProgramTaskAllT(object):

    # ProgramTaskAllT
    def __init__(self):
        self.tasks = None  # type: List[comm.datalayer.ProgramTask.ProgramTaskT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        programTaskAll = ProgramTaskAll()
        programTaskAll.Init(buf, pos)
        return cls.InitFromObj(programTaskAll)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, programTaskAll):
        x = ProgramTaskAllT()
        x._UnPack(programTaskAll)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.tasks == other.tasks

    # ProgramTaskAllT
    def _UnPack(self, programTaskAll):
        if programTaskAll is None:
            return
        if not programTaskAll.TasksIsNone():
            self.tasks = []
            for i in range(programTaskAll.TasksLength()):
                if programTaskAll.Tasks(i) is None:
                    self.tasks.append(None)
                else:
                    programTask_ = comm.datalayer.ProgramTask.ProgramTaskT.InitFromObj(programTaskAll.Tasks(i))
                    self.tasks.append(programTask_)

    # ProgramTaskAllT
    def Pack(self, builder):
        if self.tasks is not None:
            taskslist = []
            for i in range(len(self.tasks)):
                taskslist.append(self.tasks[i].Pack(builder))
            ProgramTaskAllStartTasksVector(builder, len(self.tasks))
            for i in reversed(range(len(self.tasks))):
                builder.PrependUOffsetTRelative(taskslist[i])
            tasks = builder.EndVector()
        ProgramTaskAllStart(builder)
        if self.tasks is not None:
            ProgramTaskAllAddTasks(builder, tasks)
        programTaskAll = ProgramTaskAllEnd(builder)
        return programTaskAll
