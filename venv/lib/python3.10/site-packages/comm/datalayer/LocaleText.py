# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LocaleText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LocaleText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLocaleText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LocaleText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # iso 639.1
    # LocaleText
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LocaleText
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LocaleTextStart(builder): builder.StartObject(2)
def Start(builder):
    return LocaleTextStart(builder)
def LocaleTextAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return LocaleTextAddId(builder, id)
def LocaleTextAddText(builder, text): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return LocaleTextAddText(builder, text)
def LocaleTextEnd(builder): return builder.EndObject()
def End(builder):
    return LocaleTextEnd(builder)

class LocaleTextT(object):

    # LocaleTextT
    def __init__(self):
        self.id = None  # type: str
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        localeText = LocaleText()
        localeText.Init(buf, pos)
        return cls.InitFromObj(localeText)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, localeText):
        x = LocaleTextT()
        x._UnPack(localeText)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.text == other.text

    # LocaleTextT
    def _UnPack(self, localeText):
        if localeText is None:
            return
        self.id = localeText.Id()
        self.text = localeText.Text()

    # LocaleTextT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.text is not None:
            text = builder.CreateString(self.text)
        LocaleTextStart(builder)
        if self.id is not None:
            LocaleTextAddId(builder, id)
        if self.text is not None:
            LocaleTextAddText(builder, text)
        localeText = LocaleTextEnd(builder)
        return localeText
