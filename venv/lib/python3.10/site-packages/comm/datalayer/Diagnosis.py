# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Diagnosis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Diagnosis()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagnosis(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Diagnosis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Main diagnosis code for diagnosis system. E.g.: 0x3F0A0901
    # Diagnosis
    def MainDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Detailed diagnosis code for diagnosis system. E.g.: 0xC00E2050
    # Diagnosis
    def DetailedDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # A human-readable explanation with even more detailed information specific to this occurrence of the problem.
    # Diagnosis
    def DynamicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Resource or entity which causes the problem E.g.: motion/axs/Axis_1
    # Diagnosis
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # More information about the diagnosis
    # Diagnosis
    def MoreInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.DiagMoreInfo import DiagMoreInfo
            obj = DiagMoreInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Diagnosis
    def MoreInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Diagnosis
    def MoreInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Cause of this diagnosis
    # Diagnosis
    def Cause(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Diagnosis import Diagnosis
            obj = Diagnosis()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Diagnosis
    def CauseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Diagnosis
    def CauseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def DiagnosisStart(builder): builder.StartObject(6)
def Start(builder):
    return DiagnosisStart(builder)
def DiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode): builder.PrependUint32Slot(0, mainDiagnosisCode, 0)
def AddMainDiagnosisCode(builder, mainDiagnosisCode):
    return DiagnosisAddMainDiagnosisCode(builder, mainDiagnosisCode)
def DiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode): builder.PrependUint32Slot(1, detailedDiagnosisCode, 0)
def AddDetailedDiagnosisCode(builder, detailedDiagnosisCode):
    return DiagnosisAddDetailedDiagnosisCode(builder, detailedDiagnosisCode)
def DiagnosisAddDynamicDescription(builder, dynamicDescription): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicDescription), 0)
def AddDynamicDescription(builder, dynamicDescription):
    return DiagnosisAddDynamicDescription(builder, dynamicDescription)
def DiagnosisAddEntity(builder, entity): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)
def AddEntity(builder, entity):
    return DiagnosisAddEntity(builder, entity)
def DiagnosisAddMoreInfo(builder, moreInfo): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(moreInfo), 0)
def AddMoreInfo(builder, moreInfo):
    return DiagnosisAddMoreInfo(builder, moreInfo)
def DiagnosisStartMoreInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMoreInfoVector(builder, numElems):
    return DiagnosisStartMoreInfoVector(builder, numElems)
def DiagnosisAddCause(builder, cause): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(cause), 0)
def AddCause(builder, cause):
    return DiagnosisAddCause(builder, cause)
def DiagnosisStartCauseVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCauseVector(builder, numElems):
    return DiagnosisStartCauseVector(builder, numElems)
def DiagnosisEnd(builder): return builder.EndObject()
def End(builder):
    return DiagnosisEnd(builder)
import comm.datalayer.DiagMoreInfo
try:
    from typing import List
except:
    pass

class DiagnosisT(object):

    # DiagnosisT
    def __init__(self):
        self.mainDiagnosisCode = 0  # type: int
        self.detailedDiagnosisCode = 0  # type: int
        self.dynamicDescription = None  # type: str
        self.entity = None  # type: str
        self.moreInfo = None  # type: List[comm.datalayer.DiagMoreInfo.DiagMoreInfoT]
        self.cause = None  # type: List[comm.datalayer.Diagnosis.DiagnosisT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosis = Diagnosis()
        diagnosis.Init(buf, pos)
        return cls.InitFromObj(diagnosis)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagnosis):
        x = DiagnosisT()
        x._UnPack(diagnosis)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiagnosisCode == other.mainDiagnosisCode and \
            self.detailedDiagnosisCode == other.detailedDiagnosisCode and \
            self.dynamicDescription == other.dynamicDescription and \
            self.entity == other.entity and \
            self.moreInfo == other.moreInfo and \
            self.cause == other.cause

    # DiagnosisT
    def _UnPack(self, diagnosis):
        if diagnosis is None:
            return
        self.mainDiagnosisCode = diagnosis.MainDiagnosisCode()
        self.detailedDiagnosisCode = diagnosis.DetailedDiagnosisCode()
        self.dynamicDescription = diagnosis.DynamicDescription()
        self.entity = diagnosis.Entity()
        if not diagnosis.MoreInfoIsNone():
            self.moreInfo = []
            for i in range(diagnosis.MoreInfoLength()):
                if diagnosis.MoreInfo(i) is None:
                    self.moreInfo.append(None)
                else:
                    diagMoreInfo_ = comm.datalayer.DiagMoreInfo.DiagMoreInfoT.InitFromObj(diagnosis.MoreInfo(i))
                    self.moreInfo.append(diagMoreInfo_)
        if not diagnosis.CauseIsNone():
            self.cause = []
            for i in range(diagnosis.CauseLength()):
                if diagnosis.Cause(i) is None:
                    self.cause.append(None)
                else:
                    diagnosis_ = comm.datalayer.Diagnosis.DiagnosisT.InitFromObj(diagnosis.Cause(i))
                    self.cause.append(diagnosis_)

    # DiagnosisT
    def Pack(self, builder):
        if self.dynamicDescription is not None:
            dynamicDescription = builder.CreateString(self.dynamicDescription)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        if self.moreInfo is not None:
            moreInfolist = []
            for i in range(len(self.moreInfo)):
                moreInfolist.append(self.moreInfo[i].Pack(builder))
            DiagnosisStartMoreInfoVector(builder, len(self.moreInfo))
            for i in reversed(range(len(self.moreInfo))):
                builder.PrependUOffsetTRelative(moreInfolist[i])
            moreInfo = builder.EndVector()
        if self.cause is not None:
            causelist = []
            for i in range(len(self.cause)):
                causelist.append(self.cause[i].Pack(builder))
            DiagnosisStartCauseVector(builder, len(self.cause))
            for i in reversed(range(len(self.cause))):
                builder.PrependUOffsetTRelative(causelist[i])
            cause = builder.EndVector()
        DiagnosisStart(builder)
        DiagnosisAddMainDiagnosisCode(builder, self.mainDiagnosisCode)
        DiagnosisAddDetailedDiagnosisCode(builder, self.detailedDiagnosisCode)
        if self.dynamicDescription is not None:
            DiagnosisAddDynamicDescription(builder, dynamicDescription)
        if self.entity is not None:
            DiagnosisAddEntity(builder, entity)
        if self.moreInfo is not None:
            DiagnosisAddMoreInfo(builder, moreInfo)
        if self.cause is not None:
            DiagnosisAddCause(builder, cause)
        diagnosis = DiagnosisEnd(builder)
        return diagnosis
