# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RtDataArea(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RtDataArea()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRtDataArea(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RtDataArea
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Offset (in bits) of variable in memory
    # RtDataArea
    def Bitoffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Size (in bits) of variable in memory
    # RtDataArea
    def Bitsize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Data of the area
    # RtDataArea
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RtDataArea
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RtDataArea
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RtDataArea
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def RtDataAreaStart(builder): builder.StartObject(3)
def Start(builder):
    return RtDataAreaStart(builder)
def RtDataAreaAddBitoffset(builder, bitoffset): builder.PrependUint32Slot(0, bitoffset, 0)
def AddBitoffset(builder, bitoffset):
    return RtDataAreaAddBitoffset(builder, bitoffset)
def RtDataAreaAddBitsize(builder, bitsize): builder.PrependUint32Slot(1, bitsize, 0)
def AddBitsize(builder, bitsize):
    return RtDataAreaAddBitsize(builder, bitsize)
def RtDataAreaAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AddData(builder, data):
    return RtDataAreaAddData(builder, data)
def RtDataAreaStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartDataVector(builder, numElems):
    return RtDataAreaStartDataVector(builder, numElems)
def RtDataAreaEnd(builder): return builder.EndObject()
def End(builder):
    return RtDataAreaEnd(builder)
try:
    from typing import List
except:
    pass

class RtDataAreaT(object):

    # RtDataAreaT
    def __init__(self):
        self.bitoffset = 0  # type: int
        self.bitsize = 0  # type: int
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rtDataArea = RtDataArea()
        rtDataArea.Init(buf, pos)
        return cls.InitFromObj(rtDataArea)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rtDataArea):
        x = RtDataAreaT()
        x._UnPack(rtDataArea)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.bitoffset == other.bitoffset and \
            self.bitsize == other.bitsize and \
            self.data == other.data

    # RtDataAreaT
    def _UnPack(self, rtDataArea):
        if rtDataArea is None:
            return
        self.bitoffset = rtDataArea.Bitoffset()
        self.bitsize = rtDataArea.Bitsize()
        if not rtDataArea.DataIsNone():
            if np is None:
                self.data = []
                for i in range(rtDataArea.DataLength()):
                    self.data.append(rtDataArea.Data(i))
            else:
                self.data = rtDataArea.DataAsNumpy()

    # RtDataAreaT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                RtDataAreaStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector()
        RtDataAreaStart(builder)
        RtDataAreaAddBitoffset(builder, self.bitoffset)
        RtDataAreaAddBitsize(builder, self.bitsize)
        if self.data is not None:
            RtDataAreaAddData(builder, data)
        rtDataArea = RtDataAreaEnd(builder)
        return rtDataArea
