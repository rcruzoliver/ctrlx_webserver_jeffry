# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BundleList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BundleList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBundleList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # BundleList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BundleList
    def Bundles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Bundle import Bundle
            obj = Bundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BundleList
    def BundlesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BundleList
    def BundlesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def BundleListStart(builder): builder.StartObject(1)
def Start(builder):
    return BundleListStart(builder)
def BundleListAddBundles(builder, bundles): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bundles), 0)
def AddBundles(builder, bundles):
    return BundleListAddBundles(builder, bundles)
def BundleListStartBundlesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBundlesVector(builder, numElems):
    return BundleListStartBundlesVector(builder, numElems)
def BundleListEnd(builder): return builder.EndObject()
def End(builder):
    return BundleListEnd(builder)
import comm.datalayer.framework.Bundle
try:
    from typing import List
except:
    pass

class BundleListT(object):

    # BundleListT
    def __init__(self):
        self.bundles = None  # type: List[comm.datalayer.framework.Bundle.BundleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bundleList = BundleList()
        bundleList.Init(buf, pos)
        return cls.InitFromObj(bundleList)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bundleList):
        x = BundleListT()
        x._UnPack(bundleList)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.bundles == other.bundles

    # BundleListT
    def _UnPack(self, bundleList):
        if bundleList is None:
            return
        if not bundleList.BundlesIsNone():
            self.bundles = []
            for i in range(bundleList.BundlesLength()):
                if bundleList.Bundles(i) is None:
                    self.bundles.append(None)
                else:
                    bundle_ = comm.datalayer.framework.Bundle.BundleT.InitFromObj(bundleList.Bundles(i))
                    self.bundles.append(bundle_)

    # BundleListT
    def Pack(self, builder):
        if self.bundles is not None:
            bundleslist = []
            for i in range(len(self.bundles)):
                bundleslist.append(self.bundles[i].Pack(builder))
            BundleListStartBundlesVector(builder, len(self.bundles))
            for i in reversed(range(len(self.bundles))):
                builder.PrependUOffsetTRelative(bundleslist[i])
            bundles = builder.EndVector()
        BundleListStart(builder)
        if self.bundles is not None:
            BundleListAddBundles(builder, bundles)
        bundleList = BundleListEnd(builder)
        return bundleList
