# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DependencyList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DependencyList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDependencyList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DependencyList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DependencyList
    def Dependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Dependency import Dependency
            obj = Dependency()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DependencyList
    def DependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DependencyList
    def DependenciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DependencyListStart(builder): builder.StartObject(1)
def Start(builder):
    return DependencyListStart(builder)
def DependencyListAddDependencies(builder, dependencies): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dependencies), 0)
def AddDependencies(builder, dependencies):
    return DependencyListAddDependencies(builder, dependencies)
def DependencyListStartDependenciesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDependenciesVector(builder, numElems):
    return DependencyListStartDependenciesVector(builder, numElems)
def DependencyListEnd(builder): return builder.EndObject()
def End(builder):
    return DependencyListEnd(builder)
import comm.datalayer.framework.Dependency
try:
    from typing import List
except:
    pass

class DependencyListT(object):

    # DependencyListT
    def __init__(self):
        self.dependencies = None  # type: List[comm.datalayer.framework.Dependency.DependencyT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dependencyList = DependencyList()
        dependencyList.Init(buf, pos)
        return cls.InitFromObj(dependencyList)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dependencyList):
        x = DependencyListT()
        x._UnPack(dependencyList)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.dependencies == other.dependencies

    # DependencyListT
    def _UnPack(self, dependencyList):
        if dependencyList is None:
            return
        if not dependencyList.DependenciesIsNone():
            self.dependencies = []
            for i in range(dependencyList.DependenciesLength()):
                if dependencyList.Dependencies(i) is None:
                    self.dependencies.append(None)
                else:
                    dependency_ = comm.datalayer.framework.Dependency.DependencyT.InitFromObj(dependencyList.Dependencies(i))
                    self.dependencies.append(dependency_)

    # DependencyListT
    def Pack(self, builder):
        if self.dependencies is not None:
            dependencieslist = []
            for i in range(len(self.dependencies)):
                dependencieslist.append(self.dependencies[i].Pack(builder))
            DependencyListStartDependenciesVector(builder, len(self.dependencies))
            for i in reversed(range(len(self.dependencies))):
                builder.PrependUOffsetTRelative(dependencieslist[i])
            dependencies = builder.EndVector()
        DependencyListStart(builder)
        if self.dependencies is not None:
            DependencyListAddDependencies(builder, dependencies)
        dependencyList = DependencyListEnd(builder)
        return dependencyList
