# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Register(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Register()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRegister(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Register
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Register
    def Ip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Register
    def Sp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Register
    def Bp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RegisterStart(builder): builder.StartObject(3)
def Start(builder):
    return RegisterStart(builder)
def RegisterAddIp(builder, ip): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ip), 0)
def AddIp(builder, ip):
    return RegisterAddIp(builder, ip)
def RegisterAddSp(builder, sp): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sp), 0)
def AddSp(builder, sp):
    return RegisterAddSp(builder, sp)
def RegisterAddBp(builder, bp): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bp), 0)
def AddBp(builder, bp):
    return RegisterAddBp(builder, bp)
def RegisterEnd(builder): return builder.EndObject()
def End(builder):
    return RegisterEnd(builder)

class RegisterT(object):

    # RegisterT
    def __init__(self):
        self.ip = None  # type: str
        self.sp = None  # type: str
        self.bp = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        register = Register()
        register.Init(buf, pos)
        return cls.InitFromObj(register)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, register):
        x = RegisterT()
        x._UnPack(register)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ip == other.ip and \
            self.sp == other.sp and \
            self.bp == other.bp

    # RegisterT
    def _UnPack(self, register):
        if register is None:
            return
        self.ip = register.Ip()
        self.sp = register.Sp()
        self.bp = register.Bp()

    # RegisterT
    def Pack(self, builder):
        if self.ip is not None:
            ip = builder.CreateString(self.ip)
        if self.sp is not None:
            sp = builder.CreateString(self.sp)
        if self.bp is not None:
            bp = builder.CreateString(self.bp)
        RegisterStart(builder)
        if self.ip is not None:
            RegisterAddIp(builder, ip)
        if self.sp is not None:
            RegisterAddSp(builder, sp)
        if self.bp is not None:
            RegisterAddBp(builder, bp)
        register = RegisterEnd(builder)
        return register
