# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Component(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Component()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsComponent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Component
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Component
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Component
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Component
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Component
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Component
    def Interfaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Interface_ import Interface_
            obj = Interface_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Component
    def InterfacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Component
    def InterfacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Component
    def Dependencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Dependency import Dependency
            obj = Dependency()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Component
    def DependenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Component
    def DependenciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def ComponentStart(builder): builder.StartObject(6)
def Start(builder):
    return ComponentStart(builder)
def ComponentAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ComponentAddName(builder, name)
def ComponentAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return ComponentAddId(builder, id)
def ComponentAddActive(builder, active): builder.PrependBoolSlot(2, active, 0)
def AddActive(builder, active):
    return ComponentAddActive(builder, active)
def ComponentAddState(builder, state): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)
def AddState(builder, state):
    return ComponentAddState(builder, state)
def ComponentAddInterfaces(builder, interfaces): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(interfaces), 0)
def AddInterfaces(builder, interfaces):
    return ComponentAddInterfaces(builder, interfaces)
def ComponentStartInterfacesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInterfacesVector(builder, numElems):
    return ComponentStartInterfacesVector(builder, numElems)
def ComponentAddDependencies(builder, dependencies): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dependencies), 0)
def AddDependencies(builder, dependencies):
    return ComponentAddDependencies(builder, dependencies)
def ComponentStartDependenciesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDependenciesVector(builder, numElems):
    return ComponentStartDependenciesVector(builder, numElems)
def ComponentEnd(builder): return builder.EndObject()
def End(builder):
    return ComponentEnd(builder)
import comm.datalayer.framework.Dependency
import comm.datalayer.framework.Interface_
try:
    from typing import List
except:
    pass

class ComponentT(object):

    # ComponentT
    def __init__(self):
        self.name = None  # type: str
        self.id = None  # type: str
        self.active = False  # type: bool
        self.state = None  # type: str
        self.interfaces = None  # type: List[comm.datalayer.framework.Interface_.Interface_T]
        self.dependencies = None  # type: List[comm.datalayer.framework.Dependency.DependencyT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        component = Component()
        component.Init(buf, pos)
        return cls.InitFromObj(component)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, component):
        x = ComponentT()
        x._UnPack(component)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.id == other.id and \
            self.active == other.active and \
            self.state == other.state and \
            self.interfaces == other.interfaces and \
            self.dependencies == other.dependencies

    # ComponentT
    def _UnPack(self, component):
        if component is None:
            return
        self.name = component.Name()
        self.id = component.Id()
        self.active = component.Active()
        self.state = component.State()
        if not component.InterfacesIsNone():
            self.interfaces = []
            for i in range(component.InterfacesLength()):
                if component.Interfaces(i) is None:
                    self.interfaces.append(None)
                else:
                    interface__ = comm.datalayer.framework.Interface_.Interface_T.InitFromObj(component.Interfaces(i))
                    self.interfaces.append(interface__)
        if not component.DependenciesIsNone():
            self.dependencies = []
            for i in range(component.DependenciesLength()):
                if component.Dependencies(i) is None:
                    self.dependencies.append(None)
                else:
                    dependency_ = comm.datalayer.framework.Dependency.DependencyT.InitFromObj(component.Dependencies(i))
                    self.dependencies.append(dependency_)

    # ComponentT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.state is not None:
            state = builder.CreateString(self.state)
        if self.interfaces is not None:
            interfaceslist = []
            for i in range(len(self.interfaces)):
                interfaceslist.append(self.interfaces[i].Pack(builder))
            ComponentStartInterfacesVector(builder, len(self.interfaces))
            for i in reversed(range(len(self.interfaces))):
                builder.PrependUOffsetTRelative(interfaceslist[i])
            interfaces = builder.EndVector()
        if self.dependencies is not None:
            dependencieslist = []
            for i in range(len(self.dependencies)):
                dependencieslist.append(self.dependencies[i].Pack(builder))
            ComponentStartDependenciesVector(builder, len(self.dependencies))
            for i in reversed(range(len(self.dependencies))):
                builder.PrependUOffsetTRelative(dependencieslist[i])
            dependencies = builder.EndVector()
        ComponentStart(builder)
        if self.name is not None:
            ComponentAddName(builder, name)
        if self.id is not None:
            ComponentAddId(builder, id)
        ComponentAddActive(builder, self.active)
        if self.state is not None:
            ComponentAddState(builder, state)
        if self.interfaces is not None:
            ComponentAddInterfaces(builder, interfaces)
        if self.dependencies is not None:
            ComponentAddDependencies(builder, dependencies)
        component = ComponentEnd(builder)
        return component
