# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Exception(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Exception()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsException(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Exception
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Exception
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Exception
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Exception
    def Signal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Exception
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Exception
    def Register(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.framework.Register import Register
            obj = Register()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Exception
    def Stack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Stackentry import Stackentry
            obj = Stackentry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Exception
    def StackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Exception
    def StackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def ExceptionStart(builder): builder.StartObject(6)
def Start(builder):
    return ExceptionStart(builder)
def ExceptionAddDate(builder, date): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)
def AddDate(builder, date):
    return ExceptionAddDate(builder, date)
def ExceptionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ExceptionAddName(builder, name)
def ExceptionAddSignal(builder, signal): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(signal), 0)
def AddSignal(builder, signal):
    return ExceptionAddSignal(builder, signal)
def ExceptionAddCode(builder, code): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)
def AddCode(builder, code):
    return ExceptionAddCode(builder, code)
def ExceptionAddRegister(builder, register): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(register), 0)
def AddRegister(builder, register):
    return ExceptionAddRegister(builder, register)
def ExceptionAddStack(builder, stack): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stack), 0)
def AddStack(builder, stack):
    return ExceptionAddStack(builder, stack)
def ExceptionStartStackVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStackVector(builder, numElems):
    return ExceptionStartStackVector(builder, numElems)
def ExceptionEnd(builder): return builder.EndObject()
def End(builder):
    return ExceptionEnd(builder)
import comm.datalayer.framework.Register
import comm.datalayer.framework.Stackentry
try:
    from typing import List, Optional
except:
    pass

class ExceptionT(object):

    # ExceptionT
    def __init__(self):
        self.date = None  # type: str
        self.name = None  # type: str
        self.signal = None  # type: str
        self.code = None  # type: str
        self.register = None  # type: Optional[comm.datalayer.framework.Register.RegisterT]
        self.stack = None  # type: List[comm.datalayer.framework.Stackentry.StackentryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        exception = Exception()
        exception.Init(buf, pos)
        return cls.InitFromObj(exception)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, exception):
        x = ExceptionT()
        x._UnPack(exception)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.date == other.date and \
            self.name == other.name and \
            self.signal == other.signal and \
            self.code == other.code and \
            self.register == other.register and \
            self.stack == other.stack

    # ExceptionT
    def _UnPack(self, exception):
        if exception is None:
            return
        self.date = exception.Date()
        self.name = exception.Name()
        self.signal = exception.Signal()
        self.code = exception.Code()
        if exception.Register() is not None:
            self.register = comm.datalayer.framework.Register.RegisterT.InitFromObj(exception.Register())
        if not exception.StackIsNone():
            self.stack = []
            for i in range(exception.StackLength()):
                if exception.Stack(i) is None:
                    self.stack.append(None)
                else:
                    stackentry_ = comm.datalayer.framework.Stackentry.StackentryT.InitFromObj(exception.Stack(i))
                    self.stack.append(stackentry_)

    # ExceptionT
    def Pack(self, builder):
        if self.date is not None:
            date = builder.CreateString(self.date)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.signal is not None:
            signal = builder.CreateString(self.signal)
        if self.code is not None:
            code = builder.CreateString(self.code)
        if self.register is not None:
            register = self.register.Pack(builder)
        if self.stack is not None:
            stacklist = []
            for i in range(len(self.stack)):
                stacklist.append(self.stack[i].Pack(builder))
            ExceptionStartStackVector(builder, len(self.stack))
            for i in reversed(range(len(self.stack))):
                builder.PrependUOffsetTRelative(stacklist[i])
            stack = builder.EndVector()
        ExceptionStart(builder)
        if self.date is not None:
            ExceptionAddDate(builder, date)
        if self.name is not None:
            ExceptionAddName(builder, name)
        if self.signal is not None:
            ExceptionAddSignal(builder, signal)
        if self.code is not None:
            ExceptionAddCode(builder, code)
        if self.register is not None:
            ExceptionAddRegister(builder, register)
        if self.stack is not None:
            ExceptionAddStack(builder, stack)
        exception = ExceptionEnd(builder)
        return exception
