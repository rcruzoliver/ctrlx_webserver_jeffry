# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Bundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Bundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Bundle
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bundle
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bundle
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Bundle
    def Components(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Component import Component
            obj = Component()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bundle
    def ComponentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Bundle
    def ComponentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Bundle
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bundle
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Bundle
    def Installed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def BundleStart(builder): builder.StartObject(8)
def Start(builder):
    return BundleStart(builder)
def BundleAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return BundleAddName(builder, name)
def BundleAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return BundleAddVersion(builder, version)
def BundleAddLocation(builder, location): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def AddLocation(builder, location):
    return BundleAddLocation(builder, location)
def BundleAddId(builder, id): builder.PrependInt64Slot(3, id, 0)
def AddId(builder, id):
    return BundleAddId(builder, id)
def BundleAddComponents(builder, components): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(components), 0)
def AddComponents(builder, components):
    return BundleAddComponents(builder, components)
def BundleStartComponentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartComponentsVector(builder, numElems):
    return BundleStartComponentsVector(builder, numElems)
def BundleAddState(builder, state): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)
def AddState(builder, state):
    return BundleAddState(builder, state)
def BundleAddActive(builder, active): builder.PrependBoolSlot(6, active, 0)
def AddActive(builder, active):
    return BundleAddActive(builder, active)
def BundleAddInstalled(builder, installed): builder.PrependBoolSlot(7, installed, 0)
def AddInstalled(builder, installed):
    return BundleAddInstalled(builder, installed)
def BundleEnd(builder): return builder.EndObject()
def End(builder):
    return BundleEnd(builder)
import comm.datalayer.framework.Component
try:
    from typing import List
except:
    pass

class BundleT(object):

    # BundleT
    def __init__(self):
        self.name = None  # type: str
        self.version = None  # type: str
        self.location = None  # type: str
        self.id = 0  # type: int
        self.components = None  # type: List[comm.datalayer.framework.Component.ComponentT]
        self.state = None  # type: str
        self.active = False  # type: bool
        self.installed = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bundle = Bundle()
        bundle.Init(buf, pos)
        return cls.InitFromObj(bundle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bundle):
        x = BundleT()
        x._UnPack(bundle)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.version == other.version and \
            self.location == other.location and \
            self.id == other.id and \
            self.components == other.components and \
            self.state == other.state and \
            self.active == other.active and \
            self.installed == other.installed

    # BundleT
    def _UnPack(self, bundle):
        if bundle is None:
            return
        self.name = bundle.Name()
        self.version = bundle.Version()
        self.location = bundle.Location()
        self.id = bundle.Id()
        if not bundle.ComponentsIsNone():
            self.components = []
            for i in range(bundle.ComponentsLength()):
                if bundle.Components(i) is None:
                    self.components.append(None)
                else:
                    component_ = comm.datalayer.framework.Component.ComponentT.InitFromObj(bundle.Components(i))
                    self.components.append(component_)
        self.state = bundle.State()
        self.active = bundle.Active()
        self.installed = bundle.Installed()

    # BundleT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.location is not None:
            location = builder.CreateString(self.location)
        if self.components is not None:
            componentslist = []
            for i in range(len(self.components)):
                componentslist.append(self.components[i].Pack(builder))
            BundleStartComponentsVector(builder, len(self.components))
            for i in reversed(range(len(self.components))):
                builder.PrependUOffsetTRelative(componentslist[i])
            components = builder.EndVector()
        if self.state is not None:
            state = builder.CreateString(self.state)
        BundleStart(builder)
        if self.name is not None:
            BundleAddName(builder, name)
        if self.version is not None:
            BundleAddVersion(builder, version)
        if self.location is not None:
            BundleAddLocation(builder, location)
        BundleAddId(builder, self.id)
        if self.components is not None:
            BundleAddComponents(builder, components)
        if self.state is not None:
            BundleAddState(builder, state)
        BundleAddActive(builder, self.active)
        BundleAddInstalled(builder, self.installed)
        bundle = BundleEnd(builder)
        return bundle
