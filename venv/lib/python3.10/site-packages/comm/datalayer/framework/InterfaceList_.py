# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InterfaceList_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InterfaceList_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInterfaceList_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InterfaceList_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InterfaceList_
    def Interfaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Interface_ import Interface_
            obj = Interface_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InterfaceList_
    def InterfacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InterfaceList_
    def InterfacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def InterfaceList_Start(builder): builder.StartObject(1)
def Start(builder):
    return InterfaceList_Start(builder)
def InterfaceList_AddInterfaces(builder, interfaces): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(interfaces), 0)
def AddInterfaces(builder, interfaces):
    return InterfaceList_AddInterfaces(builder, interfaces)
def InterfaceList_StartInterfacesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInterfacesVector(builder, numElems):
    return InterfaceList_StartInterfacesVector(builder, numElems)
def InterfaceList_End(builder): return builder.EndObject()
def End(builder):
    return InterfaceList_End(builder)
import comm.datalayer.framework.Interface_
try:
    from typing import List
except:
    pass

class InterfaceList_T(object):

    # InterfaceList_T
    def __init__(self):
        self.interfaces = None  # type: List[comm.datalayer.framework.Interface_.Interface_T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        interfaceList_ = InterfaceList_()
        interfaceList_.Init(buf, pos)
        return cls.InitFromObj(interfaceList_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, interfaceList_):
        x = InterfaceList_T()
        x._UnPack(interfaceList_)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.interfaces == other.interfaces

    # InterfaceList_T
    def _UnPack(self, interfaceList_):
        if interfaceList_ is None:
            return
        if not interfaceList_.InterfacesIsNone():
            self.interfaces = []
            for i in range(interfaceList_.InterfacesLength()):
                if interfaceList_.Interfaces(i) is None:
                    self.interfaces.append(None)
                else:
                    interface__ = comm.datalayer.framework.Interface_.Interface_T.InitFromObj(interfaceList_.Interfaces(i))
                    self.interfaces.append(interface__)

    # InterfaceList_T
    def Pack(self, builder):
        if self.interfaces is not None:
            interfaceslist = []
            for i in range(len(self.interfaces)):
                interfaceslist.append(self.interfaces[i].Pack(builder))
            InterfaceList_StartInterfacesVector(builder, len(self.interfaces))
            for i in reversed(range(len(self.interfaces))):
                builder.PrependUOffsetTRelative(interfaceslist[i])
            interfaces = builder.EndVector()
        InterfaceList_Start(builder)
        if self.interfaces is not None:
            InterfaceList_AddInterfaces(builder, interfaces)
        interfaceList_ = InterfaceList_End(builder)
        return interfaceList_
