# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Interface_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Interface_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInterface_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Interface_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Interface_
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interface_
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interface_
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interface_
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Interface_
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interface_
    def PropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Interface_Start(builder): builder.StartObject(4)
def Start(builder):
    return Interface_Start(builder)
def Interface_AddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return Interface_AddName(builder, name)
def Interface_AddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return Interface_AddVersion(builder, version)
def Interface_AddLanguage(builder, language): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(language), 0)
def AddLanguage(builder, language):
    return Interface_AddLanguage(builder, language)
def Interface_AddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def AddProperties(builder, properties):
    return Interface_AddProperties(builder, properties)
def Interface_StartPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPropertiesVector(builder, numElems):
    return Interface_StartPropertiesVector(builder, numElems)
def Interface_End(builder): return builder.EndObject()
def End(builder):
    return Interface_End(builder)
import comm.datalayer.framework.Property
try:
    from typing import List
except:
    pass

class Interface_T(object):

    # Interface_T
    def __init__(self):
        self.name = None  # type: str
        self.version = None  # type: str
        self.language = None  # type: str
        self.properties = None  # type: List[comm.datalayer.framework.Property.PropertyT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        interface_ = Interface_()
        interface_.Init(buf, pos)
        return cls.InitFromObj(interface_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, interface_):
        x = Interface_T()
        x._UnPack(interface_)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.version == other.version and \
            self.language == other.language and \
            self.properties == other.properties

    # Interface_T
    def _UnPack(self, interface_):
        if interface_ is None:
            return
        self.name = interface_.Name()
        self.version = interface_.Version()
        self.language = interface_.Language()
        if not interface_.PropertiesIsNone():
            self.properties = []
            for i in range(interface_.PropertiesLength()):
                if interface_.Properties(i) is None:
                    self.properties.append(None)
                else:
                    property_ = comm.datalayer.framework.Property.PropertyT.InitFromObj(interface_.Properties(i))
                    self.properties.append(property_)

    # Interface_T
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.language is not None:
            language = builder.CreateString(self.language)
        if self.properties is not None:
            propertieslist = []
            for i in range(len(self.properties)):
                propertieslist.append(self.properties[i].Pack(builder))
            Interface_StartPropertiesVector(builder, len(self.properties))
            for i in reversed(range(len(self.properties))):
                builder.PrependUOffsetTRelative(propertieslist[i])
            properties = builder.EndVector()
        Interface_Start(builder)
        if self.name is not None:
            Interface_AddName(builder, name)
        if self.version is not None:
            Interface_AddVersion(builder, version)
        if self.language is not None:
            Interface_AddLanguage(builder, language)
        if self.properties is not None:
            Interface_AddProperties(builder, properties)
        interface_ = Interface_End(builder)
        return interface_
