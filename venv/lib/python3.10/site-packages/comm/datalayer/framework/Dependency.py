# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Dependency(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Dependency()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDependency(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Dependency
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dependency
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Dependency
    def Available(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Dependency
    def Required(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Dependency
    def Filter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DependencyStart(builder): builder.StartObject(4)
def Start(builder):
    return DependencyStart(builder)
def DependencyAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DependencyAddName(builder, name)
def DependencyAddAvailable(builder, available): builder.PrependBoolSlot(1, available, 0)
def AddAvailable(builder, available):
    return DependencyAddAvailable(builder, available)
def DependencyAddRequired(builder, required): builder.PrependBoolSlot(2, required, 0)
def AddRequired(builder, required):
    return DependencyAddRequired(builder, required)
def DependencyAddFilter(builder, filter): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(filter), 0)
def AddFilter(builder, filter):
    return DependencyAddFilter(builder, filter)
def DependencyEnd(builder): return builder.EndObject()
def End(builder):
    return DependencyEnd(builder)

class DependencyT(object):

    # DependencyT
    def __init__(self):
        self.name = None  # type: str
        self.available = False  # type: bool
        self.required = False  # type: bool
        self.filter = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dependency = Dependency()
        dependency.Init(buf, pos)
        return cls.InitFromObj(dependency)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dependency):
        x = DependencyT()
        x._UnPack(dependency)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.available == other.available and \
            self.required == other.required and \
            self.filter == other.filter

    # DependencyT
    def _UnPack(self, dependency):
        if dependency is None:
            return
        self.name = dependency.Name()
        self.available = dependency.Available()
        self.required = dependency.Required()
        self.filter = dependency.Filter()

    # DependencyT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.filter is not None:
            filter = builder.CreateString(self.filter)
        DependencyStart(builder)
        if self.name is not None:
            DependencyAddName(builder, name)
        DependencyAddAvailable(builder, self.available)
        DependencyAddRequired(builder, self.required)
        if self.filter is not None:
            DependencyAddFilter(builder, filter)
        dependency = DependencyEnd(builder)
        return dependency
