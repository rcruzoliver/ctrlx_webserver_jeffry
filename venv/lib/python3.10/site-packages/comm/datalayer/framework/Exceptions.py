# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Exceptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Exceptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExceptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Exceptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Exceptions
    def Exceptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Exception import Exception
            obj = Exception()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Exceptions
    def ExceptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Exceptions
    def ExceptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ExceptionsStart(builder): builder.StartObject(1)
def Start(builder):
    return ExceptionsStart(builder)
def ExceptionsAddExceptions(builder, exceptions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(exceptions), 0)
def AddExceptions(builder, exceptions):
    return ExceptionsAddExceptions(builder, exceptions)
def ExceptionsStartExceptionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartExceptionsVector(builder, numElems):
    return ExceptionsStartExceptionsVector(builder, numElems)
def ExceptionsEnd(builder): return builder.EndObject()
def End(builder):
    return ExceptionsEnd(builder)
import comm.datalayer.framework.Exception
try:
    from typing import List
except:
    pass

class ExceptionsT(object):

    # ExceptionsT
    def __init__(self):
        self.exceptions = None  # type: List[comm.datalayer.framework.Exception.ExceptionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        exceptions = Exceptions()
        exceptions.Init(buf, pos)
        return cls.InitFromObj(exceptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, exceptions):
        x = ExceptionsT()
        x._UnPack(exceptions)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.exceptions == other.exceptions

    # ExceptionsT
    def _UnPack(self, exceptions):
        if exceptions is None:
            return
        if not exceptions.ExceptionsIsNone():
            self.exceptions = []
            for i in range(exceptions.ExceptionsLength()):
                if exceptions.Exceptions(i) is None:
                    self.exceptions.append(None)
                else:
                    exception_ = comm.datalayer.framework.Exception.ExceptionT.InitFromObj(exceptions.Exceptions(i))
                    self.exceptions.append(exception_)

    # ExceptionsT
    def Pack(self, builder):
        if self.exceptions is not None:
            exceptionslist = []
            for i in range(len(self.exceptions)):
                exceptionslist.append(self.exceptions[i].Pack(builder))
            ExceptionsStartExceptionsVector(builder, len(self.exceptions))
            for i in reversed(range(len(self.exceptions))):
                builder.PrependUOffsetTRelative(exceptionslist[i])
            exceptions = builder.EndVector()
        ExceptionsStart(builder)
        if self.exceptions is not None:
            ExceptionsAddExceptions(builder, exceptions)
        exceptions = ExceptionsEnd(builder)
        return exceptions
