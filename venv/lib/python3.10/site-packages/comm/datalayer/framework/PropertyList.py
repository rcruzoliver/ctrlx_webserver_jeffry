# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PropertyList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PropertyList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPropertyList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PropertyList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PropertyList
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PropertyList
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PropertyList
    def PropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def PropertyListStart(builder): builder.StartObject(1)
def Start(builder):
    return PropertyListStart(builder)
def PropertyListAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def AddProperties(builder, properties):
    return PropertyListAddProperties(builder, properties)
def PropertyListStartPropertiesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPropertiesVector(builder, numElems):
    return PropertyListStartPropertiesVector(builder, numElems)
def PropertyListEnd(builder): return builder.EndObject()
def End(builder):
    return PropertyListEnd(builder)
import comm.datalayer.framework.Property
try:
    from typing import List
except:
    pass

class PropertyListT(object):

    # PropertyListT
    def __init__(self):
        self.properties = None  # type: List[comm.datalayer.framework.Property.PropertyT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        propertyList = PropertyList()
        propertyList.Init(buf, pos)
        return cls.InitFromObj(propertyList)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, propertyList):
        x = PropertyListT()
        x._UnPack(propertyList)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.properties == other.properties

    # PropertyListT
    def _UnPack(self, propertyList):
        if propertyList is None:
            return
        if not propertyList.PropertiesIsNone():
            self.properties = []
            for i in range(propertyList.PropertiesLength()):
                if propertyList.Properties(i) is None:
                    self.properties.append(None)
                else:
                    property_ = comm.datalayer.framework.Property.PropertyT.InitFromObj(propertyList.Properties(i))
                    self.properties.append(property_)

    # PropertyListT
    def Pack(self, builder):
        if self.properties is not None:
            propertieslist = []
            for i in range(len(self.properties)):
                propertieslist.append(self.properties[i].Pack(builder))
            PropertyListStartPropertiesVector(builder, len(self.properties))
            for i in reversed(range(len(self.properties))):
                builder.PrependUOffsetTRelative(propertieslist[i])
            properties = builder.EndVector()
        PropertyListStart(builder)
        if self.properties is not None:
            PropertyListAddProperties(builder, properties)
        propertyList = PropertyListEnd(builder)
        return propertyList
