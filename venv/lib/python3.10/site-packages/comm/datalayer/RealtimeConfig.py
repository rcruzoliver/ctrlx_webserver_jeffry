# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of realtime input buffer system
class RealtimeConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RealtimeConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRealtimeConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RealtimeConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # default buffer type used for Data Layer RT input
    # RealtimeConfig
    def DefaultInputAcessType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 3

    # Configuration if NTelBuf is configured in defaultInputAcessType
    # RealtimeConfig
    def NTelBufConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.NTelBufferConfig import NTelBufferConfig
            obj = NTelBufferConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RealtimeConfigStart(builder): builder.StartObject(2)
def Start(builder):
    return RealtimeConfigStart(builder)
def RealtimeConfigAddDefaultInputAcessType(builder, defaultInputAcessType): builder.PrependInt8Slot(0, defaultInputAcessType, 3)
def AddDefaultInputAcessType(builder, defaultInputAcessType):
    return RealtimeConfigAddDefaultInputAcessType(builder, defaultInputAcessType)
def RealtimeConfigAddNTelBufConfig(builder, nTelBufConfig): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nTelBufConfig), 0)
def AddNTelBufConfig(builder, nTelBufConfig):
    return RealtimeConfigAddNTelBufConfig(builder, nTelBufConfig)
def RealtimeConfigEnd(builder): return builder.EndObject()
def End(builder):
    return RealtimeConfigEnd(builder)
import comm.datalayer.NTelBufferConfig
try:
    from typing import Optional
except:
    pass

class RealtimeConfigT(object):

    # RealtimeConfigT
    def __init__(self):
        self.defaultInputAcessType = 3  # type: int
        self.nTelBufConfig = None  # type: Optional[comm.datalayer.NTelBufferConfig.NTelBufferConfigT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        realtimeConfig = RealtimeConfig()
        realtimeConfig.Init(buf, pos)
        return cls.InitFromObj(realtimeConfig)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, realtimeConfig):
        x = RealtimeConfigT()
        x._UnPack(realtimeConfig)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.defaultInputAcessType == other.defaultInputAcessType and \
            self.nTelBufConfig == other.nTelBufConfig

    # RealtimeConfigT
    def _UnPack(self, realtimeConfig):
        if realtimeConfig is None:
            return
        self.defaultInputAcessType = realtimeConfig.DefaultInputAcessType()
        if realtimeConfig.NTelBufConfig() is not None:
            self.nTelBufConfig = comm.datalayer.NTelBufferConfig.NTelBufferConfigT.InitFromObj(realtimeConfig.NTelBufConfig())

    # RealtimeConfigT
    def Pack(self, builder):
        if self.nTelBufConfig is not None:
            nTelBufConfig = self.nTelBufConfig.Pack(builder)
        RealtimeConfigStart(builder)
        RealtimeConfigAddDefaultInputAcessType(builder, self.defaultInputAcessType)
        if self.nTelBufConfig is not None:
            RealtimeConfigAddNTelBufConfig(builder, nTelBufConfig)
        realtimeConfig = RealtimeConfigEnd(builder)
        return realtimeConfig
