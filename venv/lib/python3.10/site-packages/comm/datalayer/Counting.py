# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Counting(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Counting()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCounting(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Counting
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Nodes are counted if subscribed multiple times. Unsubscribe only accures if counter for this node is 0.
    # Counting
    def CountSubscriptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CountingStart(builder): builder.StartObject(1)
def Start(builder):
    return CountingStart(builder)
def CountingAddCountSubscriptions(builder, countSubscriptions): builder.PrependBoolSlot(0, countSubscriptions, 0)
def AddCountSubscriptions(builder, countSubscriptions):
    return CountingAddCountSubscriptions(builder, countSubscriptions)
def CountingEnd(builder): return builder.EndObject()
def End(builder):
    return CountingEnd(builder)

class CountingT(object):

    # CountingT
    def __init__(self):
        self.countSubscriptions = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        counting = Counting()
        counting.Init(buf, pos)
        return cls.InitFromObj(counting)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, counting):
        x = CountingT()
        x._UnPack(counting)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.countSubscriptions == other.countSubscriptions

    # CountingT
    def _UnPack(self, counting):
        if counting is None:
            return
        self.countSubscriptions = counting.CountSubscriptions()

    # CountingT
    def Pack(self, builder):
        CountingStart(builder)
        CountingAddCountSubscriptions(builder, self.countSubscriptions)
        counting = CountingEnd(builder)
        return counting
