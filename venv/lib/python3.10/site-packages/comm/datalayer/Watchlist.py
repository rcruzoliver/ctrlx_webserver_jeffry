# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Watchlist(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Watchlist()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWatchlist(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Watchlist
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the watchlist
    # Watchlist
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # items of the watchlist
    # Watchlist
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Watchlist
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Watchlist
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def WatchlistStart(builder): builder.StartObject(2)
def Start(builder):
    return WatchlistStart(builder)
def WatchlistAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return WatchlistAddName(builder, name)
def WatchlistAddItems(builder, items): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)
def AddItems(builder, items):
    return WatchlistAddItems(builder, items)
def WatchlistStartItemsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartItemsVector(builder, numElems):
    return WatchlistStartItemsVector(builder, numElems)
def WatchlistEnd(builder): return builder.EndObject()
def End(builder):
    return WatchlistEnd(builder)
try:
    from typing import List
except:
    pass

class WatchlistT(object):

    # WatchlistT
    def __init__(self):
        self.name = None  # type: str
        self.items = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        watchlist = Watchlist()
        watchlist.Init(buf, pos)
        return cls.InitFromObj(watchlist)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, watchlist):
        x = WatchlistT()
        x._UnPack(watchlist)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.items == other.items

    # WatchlistT
    def _UnPack(self, watchlist):
        if watchlist is None:
            return
        self.name = watchlist.Name()
        if not watchlist.ItemsIsNone():
            self.items = []
            for i in range(watchlist.ItemsLength()):
                self.items.append(watchlist.Items(i))

    # WatchlistT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.items is not None:
            itemslist = []
            for i in range(len(self.items)):
                itemslist.append(builder.CreateString(self.items[i]))
            WatchlistStartItemsVector(builder, len(self.items))
            for i in reversed(range(len(self.items))):
                builder.PrependUOffsetTRelative(itemslist[i])
            items = builder.EndVector()
        WatchlistStart(builder)
        if self.name is not None:
            WatchlistAddName(builder, name)
        if self.items is not None:
            WatchlistAddItems(builder, items)
        watchlist = WatchlistEnd(builder)
        return watchlist
