# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Sampling(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sampling()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSampling(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Sampling
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # sample time in Âµ seconds for minimum sampling of data - currently only multiples of 1000 are supported
    # Sampling
    def SamplingInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 1000000

def SamplingStart(builder): builder.StartObject(1)
def Start(builder):
    return SamplingStart(builder)
def SamplingAddSamplingInterval(builder, samplingInterval): builder.PrependUint64Slot(0, samplingInterval, 1000000)
def AddSamplingInterval(builder, samplingInterval):
    return SamplingAddSamplingInterval(builder, samplingInterval)
def SamplingEnd(builder): return builder.EndObject()
def End(builder):
    return SamplingEnd(builder)

class SamplingT(object):

    # SamplingT
    def __init__(self):
        self.samplingInterval = 1000000  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sampling = Sampling()
        sampling.Init(buf, pos)
        return cls.InitFromObj(sampling)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sampling):
        x = SamplingT()
        x._UnPack(sampling)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.samplingInterval == other.samplingInterval

    # SamplingT
    def _UnPack(self, sampling):
        if sampling is None:
            return
        self.samplingInterval = sampling.SamplingInterval()

    # SamplingT
    def Pack(self, builder):
        SamplingStart(builder)
        SamplingAddSamplingInterval(builder, self.samplingInterval)
        sampling = SamplingEnd(builder)
        return sampling
