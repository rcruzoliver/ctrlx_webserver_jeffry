# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DebugChannel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DebugChannel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDebugChannel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DebugChannel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DebugChannel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DebugChannel
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DebugChannel
    def IsTrigger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DebugChannelStart(builder): builder.StartObject(3)
def Start(builder):
    return DebugChannelStart(builder)
def DebugChannelAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return DebugChannelAddName(builder, name)
def DebugChannelAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return DebugChannelAddAddress(builder, address)
def DebugChannelAddIsTrigger(builder, isTrigger): builder.PrependBoolSlot(2, isTrigger, 0)
def AddIsTrigger(builder, isTrigger):
    return DebugChannelAddIsTrigger(builder, isTrigger)
def DebugChannelEnd(builder): return builder.EndObject()
def End(builder):
    return DebugChannelEnd(builder)

class DebugChannelT(object):

    # DebugChannelT
    def __init__(self):
        self.name = None  # type: str
        self.address = None  # type: str
        self.isTrigger = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        debugChannel = DebugChannel()
        debugChannel.Init(buf, pos)
        return cls.InitFromObj(debugChannel)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, debugChannel):
        x = DebugChannelT()
        x._UnPack(debugChannel)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.address == other.address and \
            self.isTrigger == other.isTrigger

    # DebugChannelT
    def _UnPack(self, debugChannel):
        if debugChannel is None:
            return
        self.name = debugChannel.Name()
        self.address = debugChannel.Address()
        self.isTrigger = debugChannel.IsTrigger()

    # DebugChannelT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.address is not None:
            address = builder.CreateString(self.address)
        DebugChannelStart(builder)
        if self.name is not None:
            DebugChannelAddName(builder, name)
        if self.address is not None:
            DebugChannelAddAddress(builder, address)
        DebugChannelAddIsTrigger(builder, self.isTrigger)
        debugChannel = DebugChannelEnd(builder)
        return debugChannel
