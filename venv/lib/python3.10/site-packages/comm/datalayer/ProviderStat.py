# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# statistics of a provider
class ProviderStat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProviderStat()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProviderStat(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProviderStat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProviderStat
    def Identity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProviderStat
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProviderStat
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProviderStat
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ProviderStat
    def RejectedNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ProviderStat
    def RejectedNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProviderStat
    def RejectedNodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ProviderStatStart(builder): builder.StartObject(3)
def Start(builder):
    return ProviderStatStart(builder)
def ProviderStatAddIdentity(builder, identity): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(identity), 0)
def AddIdentity(builder, identity):
    return ProviderStatAddIdentity(builder, identity)
def ProviderStatAddNodes(builder, nodes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)
def AddNodes(builder, nodes):
    return ProviderStatAddNodes(builder, nodes)
def ProviderStatStartNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNodesVector(builder, numElems):
    return ProviderStatStartNodesVector(builder, numElems)
def ProviderStatAddRejectedNodes(builder, rejectedNodes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rejectedNodes), 0)
def AddRejectedNodes(builder, rejectedNodes):
    return ProviderStatAddRejectedNodes(builder, rejectedNodes)
def ProviderStatStartRejectedNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRejectedNodesVector(builder, numElems):
    return ProviderStatStartRejectedNodesVector(builder, numElems)
def ProviderStatEnd(builder): return builder.EndObject()
def End(builder):
    return ProviderStatEnd(builder)
try:
    from typing import List
except:
    pass

class ProviderStatT(object):

    # ProviderStatT
    def __init__(self):
        self.identity = None  # type: str
        self.nodes = None  # type: List[str]
        self.rejectedNodes = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        providerStat = ProviderStat()
        providerStat.Init(buf, pos)
        return cls.InitFromObj(providerStat)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, providerStat):
        x = ProviderStatT()
        x._UnPack(providerStat)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.identity == other.identity and \
            self.nodes == other.nodes and \
            self.rejectedNodes == other.rejectedNodes

    # ProviderStatT
    def _UnPack(self, providerStat):
        if providerStat is None:
            return
        self.identity = providerStat.Identity()
        if not providerStat.NodesIsNone():
            self.nodes = []
            for i in range(providerStat.NodesLength()):
                self.nodes.append(providerStat.Nodes(i))
        if not providerStat.RejectedNodesIsNone():
            self.rejectedNodes = []
            for i in range(providerStat.RejectedNodesLength()):
                self.rejectedNodes.append(providerStat.RejectedNodes(i))

    # ProviderStatT
    def Pack(self, builder):
        if self.identity is not None:
            identity = builder.CreateString(self.identity)
        if self.nodes is not None:
            nodeslist = []
            for i in range(len(self.nodes)):
                nodeslist.append(builder.CreateString(self.nodes[i]))
            ProviderStatStartNodesVector(builder, len(self.nodes))
            for i in reversed(range(len(self.nodes))):
                builder.PrependUOffsetTRelative(nodeslist[i])
            nodes = builder.EndVector()
        if self.rejectedNodes is not None:
            rejectedNodeslist = []
            for i in range(len(self.rejectedNodes)):
                rejectedNodeslist.append(builder.CreateString(self.rejectedNodes[i]))
            ProviderStatStartRejectedNodesVector(builder, len(self.rejectedNodes))
            for i in reversed(range(len(self.rejectedNodes))):
                builder.PrependUOffsetTRelative(rejectedNodeslist[i])
            rejectedNodes = builder.EndVector()
        ProviderStatStart(builder)
        if self.identity is not None:
            ProviderStatAddIdentity(builder, identity)
        if self.nodes is not None:
            ProviderStatAddNodes(builder, nodes)
        if self.rejectedNodes is not None:
            ProviderStatAddRejectedNodes(builder, rejectedNodes)
        providerStat = ProviderStatEnd(builder)
        return providerStat
