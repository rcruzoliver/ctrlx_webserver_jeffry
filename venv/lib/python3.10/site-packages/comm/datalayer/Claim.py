# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Claim(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Claim()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClaim(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Claim
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Claim
    def Claim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Claim
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ClaimStart(builder): builder.StartObject(2)
def Start(builder):
    return ClaimStart(builder)
def ClaimAddClaim(builder, claim): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(claim), 0)
def AddClaim(builder, claim):
    return ClaimAddClaim(builder, claim)
def ClaimAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ClaimAddValue(builder, value)
def ClaimEnd(builder): return builder.EndObject()
def End(builder):
    return ClaimEnd(builder)

class ClaimT(object):

    # ClaimT
    def __init__(self):
        self.claim = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        claim = Claim()
        claim.Init(buf, pos)
        return cls.InitFromObj(claim)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, claim):
        x = ClaimT()
        x._UnPack(claim)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.claim == other.claim and \
            self.value == other.value

    # ClaimT
    def _UnPack(self, claim):
        if claim is None:
            return
        self.claim = claim.Claim()
        self.value = claim.Value()

    # ClaimT
    def Pack(self, builder):
        if self.claim is not None:
            claim = builder.CreateString(self.claim)
        if self.value is not None:
            value = builder.CreateString(self.value)
        ClaimStart(builder)
        if self.claim is not None:
            ClaimAddClaim(builder, claim)
        if self.value is not None:
            ClaimAddValue(builder, value)
        claim = ClaimEnd(builder)
        return claim
