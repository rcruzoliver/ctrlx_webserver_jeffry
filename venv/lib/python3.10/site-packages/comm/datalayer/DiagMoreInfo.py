# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DiagMoreInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagMoreInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagMoreInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DiagMoreInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # defined key 
    #   "requiredLicenses": list of required licences seperated by ","
    #   "requiredScopes": list of required scopes seperated by ","
    # DiagMoreInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # corresponding value
    # DiagMoreInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagMoreInfoStart(builder): builder.StartObject(2)
def Start(builder):
    return DiagMoreInfoStart(builder)
def DiagMoreInfoAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def AddKey(builder, key):
    return DiagMoreInfoAddKey(builder, key)
def DiagMoreInfoAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return DiagMoreInfoAddValue(builder, value)
def DiagMoreInfoEnd(builder): return builder.EndObject()
def End(builder):
    return DiagMoreInfoEnd(builder)

class DiagMoreInfoT(object):

    # DiagMoreInfoT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagMoreInfo = DiagMoreInfo()
        diagMoreInfo.Init(buf, pos)
        return cls.InitFromObj(diagMoreInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagMoreInfo):
        x = DiagMoreInfoT()
        x._UnPack(diagMoreInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.key == other.key and \
            self.value == other.value

    # DiagMoreInfoT
    def _UnPack(self, diagMoreInfo):
        if diagMoreInfo is None:
            return
        self.key = diagMoreInfo.Key()
        self.value = diagMoreInfo.Value()

    # DiagMoreInfoT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        DiagMoreInfoStart(builder)
        if self.key is not None:
            DiagMoreInfoAddKey(builder, key)
        if self.value is not None:
            DiagMoreInfoAddValue(builder, value)
        diagMoreInfo = DiagMoreInfoEnd(builder)
        return diagMoreInfo
