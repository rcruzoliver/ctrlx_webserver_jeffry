# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfString(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfString()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfString(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfString
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfString
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ArrayOfString
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfString
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfStringStart(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfStringStart(builder)
def ArrayOfStringAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ArrayOfStringAddValue(builder, value)
def ArrayOfStringStartValueVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartValueVector(builder, numElems):
    return ArrayOfStringStartValueVector(builder, numElems)
def ArrayOfStringEnd(builder): return builder.EndObject()
def End(builder):
    return ArrayOfStringEnd(builder)
try:
    from typing import List
except:
    pass

class ArrayOfStringT(object):

    # ArrayOfStringT
    def __init__(self):
        self.value = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfString = ArrayOfString()
        arrayOfString.Init(buf, pos)
        return cls.InitFromObj(arrayOfString)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfString):
        x = ArrayOfStringT()
        x._UnPack(arrayOfString)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # ArrayOfStringT
    def _UnPack(self, arrayOfString):
        if arrayOfString is None:
            return
        if not arrayOfString.ValueIsNone():
            self.value = []
            for i in range(arrayOfString.ValueLength()):
                self.value.append(arrayOfString.Value(i))

    # ArrayOfStringT
    def Pack(self, builder):
        if self.value is not None:
            valuelist = []
            for i in range(len(self.value)):
                valuelist.append(builder.CreateString(self.value[i]))
            ArrayOfStringStartValueVector(builder, len(self.value))
            for i in reversed(range(len(self.value))):
                builder.PrependUOffsetTRelative(valuelist[i])
            value = builder.EndVector()
        ArrayOfStringStart(builder)
        if self.value is not None:
            ArrayOfStringAddValue(builder, value)
        arrayOfString = ArrayOfStringEnd(builder)
        return arrayOfString
