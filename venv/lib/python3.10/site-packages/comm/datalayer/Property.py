# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# The table Property can be used to set additional optional properties which influence the subcription behaviour.
# If no Properties are given, default values will be used automatically.
class Property(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Property()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProperty(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Property
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Property
    def RuleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Property
    def Rule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def PropertyStart(builder): builder.StartObject(2)
def Start(builder):
    return PropertyStart(builder)
def PropertyAddRuleType(builder, ruleType): builder.PrependUint8Slot(0, ruleType, 0)
def AddRuleType(builder, ruleType):
    return PropertyAddRuleType(builder, ruleType)
def PropertyAddRule(builder, rule): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rule), 0)
def AddRule(builder, rule):
    return PropertyAddRule(builder, rule)
def PropertyEnd(builder): return builder.EndObject()
def End(builder):
    return PropertyEnd(builder)
import comm.datalayer.ChangeEvents
import comm.datalayer.Counting
import comm.datalayer.DataChangeFilter
import comm.datalayer.LosslessRateLimit
import comm.datalayer.Properties
import comm.datalayer.Queueing
import comm.datalayer.Sampling
try:
    from typing import Union
except:
    pass

class PropertyT(object):

    # PropertyT
    def __init__(self):
        self.ruleType = 0  # type: int
        self.rule = None  # type: Union[None, comm.datalayer.Sampling.SamplingT, comm.datalayer.Queueing.QueueingT, comm.datalayer.DataChangeFilter.DataChangeFilterT, comm.datalayer.ChangeEvents.ChangeEventsT, comm.datalayer.Counting.CountingT, comm.datalayer.LosslessRateLimit.LosslessRateLimitT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        property = Property()
        property.Init(buf, pos)
        return cls.InitFromObj(property)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, property):
        x = PropertyT()
        x._UnPack(property)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.ruleType == other.ruleType and \
            self.rule == other.rule

    # PropertyT
    def _UnPack(self, property):
        if property is None:
            return
        self.ruleType = property.RuleType()
        self.rule = comm.datalayer.Properties.PropertiesCreator(self.ruleType, property.Rule())

    # PropertyT
    def Pack(self, builder):
        if self.rule is not None:
            rule = self.rule.Pack(builder)
        PropertyStart(builder)
        PropertyAddRuleType(builder, self.ruleType)
        if self.rule is not None:
            PropertyAddRule(builder, rule)
        property = PropertyEnd(builder)
        return property
