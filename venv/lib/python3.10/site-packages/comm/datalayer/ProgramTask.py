# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProgramTask(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProgramTask()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProgramTask(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProgramTask
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # id of the task
    # ProgramTask
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # state of the task
    # ProgramTask
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Progress of the task in percent, if it's not possible to calculate, set state to running and progress to 0
    # ProgramTask
    def Progress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # result of task;
    # ProgramTask
    def Result(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Diagnosis import Diagnosis
            obj = Diagnosis()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Additional progress information
    # ProgramTask
    def ProgressInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional progress information as key value pair
    # ProgramTask
    def ProgressData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.ProgressData import ProgressData
            obj = ProgressData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProgramTask
    def ProgressDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProgramTask
    def ProgressDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def ProgramTaskStart(builder): builder.StartObject(6)
def Start(builder):
    return ProgramTaskStart(builder)
def ProgramTaskAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return ProgramTaskAddId(builder, id)
def ProgramTaskAddState(builder, state): builder.PrependInt8Slot(1, state, 0)
def AddState(builder, state):
    return ProgramTaskAddState(builder, state)
def ProgramTaskAddProgress(builder, progress): builder.PrependUint32Slot(2, progress, 0)
def AddProgress(builder, progress):
    return ProgramTaskAddProgress(builder, progress)
def ProgramTaskAddResult(builder, result): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(result), 0)
def AddResult(builder, result):
    return ProgramTaskAddResult(builder, result)
def ProgramTaskAddProgressInfo(builder, progressInfo): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(progressInfo), 0)
def AddProgressInfo(builder, progressInfo):
    return ProgramTaskAddProgressInfo(builder, progressInfo)
def ProgramTaskAddProgressData(builder, progressData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(progressData), 0)
def AddProgressData(builder, progressData):
    return ProgramTaskAddProgressData(builder, progressData)
def ProgramTaskStartProgressDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartProgressDataVector(builder, numElems):
    return ProgramTaskStartProgressDataVector(builder, numElems)
def ProgramTaskEnd(builder): return builder.EndObject()
def End(builder):
    return ProgramTaskEnd(builder)
import comm.datalayer.Diagnosis
import comm.datalayer.ProgressData
try:
    from typing import List, Optional
except:
    pass

class ProgramTaskT(object):

    # ProgramTaskT
    def __init__(self):
        self.id = None  # type: str
        self.state = 0  # type: int
        self.progress = 0  # type: int
        self.result = None  # type: Optional[comm.datalayer.Diagnosis.DiagnosisT]
        self.progressInfo = None  # type: str
        self.progressData = None  # type: List[comm.datalayer.ProgressData.ProgressDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        programTask = ProgramTask()
        programTask.Init(buf, pos)
        return cls.InitFromObj(programTask)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, programTask):
        x = ProgramTaskT()
        x._UnPack(programTask)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.state == other.state and \
            self.progress == other.progress and \
            self.result == other.result and \
            self.progressInfo == other.progressInfo and \
            self.progressData == other.progressData

    # ProgramTaskT
    def _UnPack(self, programTask):
        if programTask is None:
            return
        self.id = programTask.Id()
        self.state = programTask.State()
        self.progress = programTask.Progress()
        if programTask.Result() is not None:
            self.result = comm.datalayer.Diagnosis.DiagnosisT.InitFromObj(programTask.Result())
        self.progressInfo = programTask.ProgressInfo()
        if not programTask.ProgressDataIsNone():
            self.progressData = []
            for i in range(programTask.ProgressDataLength()):
                if programTask.ProgressData(i) is None:
                    self.progressData.append(None)
                else:
                    progressData_ = comm.datalayer.ProgressData.ProgressDataT.InitFromObj(programTask.ProgressData(i))
                    self.progressData.append(progressData_)

    # ProgramTaskT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.result is not None:
            result = self.result.Pack(builder)
        if self.progressInfo is not None:
            progressInfo = builder.CreateString(self.progressInfo)
        if self.progressData is not None:
            progressDatalist = []
            for i in range(len(self.progressData)):
                progressDatalist.append(self.progressData[i].Pack(builder))
            ProgramTaskStartProgressDataVector(builder, len(self.progressData))
            for i in reversed(range(len(self.progressData))):
                builder.PrependUOffsetTRelative(progressDatalist[i])
            progressData = builder.EndVector()
        ProgramTaskStart(builder)
        if self.id is not None:
            ProgramTaskAddId(builder, id)
        ProgramTaskAddState(builder, self.state)
        ProgramTaskAddProgress(builder, self.progress)
        if self.result is not None:
            ProgramTaskAddResult(builder, result)
        if self.progressInfo is not None:
            ProgramTaskAddProgressInfo(builder, progressInfo)
        if self.progressData is not None:
            ProgramTaskAddProgressData(builder, progressData)
        programTask = ProgramTaskEnd(builder)
        return programTask
