# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Token(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Token()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsToken(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Token
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # for all unknown claims - not in fields below
    # Token
    def Claims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Claim import Claim
            obj = Claim()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Token
    def ClaimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Token
    def ClaimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Token
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Token
    def Iat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Token
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Token
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Token
    def Plchandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Token
    def Scope(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Token
    def ScopeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Token
    def ScopeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def TokenStart(builder): builder.StartObject(7)
def Start(builder):
    return TokenStart(builder)
def TokenAddClaims(builder, claims): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(claims), 0)
def AddClaims(builder, claims):
    return TokenAddClaims(builder, claims)
def TokenStartClaimsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartClaimsVector(builder, numElems):
    return TokenStartClaimsVector(builder, numElems)
def TokenAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return TokenAddId(builder, id)
def TokenAddIat(builder, iat): builder.PrependUint64Slot(2, iat, 0)
def AddIat(builder, iat):
    return TokenAddIat(builder, iat)
def TokenAddExp(builder, exp): builder.PrependUint64Slot(3, exp, 0)
def AddExp(builder, exp):
    return TokenAddExp(builder, exp)
def TokenAddName(builder, name): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return TokenAddName(builder, name)
def TokenAddPlchandle(builder, plchandle): builder.PrependUint64Slot(5, plchandle, 0)
def AddPlchandle(builder, plchandle):
    return TokenAddPlchandle(builder, plchandle)
def TokenAddScope(builder, scope): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(scope), 0)
def AddScope(builder, scope):
    return TokenAddScope(builder, scope)
def TokenStartScopeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartScopeVector(builder, numElems):
    return TokenStartScopeVector(builder, numElems)
def TokenEnd(builder): return builder.EndObject()
def End(builder):
    return TokenEnd(builder)
import comm.datalayer.Claim
try:
    from typing import List
except:
    pass

class TokenT(object):

    # TokenT
    def __init__(self):
        self.claims = None  # type: List[comm.datalayer.Claim.ClaimT]
        self.id = None  # type: str
        self.iat = 0  # type: int
        self.exp = 0  # type: int
        self.name = None  # type: str
        self.plchandle = 0  # type: int
        self.scope = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        token = Token()
        token.Init(buf, pos)
        return cls.InitFromObj(token)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, token):
        x = TokenT()
        x._UnPack(token)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.claims == other.claims and \
            self.id == other.id and \
            self.iat == other.iat and \
            self.exp == other.exp and \
            self.name == other.name and \
            self.plchandle == other.plchandle and \
            self.scope == other.scope

    # TokenT
    def _UnPack(self, token):
        if token is None:
            return
        if not token.ClaimsIsNone():
            self.claims = []
            for i in range(token.ClaimsLength()):
                if token.Claims(i) is None:
                    self.claims.append(None)
                else:
                    claim_ = comm.datalayer.Claim.ClaimT.InitFromObj(token.Claims(i))
                    self.claims.append(claim_)
        self.id = token.Id()
        self.iat = token.Iat()
        self.exp = token.Exp()
        self.name = token.Name()
        self.plchandle = token.Plchandle()
        if not token.ScopeIsNone():
            self.scope = []
            for i in range(token.ScopeLength()):
                self.scope.append(token.Scope(i))

    # TokenT
    def Pack(self, builder):
        if self.claims is not None:
            claimslist = []
            for i in range(len(self.claims)):
                claimslist.append(self.claims[i].Pack(builder))
            TokenStartClaimsVector(builder, len(self.claims))
            for i in reversed(range(len(self.claims))):
                builder.PrependUOffsetTRelative(claimslist[i])
            claims = builder.EndVector()
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.scope is not None:
            scopelist = []
            for i in range(len(self.scope)):
                scopelist.append(builder.CreateString(self.scope[i]))
            TokenStartScopeVector(builder, len(self.scope))
            for i in reversed(range(len(self.scope))):
                builder.PrependUOffsetTRelative(scopelist[i])
            scope = builder.EndVector()
        TokenStart(builder)
        if self.claims is not None:
            TokenAddClaims(builder, claims)
        if self.id is not None:
            TokenAddId(builder, id)
        TokenAddIat(builder, self.iat)
        TokenAddExp(builder, self.exp)
        if self.name is not None:
            TokenAddName(builder, name)
        TokenAddPlchandle(builder, self.plchandle)
        if self.scope is not None:
            TokenAddScope(builder, scope)
        token = TokenEnd(builder)
        return token
