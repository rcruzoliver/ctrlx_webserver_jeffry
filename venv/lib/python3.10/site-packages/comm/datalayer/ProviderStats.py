# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# statistics of all providers
class ProviderStats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProviderStats()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsProviderStats(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ProviderStats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProviderStats
    def Providers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.ProviderStat import ProviderStat
            obj = ProviderStat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProviderStats
    def ProvidersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProviderStats
    def ProvidersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ProviderStatsStart(builder): builder.StartObject(1)
def Start(builder):
    return ProviderStatsStart(builder)
def ProviderStatsAddProviders(builder, providers): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(providers), 0)
def AddProviders(builder, providers):
    return ProviderStatsAddProviders(builder, providers)
def ProviderStatsStartProvidersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartProvidersVector(builder, numElems):
    return ProviderStatsStartProvidersVector(builder, numElems)
def ProviderStatsEnd(builder): return builder.EndObject()
def End(builder):
    return ProviderStatsEnd(builder)
import comm.datalayer.ProviderStat
try:
    from typing import List
except:
    pass

class ProviderStatsT(object):

    # ProviderStatsT
    def __init__(self):
        self.providers = None  # type: List[comm.datalayer.ProviderStat.ProviderStatT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        providerStats = ProviderStats()
        providerStats.Init(buf, pos)
        return cls.InitFromObj(providerStats)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, providerStats):
        x = ProviderStatsT()
        x._UnPack(providerStats)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.providers == other.providers

    # ProviderStatsT
    def _UnPack(self, providerStats):
        if providerStats is None:
            return
        if not providerStats.ProvidersIsNone():
            self.providers = []
            for i in range(providerStats.ProvidersLength()):
                if providerStats.Providers(i) is None:
                    self.providers.append(None)
                else:
                    providerStat_ = comm.datalayer.ProviderStat.ProviderStatT.InitFromObj(providerStats.Providers(i))
                    self.providers.append(providerStat_)

    # ProviderStatsT
    def Pack(self, builder):
        if self.providers is not None:
            providerslist = []
            for i in range(len(self.providers)):
                providerslist.append(self.providers[i].Pack(builder))
            ProviderStatsStartProvidersVector(builder, len(self.providers))
            for i in reversed(range(len(self.providers))):
                builder.PrependUOffsetTRelative(providerslist[i])
            providers = builder.EndVector()
        ProviderStatsStart(builder)
        if self.providers is not None:
            ProviderStatsAddProviders(builder, providers)
        providerStats = ProviderStatsEnd(builder)
        return providerStats
