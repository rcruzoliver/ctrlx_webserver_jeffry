# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfInt8(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfInt8()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArrayOfInt8(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ArrayOfInt8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfInt8
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ArrayOfInt8
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # ArrayOfInt8
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfInt8
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfInt8Start(builder): builder.StartObject(1)
def Start(builder):
    return ArrayOfInt8Start(builder)
def ArrayOfInt8AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def AddValue(builder, value):
    return ArrayOfInt8AddValue(builder, value)
def ArrayOfInt8StartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartValueVector(builder, numElems):
    return ArrayOfInt8StartValueVector(builder, numElems)
def ArrayOfInt8End(builder): return builder.EndObject()
def End(builder):
    return ArrayOfInt8End(builder)
try:
    from typing import List
except:
    pass

class ArrayOfInt8T(object):

    # ArrayOfInt8T
    def __init__(self):
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfInt8 = ArrayOfInt8()
        arrayOfInt8.Init(buf, pos)
        return cls.InitFromObj(arrayOfInt8)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, arrayOfInt8):
        x = ArrayOfInt8T()
        x._UnPack(arrayOfInt8)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value

    # ArrayOfInt8T
    def _UnPack(self, arrayOfInt8):
        if arrayOfInt8 is None:
            return
        if not arrayOfInt8.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(arrayOfInt8.ValueLength()):
                    self.value.append(arrayOfInt8.Value(i))
            else:
                self.value = arrayOfInt8.ValueAsNumpy()

    # ArrayOfInt8T
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                ArrayOfInt8StartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependByte(self.value[i])
                value = builder.EndVector()
        ArrayOfInt8Start(builder)
        if self.value is not None:
            ArrayOfInt8AddValue(builder, value)
        arrayOfInt8 = ArrayOfInt8End(builder)
        return arrayOfInt8
