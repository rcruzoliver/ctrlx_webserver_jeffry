# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Diagnosis of nvram
class RetainDiagnosis(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RetainDiagnosis()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRetainDiagnosis(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RetainDiagnosis
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # List of corrupted memory areas in nvram
    # RetainDiagnosis
    def Corrupted(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from comm.datalayer.RetainCorrupted import RetainCorrupted
            obj = RetainCorrupted()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RetainDiagnosis
    def CorruptedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RetainDiagnosis
    def CorruptedIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RetainDiagnosisStart(builder): builder.StartObject(1)
def Start(builder):
    return RetainDiagnosisStart(builder)
def RetainDiagnosisAddCorrupted(builder, corrupted): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(corrupted), 0)
def AddCorrupted(builder, corrupted):
    return RetainDiagnosisAddCorrupted(builder, corrupted)
def RetainDiagnosisStartCorruptedVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def StartCorruptedVector(builder, numElems):
    return RetainDiagnosisStartCorruptedVector(builder, numElems)
def RetainDiagnosisEnd(builder): return builder.EndObject()
def End(builder):
    return RetainDiagnosisEnd(builder)
import comm.datalayer.RetainCorrupted
try:
    from typing import List
except:
    pass

class RetainDiagnosisT(object):

    # RetainDiagnosisT
    def __init__(self):
        self.corrupted = None  # type: List[comm.datalayer.RetainCorrupted.RetainCorruptedT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        retainDiagnosis = RetainDiagnosis()
        retainDiagnosis.Init(buf, pos)
        return cls.InitFromObj(retainDiagnosis)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, retainDiagnosis):
        x = RetainDiagnosisT()
        x._UnPack(retainDiagnosis)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.corrupted == other.corrupted

    # RetainDiagnosisT
    def _UnPack(self, retainDiagnosis):
        if retainDiagnosis is None:
            return
        if not retainDiagnosis.CorruptedIsNone():
            self.corrupted = []
            for i in range(retainDiagnosis.CorruptedLength()):
                if retainDiagnosis.Corrupted(i) is None:
                    self.corrupted.append(None)
                else:
                    retainCorrupted_ = comm.datalayer.RetainCorrupted.RetainCorruptedT.InitFromObj(retainDiagnosis.Corrupted(i))
                    self.corrupted.append(retainCorrupted_)

    # RetainDiagnosisT
    def Pack(self, builder):
        if self.corrupted is not None:
            RetainDiagnosisStartCorruptedVector(builder, len(self.corrupted))
            for i in reversed(range(len(self.corrupted))):
                self.corrupted[i].Pack(builder)
            corrupted = builder.EndVector()
        RetainDiagnosisStart(builder)
        if self.corrupted is not None:
            RetainDiagnosisAddCorrupted(builder, corrupted)
        retainDiagnosis = RetainDiagnosisEnd(builder)
        return retainDiagnosis
