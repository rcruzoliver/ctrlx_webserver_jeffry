# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RtData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RtData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRtData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RtData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # current revision number of RT memory
    # RtData
    def RevisionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # areas to read/write
    # RtData
    def Areas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.RtDataArea import RtDataArea
            obj = RtDataArea()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RtData
    def AreasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RtData
    def AreasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def RtDataStart(builder): builder.StartObject(2)
def Start(builder):
    return RtDataStart(builder)
def RtDataAddRevisionNumber(builder, revisionNumber): builder.PrependUint32Slot(0, revisionNumber, 0)
def AddRevisionNumber(builder, revisionNumber):
    return RtDataAddRevisionNumber(builder, revisionNumber)
def RtDataAddAreas(builder, areas): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areas), 0)
def AddAreas(builder, areas):
    return RtDataAddAreas(builder, areas)
def RtDataStartAreasVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAreasVector(builder, numElems):
    return RtDataStartAreasVector(builder, numElems)
def RtDataEnd(builder): return builder.EndObject()
def End(builder):
    return RtDataEnd(builder)
import comm.datalayer.RtDataArea
try:
    from typing import List
except:
    pass

class RtDataT(object):

    # RtDataT
    def __init__(self):
        self.revisionNumber = 0  # type: int
        self.areas = None  # type: List[comm.datalayer.RtDataArea.RtDataAreaT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rtData = RtData()
        rtData.Init(buf, pos)
        return cls.InitFromObj(rtData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rtData):
        x = RtDataT()
        x._UnPack(rtData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.revisionNumber == other.revisionNumber and \
            self.areas == other.areas

    # RtDataT
    def _UnPack(self, rtData):
        if rtData is None:
            return
        self.revisionNumber = rtData.RevisionNumber()
        if not rtData.AreasIsNone():
            self.areas = []
            for i in range(rtData.AreasLength()):
                if rtData.Areas(i) is None:
                    self.areas.append(None)
                else:
                    rtDataArea_ = comm.datalayer.RtDataArea.RtDataAreaT.InitFromObj(rtData.Areas(i))
                    self.areas.append(rtDataArea_)

    # RtDataT
    def Pack(self, builder):
        if self.areas is not None:
            areaslist = []
            for i in range(len(self.areas)):
                areaslist.append(self.areas[i].Pack(builder))
            RtDataStartAreasVector(builder, len(self.areas))
            for i in reversed(range(len(self.areas))):
                builder.PrependUOffsetTRelative(areaslist[i])
            areas = builder.EndVector()
        RtDataStart(builder)
        RtDataAddRevisionNumber(builder, self.revisionNumber)
        if self.areas is not None:
            RtDataAddAreas(builder, areas)
        rtData = RtDataEnd(builder)
        return rtData
