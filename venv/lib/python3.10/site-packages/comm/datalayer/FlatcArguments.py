# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FlatcArguments(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlatcArguments()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlatcArguments(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlatcArguments
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the created result
    # FlatcArguments
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # datalayer type addresses which should be compiled
    # FlatcArguments
    def Addresses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlatcArguments
    def AddressesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatcArguments
    def AddressesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # flatc compiler options
    # FlatcArguments
    def Options(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlatcArguments
    def OptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatcArguments
    def OptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def FlatcArgumentsStart(builder): builder.StartObject(3)
def Start(builder):
    return FlatcArgumentsStart(builder)
def FlatcArgumentsAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return FlatcArgumentsAddName(builder, name)
def FlatcArgumentsAddAddresses(builder, addresses): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(addresses), 0)
def AddAddresses(builder, addresses):
    return FlatcArgumentsAddAddresses(builder, addresses)
def FlatcArgumentsStartAddressesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartAddressesVector(builder, numElems):
    return FlatcArgumentsStartAddressesVector(builder, numElems)
def FlatcArgumentsAddOptions(builder, options): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)
def AddOptions(builder, options):
    return FlatcArgumentsAddOptions(builder, options)
def FlatcArgumentsStartOptionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOptionsVector(builder, numElems):
    return FlatcArgumentsStartOptionsVector(builder, numElems)
def FlatcArgumentsEnd(builder): return builder.EndObject()
def End(builder):
    return FlatcArgumentsEnd(builder)
try:
    from typing import List
except:
    pass

class FlatcArgumentsT(object):

    # FlatcArgumentsT
    def __init__(self):
        self.name = None  # type: str
        self.addresses = None  # type: List[str]
        self.options = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flatcArguments = FlatcArguments()
        flatcArguments.Init(buf, pos)
        return cls.InitFromObj(flatcArguments)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flatcArguments):
        x = FlatcArgumentsT()
        x._UnPack(flatcArguments)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.addresses == other.addresses and \
            self.options == other.options

    # FlatcArgumentsT
    def _UnPack(self, flatcArguments):
        if flatcArguments is None:
            return
        self.name = flatcArguments.Name()
        if not flatcArguments.AddressesIsNone():
            self.addresses = []
            for i in range(flatcArguments.AddressesLength()):
                self.addresses.append(flatcArguments.Addresses(i))
        if not flatcArguments.OptionsIsNone():
            self.options = []
            for i in range(flatcArguments.OptionsLength()):
                self.options.append(flatcArguments.Options(i))

    # FlatcArgumentsT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.addresses is not None:
            addresseslist = []
            for i in range(len(self.addresses)):
                addresseslist.append(builder.CreateString(self.addresses[i]))
            FlatcArgumentsStartAddressesVector(builder, len(self.addresses))
            for i in reversed(range(len(self.addresses))):
                builder.PrependUOffsetTRelative(addresseslist[i])
            addresses = builder.EndVector()
        if self.options is not None:
            optionslist = []
            for i in range(len(self.options)):
                optionslist.append(builder.CreateString(self.options[i]))
            FlatcArgumentsStartOptionsVector(builder, len(self.options))
            for i in reversed(range(len(self.options))):
                builder.PrependUOffsetTRelative(optionslist[i])
            options = builder.EndVector()
        FlatcArgumentsStart(builder)
        if self.name is not None:
            FlatcArgumentsAddName(builder, name)
        if self.addresses is not None:
            FlatcArgumentsAddAddresses(builder, addresses)
        if self.options is not None:
            FlatcArgumentsAddOptions(builder, options)
        flatcArguments = FlatcArgumentsEnd(builder)
        return flatcArguments
