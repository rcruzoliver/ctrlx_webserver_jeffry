# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DataChangeFilter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataChangeFilter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataChangeFilter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataChangeFilter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # If (abs(lastCapturedValue - newValue) > deadBandValue) capture(newValue);
    # DataChangeFilter
    def DeadBandValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def DataChangeFilterStart(builder): builder.StartObject(1)
def Start(builder):
    return DataChangeFilterStart(builder)
def DataChangeFilterAddDeadBandValue(builder, deadBandValue): builder.PrependFloat32Slot(0, deadBandValue, 0.0)
def AddDeadBandValue(builder, deadBandValue):
    return DataChangeFilterAddDeadBandValue(builder, deadBandValue)
def DataChangeFilterEnd(builder): return builder.EndObject()
def End(builder):
    return DataChangeFilterEnd(builder)

class DataChangeFilterT(object):

    # DataChangeFilterT
    def __init__(self):
        self.deadBandValue = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataChangeFilter = DataChangeFilter()
        dataChangeFilter.Init(buf, pos)
        return cls.InitFromObj(dataChangeFilter)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataChangeFilter):
        x = DataChangeFilterT()
        x._UnPack(dataChangeFilter)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.deadBandValue == other.deadBandValue

    # DataChangeFilterT
    def _UnPack(self, dataChangeFilter):
        if dataChangeFilter is None:
            return
        self.deadBandValue = dataChangeFilter.DeadBandValue()

    # DataChangeFilterT
    def Pack(self, builder):
        DataChangeFilterStart(builder)
        DataChangeFilterAddDeadBandValue(builder, self.deadBandValue)
        dataChangeFilter = DataChangeFilterEnd(builder)
        return dataChangeFilter
