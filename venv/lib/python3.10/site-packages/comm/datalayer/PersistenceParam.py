# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the persistence operation
# the type inforamtion of this flatbuffer is provided under "types/datalayer/persistence-param"
# at implementation of "onMetadata()" return this path as create type reference
class PersistenceParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PersistenceParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPersistenceParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PersistenceParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # the directory of the configuration to be loaded, or the directory of the target configuration in case of a save operation
    # PersistenceParam
    def ConfigurationPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # a random code which identifies the instance of save or load operation
    # PersistenceParam
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # specifies the current processing phase of a save or load operation
    # PersistenceParam
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PersistenceParamStart(builder): builder.StartObject(3)
def Start(builder):
    return PersistenceParamStart(builder)
def PersistenceParamAddConfigurationPath(builder, configurationPath): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(configurationPath), 0)
def AddConfigurationPath(builder, configurationPath):
    return PersistenceParamAddConfigurationPath(builder, configurationPath)
def PersistenceParamAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return PersistenceParamAddId(builder, id)
def PersistenceParamAddPhase(builder, phase): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(phase), 0)
def AddPhase(builder, phase):
    return PersistenceParamAddPhase(builder, phase)
def PersistenceParamEnd(builder): return builder.EndObject()
def End(builder):
    return PersistenceParamEnd(builder)

class PersistenceParamT(object):

    # PersistenceParamT
    def __init__(self):
        self.configurationPath = None  # type: str
        self.id = None  # type: str
        self.phase = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        persistenceParam = PersistenceParam()
        persistenceParam.Init(buf, pos)
        return cls.InitFromObj(persistenceParam)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, persistenceParam):
        x = PersistenceParamT()
        x._UnPack(persistenceParam)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.configurationPath == other.configurationPath and \
            self.id == other.id and \
            self.phase == other.phase

    # PersistenceParamT
    def _UnPack(self, persistenceParam):
        if persistenceParam is None:
            return
        self.configurationPath = persistenceParam.ConfigurationPath()
        self.id = persistenceParam.Id()
        self.phase = persistenceParam.Phase()

    # PersistenceParamT
    def Pack(self, builder):
        if self.configurationPath is not None:
            configurationPath = builder.CreateString(self.configurationPath)
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.phase is not None:
            phase = builder.CreateString(self.phase)
        PersistenceParamStart(builder)
        if self.configurationPath is not None:
            PersistenceParamAddConfigurationPath(builder, configurationPath)
        if self.id is not None:
            PersistenceParamAddId(builder, id)
        if self.phase is not None:
            PersistenceParamAddPhase(builder, phase)
        persistenceParam = PersistenceParamEnd(builder)
        return persistenceParam
