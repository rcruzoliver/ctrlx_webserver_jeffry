# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LosslessRateLimit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LosslessRateLimit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLosslessRateLimit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LosslessRateLimit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Only every n-th new data will be recoreded - this is usefull to limit amount of data transmitted
    # This feature is only implemented in lossless subscriptions
    # LosslessRateLimit
    def RateLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def LosslessRateLimitStart(builder): builder.StartObject(1)
def Start(builder):
    return LosslessRateLimitStart(builder)
def LosslessRateLimitAddRateLimit(builder, rateLimit): builder.PrependUint32Slot(0, rateLimit, 0)
def AddRateLimit(builder, rateLimit):
    return LosslessRateLimitAddRateLimit(builder, rateLimit)
def LosslessRateLimitEnd(builder): return builder.EndObject()
def End(builder):
    return LosslessRateLimitEnd(builder)

class LosslessRateLimitT(object):

    # LosslessRateLimitT
    def __init__(self):
        self.rateLimit = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        losslessRateLimit = LosslessRateLimit()
        losslessRateLimit.Init(buf, pos)
        return cls.InitFromObj(losslessRateLimit)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, losslessRateLimit):
        x = LosslessRateLimitT()
        x._UnPack(losslessRateLimit)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.rateLimit == other.rateLimit

    # LosslessRateLimitT
    def _UnPack(self, losslessRateLimit):
        if losslessRateLimit is None:
            return
        self.rateLimit = losslessRateLimit.RateLimit()

    # LosslessRateLimitT
    def Pack(self, builder):
        LosslessRateLimitStart(builder)
        LosslessRateLimitAddRateLimit(builder, self.rateLimit)
        losslessRateLimit = LosslessRateLimitEnd(builder)
        return losslessRateLimit
