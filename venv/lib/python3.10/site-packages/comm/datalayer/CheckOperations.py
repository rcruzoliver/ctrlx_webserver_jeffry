# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CheckOperations(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CheckOperations()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCheckOperations(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CheckOperations
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # address to check
    # CheckOperations
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # token to check
    # CheckOperations
    def Token(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CheckOperationsStart(builder): builder.StartObject(2)
def Start(builder):
    return CheckOperationsStart(builder)
def CheckOperationsAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def AddAddress(builder, address):
    return CheckOperationsAddAddress(builder, address)
def CheckOperationsAddToken(builder, token): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(token), 0)
def AddToken(builder, token):
    return CheckOperationsAddToken(builder, token)
def CheckOperationsEnd(builder): return builder.EndObject()
def End(builder):
    return CheckOperationsEnd(builder)

class CheckOperationsT(object):

    # CheckOperationsT
    def __init__(self):
        self.address = None  # type: str
        self.token = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        checkOperations = CheckOperations()
        checkOperations.Init(buf, pos)
        return cls.InitFromObj(checkOperations)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, checkOperations):
        x = CheckOperationsT()
        x._UnPack(checkOperations)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.address == other.address and \
            self.token == other.token

    # CheckOperationsT
    def _UnPack(self, checkOperations):
        if checkOperations is None:
            return
        self.address = checkOperations.Address()
        self.token = checkOperations.Token()

    # CheckOperationsT
    def Pack(self, builder):
        if self.address is not None:
            address = builder.CreateString(self.address)
        if self.token is not None:
            token = builder.CreateString(self.token)
        CheckOperationsStart(builder)
        if self.address is not None:
            CheckOperationsAddAddress(builder, address)
        if self.token is not None:
            CheckOperationsAddToken(builder, token)
        checkOperations = CheckOperationsEnd(builder)
        return checkOperations
