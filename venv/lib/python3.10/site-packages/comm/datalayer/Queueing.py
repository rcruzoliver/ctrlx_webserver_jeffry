# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Queueing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Queueing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsQueueing(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Queueing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # size of buffer
    # Queueing
    def QueueSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10

    # The queing strategy. Decided what data should be sent or disarded when the queue runs full before it could be sent.
    # Queueing
    def Behaviour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def QueueingStart(builder): builder.StartObject(2)
def Start(builder):
    return QueueingStart(builder)
def QueueingAddQueueSize(builder, queueSize): builder.PrependUint32Slot(0, queueSize, 10)
def AddQueueSize(builder, queueSize):
    return QueueingAddQueueSize(builder, queueSize)
def QueueingAddBehaviour(builder, behaviour): builder.PrependInt32Slot(1, behaviour, 0)
def AddBehaviour(builder, behaviour):
    return QueueingAddBehaviour(builder, behaviour)
def QueueingEnd(builder): return builder.EndObject()
def End(builder):
    return QueueingEnd(builder)

class QueueingT(object):

    # QueueingT
    def __init__(self):
        self.queueSize = 10  # type: int
        self.behaviour = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        queueing = Queueing()
        queueing.Init(buf, pos)
        return cls.InitFromObj(queueing)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, queueing):
        x = QueueingT()
        x._UnPack(queueing)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.queueSize == other.queueSize and \
            self.behaviour == other.behaviour

    # QueueingT
    def _UnPack(self, queueing):
        if queueing is None:
            return
        self.queueSize = queueing.QueueSize()
        self.behaviour = queueing.Behaviour()

    # QueueingT
    def Pack(self, builder):
        QueueingStart(builder)
        QueueingAddQueueSize(builder, self.queueSize)
        QueueingAddBehaviour(builder, self.behaviour)
        queueing = QueueingEnd(builder)
        return queueing
