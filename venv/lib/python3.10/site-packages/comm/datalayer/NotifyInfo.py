# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NotifyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NotifyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNotifyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NotifyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Node address
    # NotifyInfo
    def Node(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Filetime: Contains a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
    # NotifyInfo
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # NotifyInfo
    def NotifyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NotifyInfoStart(builder): builder.StartObject(3)
def Start(builder):
    return NotifyInfoStart(builder)
def NotifyInfoAddNode(builder, node): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(node), 0)
def AddNode(builder, node):
    return NotifyInfoAddNode(builder, node)
def NotifyInfoAddTimestamp(builder, timestamp): builder.PrependUint64Slot(1, timestamp, 0)
def AddTimestamp(builder, timestamp):
    return NotifyInfoAddTimestamp(builder, timestamp)
def NotifyInfoAddNotifyType(builder, notifyType): builder.PrependInt32Slot(2, notifyType, 0)
def AddNotifyType(builder, notifyType):
    return NotifyInfoAddNotifyType(builder, notifyType)
def NotifyInfoEnd(builder): return builder.EndObject()
def End(builder):
    return NotifyInfoEnd(builder)

class NotifyInfoT(object):

    # NotifyInfoT
    def __init__(self):
        self.node = None  # type: str
        self.timestamp = 0  # type: int
        self.notifyType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        notifyInfo = NotifyInfo()
        notifyInfo.Init(buf, pos)
        return cls.InitFromObj(notifyInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, notifyInfo):
        x = NotifyInfoT()
        x._UnPack(notifyInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.node == other.node and \
            self.timestamp == other.timestamp and \
            self.notifyType == other.notifyType

    # NotifyInfoT
    def _UnPack(self, notifyInfo):
        if notifyInfo is None:
            return
        self.node = notifyInfo.Node()
        self.timestamp = notifyInfo.Timestamp()
        self.notifyType = notifyInfo.NotifyType()

    # NotifyInfoT
    def Pack(self, builder):
        if self.node is not None:
            node = builder.CreateString(self.node)
        NotifyInfoStart(builder)
        if self.node is not None:
            NotifyInfoAddNode(builder, node)
        NotifyInfoAddTimestamp(builder, self.timestamp)
        NotifyInfoAddNotifyType(builder, self.notifyType)
        notifyInfo = NotifyInfoEnd(builder)
        return notifyInfo
