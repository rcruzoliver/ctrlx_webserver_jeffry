# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscriptionProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscriptionProperties()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSubscriptionProperties(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SubscriptionProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # user identification for subscribtion Use it update and dispose the old subscription
    # SubscriptionProperties
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # keepalive in milli seconds for subscription - this time is used to detect life status of providers
    # SubscriptionProperties
    def KeepaliveInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 60000

    # time in milli seconds for upper limit of publish messages to not get flooded with new messages
    # SubscriptionProperties
    def PublishInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1000

    # Rules for subscription
    # SubscriptionProperties
    def Rules(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Property import Property
            obj = Property()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SubscriptionProperties
    def RulesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SubscriptionProperties
    def RulesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # time in milli seconds to re-read data if an error was received for a nodex
    # SubscriptionProperties
    def ErrorInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

def SubscriptionPropertiesStart(builder): builder.StartObject(5)
def Start(builder):
    return SubscriptionPropertiesStart(builder)
def SubscriptionPropertiesAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return SubscriptionPropertiesAddId(builder, id)
def SubscriptionPropertiesAddKeepaliveInterval(builder, keepaliveInterval): builder.PrependUint32Slot(1, keepaliveInterval, 60000)
def AddKeepaliveInterval(builder, keepaliveInterval):
    return SubscriptionPropertiesAddKeepaliveInterval(builder, keepaliveInterval)
def SubscriptionPropertiesAddPublishInterval(builder, publishInterval): builder.PrependUint32Slot(2, publishInterval, 1000)
def AddPublishInterval(builder, publishInterval):
    return SubscriptionPropertiesAddPublishInterval(builder, publishInterval)
def SubscriptionPropertiesAddRules(builder, rules): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rules), 0)
def AddRules(builder, rules):
    return SubscriptionPropertiesAddRules(builder, rules)
def SubscriptionPropertiesStartRulesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRulesVector(builder, numElems):
    return SubscriptionPropertiesStartRulesVector(builder, numElems)
def SubscriptionPropertiesAddErrorInterval(builder, errorInterval): builder.PrependUint32Slot(4, errorInterval, 10000)
def AddErrorInterval(builder, errorInterval):
    return SubscriptionPropertiesAddErrorInterval(builder, errorInterval)
def SubscriptionPropertiesEnd(builder): return builder.EndObject()
def End(builder):
    return SubscriptionPropertiesEnd(builder)
import comm.datalayer.Property
try:
    from typing import List
except:
    pass

class SubscriptionPropertiesT(object):

    # SubscriptionPropertiesT
    def __init__(self):
        self.id = None  # type: str
        self.keepaliveInterval = 60000  # type: int
        self.publishInterval = 1000  # type: int
        self.rules = None  # type: List[comm.datalayer.Property.PropertyT]
        self.errorInterval = 10000  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        subscriptionProperties = SubscriptionProperties()
        subscriptionProperties.Init(buf, pos)
        return cls.InitFromObj(subscriptionProperties)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, subscriptionProperties):
        x = SubscriptionPropertiesT()
        x._UnPack(subscriptionProperties)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.keepaliveInterval == other.keepaliveInterval and \
            self.publishInterval == other.publishInterval and \
            self.rules == other.rules and \
            self.errorInterval == other.errorInterval

    # SubscriptionPropertiesT
    def _UnPack(self, subscriptionProperties):
        if subscriptionProperties is None:
            return
        self.id = subscriptionProperties.Id()
        self.keepaliveInterval = subscriptionProperties.KeepaliveInterval()
        self.publishInterval = subscriptionProperties.PublishInterval()
        if not subscriptionProperties.RulesIsNone():
            self.rules = []
            for i in range(subscriptionProperties.RulesLength()):
                if subscriptionProperties.Rules(i) is None:
                    self.rules.append(None)
                else:
                    property_ = comm.datalayer.Property.PropertyT.InitFromObj(subscriptionProperties.Rules(i))
                    self.rules.append(property_)
        self.errorInterval = subscriptionProperties.ErrorInterval()

    # SubscriptionPropertiesT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.rules is not None:
            ruleslist = []
            for i in range(len(self.rules)):
                ruleslist.append(self.rules[i].Pack(builder))
            SubscriptionPropertiesStartRulesVector(builder, len(self.rules))
            for i in reversed(range(len(self.rules))):
                builder.PrependUOffsetTRelative(ruleslist[i])
            rules = builder.EndVector()
        SubscriptionPropertiesStart(builder)
        if self.id is not None:
            SubscriptionPropertiesAddId(builder, id)
        SubscriptionPropertiesAddKeepaliveInterval(builder, self.keepaliveInterval)
        SubscriptionPropertiesAddPublishInterval(builder, self.publishInterval)
        if self.rules is not None:
            SubscriptionPropertiesAddRules(builder, rules)
        SubscriptionPropertiesAddErrorInterval(builder, self.errorInterval)
        subscriptionProperties = SubscriptionPropertiesEnd(builder)
        return subscriptionProperties
