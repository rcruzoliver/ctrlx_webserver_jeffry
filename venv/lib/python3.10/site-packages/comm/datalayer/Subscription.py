# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Subscription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Subscription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSubscription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Subscription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # properties of subscription
    # Subscription
    def Properties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.SubscriptionProperties import SubscriptionProperties
            obj = SubscriptionProperties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # subscribed nodes
    # Subscription
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Subscription
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Subscription
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def SubscriptionStart(builder): builder.StartObject(2)
def Start(builder):
    return SubscriptionStart(builder)
def SubscriptionAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def AddProperties(builder, properties):
    return SubscriptionAddProperties(builder, properties)
def SubscriptionAddNodes(builder, nodes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)
def AddNodes(builder, nodes):
    return SubscriptionAddNodes(builder, nodes)
def SubscriptionStartNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartNodesVector(builder, numElems):
    return SubscriptionStartNodesVector(builder, numElems)
def SubscriptionEnd(builder): return builder.EndObject()
def End(builder):
    return SubscriptionEnd(builder)
import comm.datalayer.SubscriptionProperties
try:
    from typing import List, Optional
except:
    pass

class SubscriptionT(object):

    # SubscriptionT
    def __init__(self):
        self.properties = None  # type: Optional[comm.datalayer.SubscriptionProperties.SubscriptionPropertiesT]
        self.nodes = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        subscription = Subscription()
        subscription.Init(buf, pos)
        return cls.InitFromObj(subscription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, subscription):
        x = SubscriptionT()
        x._UnPack(subscription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.properties == other.properties and \
            self.nodes == other.nodes

    # SubscriptionT
    def _UnPack(self, subscription):
        if subscription is None:
            return
        if subscription.Properties() is not None:
            self.properties = comm.datalayer.SubscriptionProperties.SubscriptionPropertiesT.InitFromObj(subscription.Properties())
        if not subscription.NodesIsNone():
            self.nodes = []
            for i in range(subscription.NodesLength()):
                self.nodes.append(subscription.Nodes(i))

    # SubscriptionT
    def Pack(self, builder):
        if self.properties is not None:
            properties = self.properties.Pack(builder)
        if self.nodes is not None:
            nodeslist = []
            for i in range(len(self.nodes)):
                nodeslist.append(builder.CreateString(self.nodes[i]))
            SubscriptionStartNodesVector(builder, len(self.nodes))
            for i in reversed(range(len(self.nodes))):
                builder.PrependUOffsetTRelative(nodeslist[i])
            nodes = builder.EndVector()
        SubscriptionStart(builder)
        if self.properties is not None:
            SubscriptionAddProperties(builder, properties)
        if self.nodes is not None:
            SubscriptionAddNodes(builder, nodes)
        subscription = SubscriptionEnd(builder)
        return subscription
