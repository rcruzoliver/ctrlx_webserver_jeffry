# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Reference(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Reference()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReference(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Reference
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # nodeid of type  "readType", "writeType", "createType", ...
    # Reference
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # full qualified address of target
    # Reference
    def TargetAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ReferenceStart(builder): builder.StartObject(2)
def Start(builder):
    return ReferenceStart(builder)
def ReferenceAddType(builder, type): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return ReferenceAddType(builder, type)
def ReferenceAddTargetAddress(builder, targetAddress): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(targetAddress), 0)
def AddTargetAddress(builder, targetAddress):
    return ReferenceAddTargetAddress(builder, targetAddress)
def ReferenceEnd(builder): return builder.EndObject()
def End(builder):
    return ReferenceEnd(builder)

class ReferenceT(object):

    # ReferenceT
    def __init__(self):
        self.type = None  # type: str
        self.targetAddress = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        reference = Reference()
        reference.Init(buf, pos)
        return cls.InitFromObj(reference)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, reference):
        x = ReferenceT()
        x._UnPack(reference)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type and \
            self.targetAddress == other.targetAddress

    # ReferenceT
    def _UnPack(self, reference):
        if reference is None:
            return
        self.type = reference.Type()
        self.targetAddress = reference.TargetAddress()

    # ReferenceT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.targetAddress is not None:
            targetAddress = builder.CreateString(self.targetAddress)
        ReferenceStart(builder)
        if self.type is not None:
            ReferenceAddType(builder, type)
        if self.targetAddress is not None:
            ReferenceAddTargetAddress(builder, targetAddress)
        reference = ReferenceEnd(builder)
        return reference
