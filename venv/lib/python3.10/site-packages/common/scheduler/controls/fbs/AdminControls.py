# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Special extensions to modify Scheduler and system behavior e.g. activation of DEBUG mode
class AdminControls(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AdminControls()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAdminControls(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AdminControls
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AdminControls
    def ControlType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Special extensions to modify Scheduler and system behavior e.g. activation of DEBUG mode
    # AdminControls
    def Control(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def AdminControlsStart(builder): builder.StartObject(2)
def Start(builder):
    return AdminControlsStart(builder)
def AdminControlsAddControlType(builder, controlType): builder.PrependUint8Slot(0, controlType, 0)
def AddControlType(builder, controlType):
    return AdminControlsAddControlType(builder, controlType)
def AdminControlsAddControl(builder, control): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(control), 0)
def AddControl(builder, control):
    return AdminControlsAddControl(builder, control)
def AdminControlsEnd(builder): return builder.EndObject()
def End(builder):
    return AdminControlsEnd(builder)
import common.scheduler.controls.fbs.Controls
import common.scheduler.controls.fbs.Debug
try:
    from typing import Union
except:
    pass

class AdminControlsT(object):

    # AdminControlsT
    def __init__(self):
        self.controlType = 0  # type: int
        self.control = None  # type: Union[None, common.scheduler.controls.fbs.Debug.DebugT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        adminControls = AdminControls()
        adminControls.Init(buf, pos)
        return cls.InitFromObj(adminControls)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, adminControls):
        x = AdminControlsT()
        x._UnPack(adminControls)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.controlType == other.controlType and \
            self.control == other.control

    # AdminControlsT
    def _UnPack(self, adminControls):
        if adminControls is None:
            return
        self.controlType = adminControls.ControlType()
        self.control = common.scheduler.controls.fbs.Controls.ControlsCreator(self.controlType, adminControls.Control())

    # AdminControlsT
    def Pack(self, builder):
        if self.control is not None:
            control = self.control.Pack(builder)
        AdminControlsStart(builder)
        AdminControlsAddControlType(builder, self.controlType)
        if self.control is not None:
            AdminControlsAddControl(builder, control)
        adminControls = AdminControlsEnd(builder)
        return adminControls
