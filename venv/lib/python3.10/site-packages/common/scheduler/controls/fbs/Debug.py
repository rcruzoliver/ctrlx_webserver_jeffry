# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Machine ID to use the DEBUG configuration only on the intended machine
class Debug(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Debug()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDebug(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Debug
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Machine ID to use the DEBUG configuration only on the intended machine
    # Debug
    def Machine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DebugStart(builder): builder.StartObject(1)
def Start(builder):
    return DebugStart(builder)
def DebugAddMachine(builder, machine): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(machine), 0)
def AddMachine(builder, machine):
    return DebugAddMachine(builder, machine)
def DebugEnd(builder): return builder.EndObject()
def End(builder):
    return DebugEnd(builder)

class DebugT(object):

    # DebugT
    def __init__(self):
        self.machine = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        debug = Debug()
        debug.Init(buf, pos)
        return cls.InitFromObj(debug)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, debug):
        x = DebugT()
        x._UnPack(debug)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.machine == other.machine

    # DebugT
    def _UnPack(self, debug):
        if debug is None:
            return
        self.machine = debug.Machine()

    # DebugT
    def Pack(self, builder):
        if self.machine is not None:
            machine = builder.CreateString(self.machine)
        DebugStart(builder)
        if self.machine is not None:
            DebugAddMachine(builder, machine)
        debug = DebugEnd(builder)
        return debug
