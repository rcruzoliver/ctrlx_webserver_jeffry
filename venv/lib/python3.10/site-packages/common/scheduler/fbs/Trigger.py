# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Type selector of trigger sources of Scheduler
class Trigger(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Trigger()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrigger(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Trigger
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type selector of trigger sources of Scheduler
    # Trigger
    def Trigger(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def TriggerStart(builder): builder.StartObject(1)
def Start(builder):
    return TriggerStart(builder)
def TriggerAddTrigger(builder, trigger): builder.PrependInt8Slot(0, trigger, 1)
def AddTrigger(builder, trigger):
    return TriggerAddTrigger(builder, trigger)
def TriggerEnd(builder): return builder.EndObject()
def End(builder):
    return TriggerEnd(builder)

class TriggerT(object):

    # TriggerT
    def __init__(self):
        self.trigger = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trigger = Trigger()
        trigger.Init(buf, pos)
        return cls.InitFromObj(trigger)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trigger):
        x = TriggerT()
        x._UnPack(trigger)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.trigger == other.trigger

    # TriggerT
    def _UnPack(self, trigger):
        if trigger is None:
            return
        self.trigger = trigger.Trigger()

    # TriggerT
    def Pack(self, builder):
        TriggerStart(builder)
        TriggerAddTrigger(builder, self.trigger)
        trigger = TriggerEnd(builder)
        return trigger
