# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Properties of a task
class Task(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Task()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTask(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Task
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the task [unique]
    #   Allowed characters:
    #     Any alphanumeric character, beginning with a letter and a maximum length of 15 characters [a-zA-Z][a-zA-Z0-9]{1,15}
    # Task
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Priority of the task
    #   Priority ranges:
    #       0 ..  10  : reserved for the system
    #      11 ..  99  : available for real-time user tasks
    #     100 .. 139  : available for non real-time user tasks
    #   Priority agreements:
    #      10         : reserved for Scheduler tick task 'schedMain'
    #      11         : highest prior real-time task, use of the policy FIFO policy
    #      23         : high prior real-time task, use of the policy FIFO policy
    #      29         : mid prior real-time task, use of the policy FIFO policy
    #      37         : low prior real-time task, use of the policy FIFO policy
    #      99         : lowest prior real-time task, use of the policy round-robin policy
    #     100         : highest prior non real-time task, use of the nice value of '-20'
    #     120         : common used non real-time task, use of the nice value of '0'
    #     139         : lowest prior non real-time task, use of the nice value of '19'
    # Task
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 120

    # CPU core affinity of the task, defining on which CPU core it is executed, available cores see 'scheduler/admin/info/cpu-cores'
    # Task
    def Affinity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Stack size of the task in [byte]
    # Task
    def Stacksize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 131072

    # Execution event of the task ["cyclic"]
    # Task
    def Event(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cycle time of the task in [Âµs]
    # Task
    def Cycletime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 20000

def TaskStart(builder): builder.StartObject(6)
def Start(builder):
    return TaskStart(builder)
def TaskAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return TaskAddName(builder, name)
def TaskAddPriority(builder, priority): builder.PrependUint32Slot(1, priority, 120)
def AddPriority(builder, priority):
    return TaskAddPriority(builder, priority)
def TaskAddAffinity(builder, affinity): builder.PrependUint32Slot(2, affinity, 0)
def AddAffinity(builder, affinity):
    return TaskAddAffinity(builder, affinity)
def TaskAddStacksize(builder, stacksize): builder.PrependUint32Slot(3, stacksize, 131072)
def AddStacksize(builder, stacksize):
    return TaskAddStacksize(builder, stacksize)
def TaskAddEvent(builder, event): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(event), 0)
def AddEvent(builder, event):
    return TaskAddEvent(builder, event)
def TaskAddCycletime(builder, cycletime): builder.PrependUint32Slot(5, cycletime, 20000)
def AddCycletime(builder, cycletime):
    return TaskAddCycletime(builder, cycletime)
def TaskEnd(builder): return builder.EndObject()
def End(builder):
    return TaskEnd(builder)

class TaskT(object):

    # TaskT
    def __init__(self):
        self.name = None  # type: str
        self.priority = 120  # type: int
        self.affinity = 0  # type: int
        self.stacksize = 131072  # type: int
        self.event = None  # type: str
        self.cycletime = 20000  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        task = Task()
        task.Init(buf, pos)
        return cls.InitFromObj(task)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, task):
        x = TaskT()
        x._UnPack(task)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.priority == other.priority and \
            self.affinity == other.affinity and \
            self.stacksize == other.stacksize and \
            self.event == other.event and \
            self.cycletime == other.cycletime

    # TaskT
    def _UnPack(self, task):
        if task is None:
            return
        self.name = task.Name()
        self.priority = task.Priority()
        self.affinity = task.Affinity()
        self.stacksize = task.Stacksize()
        self.event = task.Event()
        self.cycletime = task.Cycletime()

    # TaskT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.event is not None:
            event = builder.CreateString(self.event)
        TaskStart(builder)
        if self.name is not None:
            TaskAddName(builder, name)
        TaskAddPriority(builder, self.priority)
        TaskAddAffinity(builder, self.affinity)
        TaskAddStacksize(builder, self.stacksize)
        if self.event is not None:
            TaskAddEvent(builder, event)
        TaskAddCycletime(builder, self.cycletime)
        task = TaskEnd(builder)
        return task
