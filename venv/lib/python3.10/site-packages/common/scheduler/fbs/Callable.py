# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Callable, executes a job defined by regarding app
class Callable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Callable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCallable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Callable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of callable factory provided by an installed app
    # Callable
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Run index to specify the call sequence, alternatively to the use of synchronization points
    # Notes:
    #   - The run index ranges from 1 (high) to maximum of data type (low)
    #   - Using of run index cause disabling of synchronization points of this callable
    #   - Using no synchronization points and run index value '0' cause that this callable run together with other, same configured callables, unordered at the end of the task
    # Callable
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # List of arguments to create the callable, for further information see application description of the callable factory
    # Callable
    def Arguments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Callable
    def ArgumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Callable
    def ArgumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Callable ID, used as reference, which is assigned automatically by the Scheduler [0-9]+
    # Callable
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alias of callable, human readable replacement of callable ID
    # The alias have match to the Data Layer compliance guide lines meaning any alphanumeric character are allowed [a-zA-Z_][a-zA-Z0-9-._]+
    # Callable
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Synchronization points to specify the call sequence, alternatively to the use of run index
    # Notes:
    #   - Using of run index cause disabling of synchronization points of this callable
    #   - Using no synchronization points and run index value '0' cause that this callable run together with other, same configured callables, unordered at the end of the task
    # Callable
    def Sync(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs.SyncPoints import SyncPoints
            obj = SyncPoints()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Requirement of the callable that a watchdog is present
    # Callable
    def Watchdog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 3

def CallableStart(builder): builder.StartObject(7)
def Start(builder):
    return CallableStart(builder)
def CallableAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return CallableAddName(builder, name)
def CallableAddIndex(builder, index): builder.PrependUint32Slot(1, index, 0)
def AddIndex(builder, index):
    return CallableAddIndex(builder, index)
def CallableAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def AddArguments(builder, arguments):
    return CallableAddArguments(builder, arguments)
def CallableStartArgumentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArgumentsVector(builder, numElems):
    return CallableStartArgumentsVector(builder, numElems)
def CallableAddId(builder, id): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return CallableAddId(builder, id)
def CallableAddAlias(builder, alias): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)
def AddAlias(builder, alias):
    return CallableAddAlias(builder, alias)
def CallableAddSync(builder, sync): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sync), 0)
def AddSync(builder, sync):
    return CallableAddSync(builder, sync)
def CallableAddWatchdog(builder, watchdog): builder.PrependInt8Slot(6, watchdog, 3)
def AddWatchdog(builder, watchdog):
    return CallableAddWatchdog(builder, watchdog)
def CallableEnd(builder): return builder.EndObject()
def End(builder):
    return CallableEnd(builder)
import common.scheduler.fbs.SyncPoints
try:
    from typing import List, Optional
except:
    pass

class CallableT(object):

    # CallableT
    def __init__(self):
        self.name = None  # type: str
        self.index = 0  # type: int
        self.arguments = None  # type: List[str]
        self.id = None  # type: str
        self.alias = None  # type: str
        self.sync = None  # type: Optional[common.scheduler.fbs.SyncPoints.SyncPointsT]
        self.watchdog = 3  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        callable = Callable()
        callable.Init(buf, pos)
        return cls.InitFromObj(callable)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, callable):
        x = CallableT()
        x._UnPack(callable)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.index == other.index and \
            self.arguments == other.arguments and \
            self.id == other.id and \
            self.alias == other.alias and \
            self.sync == other.sync and \
            self.watchdog == other.watchdog

    # CallableT
    def _UnPack(self, callable):
        if callable is None:
            return
        self.name = callable.Name()
        self.index = callable.Index()
        if not callable.ArgumentsIsNone():
            self.arguments = []
            for i in range(callable.ArgumentsLength()):
                self.arguments.append(callable.Arguments(i))
        self.id = callable.Id()
        self.alias = callable.Alias()
        if callable.Sync() is not None:
            self.sync = common.scheduler.fbs.SyncPoints.SyncPointsT.InitFromObj(callable.Sync())
        self.watchdog = callable.Watchdog()

    # CallableT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.arguments is not None:
            argumentslist = []
            for i in range(len(self.arguments)):
                argumentslist.append(builder.CreateString(self.arguments[i]))
            CallableStartArgumentsVector(builder, len(self.arguments))
            for i in reversed(range(len(self.arguments))):
                builder.PrependUOffsetTRelative(argumentslist[i])
            arguments = builder.EndVector()
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.sync is not None:
            sync = self.sync.Pack(builder)
        CallableStart(builder)
        if self.name is not None:
            CallableAddName(builder, name)
        CallableAddIndex(builder, self.index)
        if self.arguments is not None:
            CallableAddArguments(builder, arguments)
        if self.id is not None:
            CallableAddId(builder, id)
        if self.alias is not None:
            CallableAddAlias(builder, alias)
        if self.sync is not None:
            CallableAddSync(builder, sync)
        CallableAddWatchdog(builder, self.watchdog)
        callable = CallableEnd(builder)
        return callable
