# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Information about the current cycle of the task (related to real-time usage)
class DataRt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataRt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataRt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DataRt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Start time of the task in [Âµs]
    # DataRt
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Count of execution of the task
    # DataRt
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def DataRtStart(builder): builder.StartObject(2)
def Start(builder):
    return DataRtStart(builder)
def DataRtAddStartTime(builder, startTime): builder.PrependUint64Slot(0, startTime, 0)
def AddStartTime(builder, startTime):
    return DataRtAddStartTime(builder, startTime)
def DataRtAddCounter(builder, counter): builder.PrependUint64Slot(1, counter, 0)
def AddCounter(builder, counter):
    return DataRtAddCounter(builder, counter)
def DataRtEnd(builder): return builder.EndObject()
def End(builder):
    return DataRtEnd(builder)

class DataRtT(object):

    # DataRtT
    def __init__(self):
        self.startTime = 0  # type: int
        self.counter = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataRt = DataRt()
        dataRt.Init(buf, pos)
        return cls.InitFromObj(dataRt)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataRt):
        x = DataRtT()
        x._UnPack(dataRt)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.startTime == other.startTime and \
            self.counter == other.counter

    # DataRtT
    def _UnPack(self, dataRt):
        if dataRt is None:
            return
        self.startTime = dataRt.StartTime()
        self.counter = dataRt.Counter()

    # DataRtT
    def Pack(self, builder):
        DataRtStart(builder)
        DataRtAddStartTime(builder, self.startTime)
        DataRtAddCounter(builder, self.counter)
        dataRt = DataRtEnd(builder)
        return dataRt
