# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CpuInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CpuInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCpuInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CpuInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CpuInfo
    def CpuCoresTotal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresTotalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresTotalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresTotalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # CpuInfo
    def CpuCoresActive(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresActiveAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresActiveLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresActiveIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CpuInfo
    def CpuCoresRealtime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresRealtimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresRealtimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresRealtimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CpuInfo
    def CpuCoresNonRealtime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CpuInfo
    def CpuCoresNonRealtimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CpuInfo
    def CpuCoresNonRealtimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CpuInfo
    def CpuCoresNonRealtimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CpuInfo
    def CpuCoreRealtimeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreRealtimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreRealtimeDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreNonRealtimeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreNonRealtimeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def CpuCoreNonRealtimeDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # CpuInfo
    def VariationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CpuInfo
    def CpuCoreHwWdg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CpuInfo
    def CpuCorePtpTimer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CpuInfo
    def CpuCoreScheduler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CpuInfo
    def CpuCoreAutomation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CpuInfoStart(builder): builder.StartObject(15)
def Start(builder):
    return CpuInfoStart(builder)
def CpuInfoAddCpuCoresTotal(builder, cpuCoresTotal): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresTotal), 0)
def AddCpuCoresTotal(builder, cpuCoresTotal):
    return CpuInfoAddCpuCoresTotal(builder, cpuCoresTotal)
def CpuInfoStartCpuCoresTotalVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCpuCoresTotalVector(builder, numElems):
    return CpuInfoStartCpuCoresTotalVector(builder, numElems)
def CpuInfoAddCpuCoresActive(builder, cpuCoresActive): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresActive), 0)
def AddCpuCoresActive(builder, cpuCoresActive):
    return CpuInfoAddCpuCoresActive(builder, cpuCoresActive)
def CpuInfoStartCpuCoresActiveVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCpuCoresActiveVector(builder, numElems):
    return CpuInfoStartCpuCoresActiveVector(builder, numElems)
def CpuInfoAddCpuCoresRealtime(builder, cpuCoresRealtime): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresRealtime), 0)
def AddCpuCoresRealtime(builder, cpuCoresRealtime):
    return CpuInfoAddCpuCoresRealtime(builder, cpuCoresRealtime)
def CpuInfoStartCpuCoresRealtimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCpuCoresRealtimeVector(builder, numElems):
    return CpuInfoStartCpuCoresRealtimeVector(builder, numElems)
def CpuInfoAddCpuCoresNonRealtime(builder, cpuCoresNonRealtime): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cpuCoresNonRealtime), 0)
def AddCpuCoresNonRealtime(builder, cpuCoresNonRealtime):
    return CpuInfoAddCpuCoresNonRealtime(builder, cpuCoresNonRealtime)
def CpuInfoStartCpuCoresNonRealtimeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCpuCoresNonRealtimeVector(builder, numElems):
    return CpuInfoStartCpuCoresNonRealtimeVector(builder, numElems)
def CpuInfoAddCpuCoreRealtimeMax(builder, cpuCoreRealtimeMax): builder.PrependInt32Slot(4, cpuCoreRealtimeMax, -1)
def AddCpuCoreRealtimeMax(builder, cpuCoreRealtimeMax):
    return CpuInfoAddCpuCoreRealtimeMax(builder, cpuCoreRealtimeMax)
def CpuInfoAddCpuCoreRealtimeMin(builder, cpuCoreRealtimeMin): builder.PrependInt32Slot(5, cpuCoreRealtimeMin, -1)
def AddCpuCoreRealtimeMin(builder, cpuCoreRealtimeMin):
    return CpuInfoAddCpuCoreRealtimeMin(builder, cpuCoreRealtimeMin)
def CpuInfoAddCpuCoreRealtimeDefault(builder, cpuCoreRealtimeDefault): builder.PrependInt32Slot(6, cpuCoreRealtimeDefault, -1)
def AddCpuCoreRealtimeDefault(builder, cpuCoreRealtimeDefault):
    return CpuInfoAddCpuCoreRealtimeDefault(builder, cpuCoreRealtimeDefault)
def CpuInfoAddCpuCoreNonRealtimeMax(builder, cpuCoreNonRealtimeMax): builder.PrependInt32Slot(7, cpuCoreNonRealtimeMax, -1)
def AddCpuCoreNonRealtimeMax(builder, cpuCoreNonRealtimeMax):
    return CpuInfoAddCpuCoreNonRealtimeMax(builder, cpuCoreNonRealtimeMax)
def CpuInfoAddCpuCoreNonRealtimeMin(builder, cpuCoreNonRealtimeMin): builder.PrependInt32Slot(8, cpuCoreNonRealtimeMin, -1)
def AddCpuCoreNonRealtimeMin(builder, cpuCoreNonRealtimeMin):
    return CpuInfoAddCpuCoreNonRealtimeMin(builder, cpuCoreNonRealtimeMin)
def CpuInfoAddCpuCoreNonRealtimeDefault(builder, cpuCoreNonRealtimeDefault): builder.PrependInt32Slot(9, cpuCoreNonRealtimeDefault, -1)
def AddCpuCoreNonRealtimeDefault(builder, cpuCoreNonRealtimeDefault):
    return CpuInfoAddCpuCoreNonRealtimeDefault(builder, cpuCoreNonRealtimeDefault)
def CpuInfoAddVariationId(builder, variationId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(variationId), 0)
def AddVariationId(builder, variationId):
    return CpuInfoAddVariationId(builder, variationId)
def CpuInfoAddCpuCoreHwWdg(builder, cpuCoreHwWdg): builder.PrependUint32Slot(11, cpuCoreHwWdg, 0)
def AddCpuCoreHwWdg(builder, cpuCoreHwWdg):
    return CpuInfoAddCpuCoreHwWdg(builder, cpuCoreHwWdg)
def CpuInfoAddCpuCorePtpTimer(builder, cpuCorePtpTimer): builder.PrependUint32Slot(12, cpuCorePtpTimer, 0)
def AddCpuCorePtpTimer(builder, cpuCorePtpTimer):
    return CpuInfoAddCpuCorePtpTimer(builder, cpuCorePtpTimer)
def CpuInfoAddCpuCoreScheduler(builder, cpuCoreScheduler): builder.PrependUint32Slot(13, cpuCoreScheduler, 0)
def AddCpuCoreScheduler(builder, cpuCoreScheduler):
    return CpuInfoAddCpuCoreScheduler(builder, cpuCoreScheduler)
def CpuInfoAddCpuCoreAutomation(builder, cpuCoreAutomation): builder.PrependUint32Slot(14, cpuCoreAutomation, 0)
def AddCpuCoreAutomation(builder, cpuCoreAutomation):
    return CpuInfoAddCpuCoreAutomation(builder, cpuCoreAutomation)
def CpuInfoEnd(builder): return builder.EndObject()
def End(builder):
    return CpuInfoEnd(builder)
try:
    from typing import List
except:
    pass

class CpuInfoT(object):

    # CpuInfoT
    def __init__(self):
        self.cpuCoresTotal = None  # type: List[int]
        self.cpuCoresActive = None  # type: List[int]
        self.cpuCoresRealtime = None  # type: List[int]
        self.cpuCoresNonRealtime = None  # type: List[int]
        self.cpuCoreRealtimeMax = -1  # type: int
        self.cpuCoreRealtimeMin = -1  # type: int
        self.cpuCoreRealtimeDefault = -1  # type: int
        self.cpuCoreNonRealtimeMax = -1  # type: int
        self.cpuCoreNonRealtimeMin = -1  # type: int
        self.cpuCoreNonRealtimeDefault = -1  # type: int
        self.variationId = None  # type: str
        self.cpuCoreHwWdg = 0  # type: int
        self.cpuCorePtpTimer = 0  # type: int
        self.cpuCoreScheduler = 0  # type: int
        self.cpuCoreAutomation = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cpuInfo = CpuInfo()
        cpuInfo.Init(buf, pos)
        return cls.InitFromObj(cpuInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cpuInfo):
        x = CpuInfoT()
        x._UnPack(cpuInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cpuCoresTotal == other.cpuCoresTotal and \
            self.cpuCoresActive == other.cpuCoresActive and \
            self.cpuCoresRealtime == other.cpuCoresRealtime and \
            self.cpuCoresNonRealtime == other.cpuCoresNonRealtime and \
            self.cpuCoreRealtimeMax == other.cpuCoreRealtimeMax and \
            self.cpuCoreRealtimeMin == other.cpuCoreRealtimeMin and \
            self.cpuCoreRealtimeDefault == other.cpuCoreRealtimeDefault and \
            self.cpuCoreNonRealtimeMax == other.cpuCoreNonRealtimeMax and \
            self.cpuCoreNonRealtimeMin == other.cpuCoreNonRealtimeMin and \
            self.cpuCoreNonRealtimeDefault == other.cpuCoreNonRealtimeDefault and \
            self.variationId == other.variationId and \
            self.cpuCoreHwWdg == other.cpuCoreHwWdg and \
            self.cpuCorePtpTimer == other.cpuCorePtpTimer and \
            self.cpuCoreScheduler == other.cpuCoreScheduler and \
            self.cpuCoreAutomation == other.cpuCoreAutomation

    # CpuInfoT
    def _UnPack(self, cpuInfo):
        if cpuInfo is None:
            return
        if not cpuInfo.CpuCoresTotalIsNone():
            if np is None:
                self.cpuCoresTotal = []
                for i in range(cpuInfo.CpuCoresTotalLength()):
                    self.cpuCoresTotal.append(cpuInfo.CpuCoresTotal(i))
            else:
                self.cpuCoresTotal = cpuInfo.CpuCoresTotalAsNumpy()
        if not cpuInfo.CpuCoresActiveIsNone():
            if np is None:
                self.cpuCoresActive = []
                for i in range(cpuInfo.CpuCoresActiveLength()):
                    self.cpuCoresActive.append(cpuInfo.CpuCoresActive(i))
            else:
                self.cpuCoresActive = cpuInfo.CpuCoresActiveAsNumpy()
        if not cpuInfo.CpuCoresRealtimeIsNone():
            if np is None:
                self.cpuCoresRealtime = []
                for i in range(cpuInfo.CpuCoresRealtimeLength()):
                    self.cpuCoresRealtime.append(cpuInfo.CpuCoresRealtime(i))
            else:
                self.cpuCoresRealtime = cpuInfo.CpuCoresRealtimeAsNumpy()
        if not cpuInfo.CpuCoresNonRealtimeIsNone():
            if np is None:
                self.cpuCoresNonRealtime = []
                for i in range(cpuInfo.CpuCoresNonRealtimeLength()):
                    self.cpuCoresNonRealtime.append(cpuInfo.CpuCoresNonRealtime(i))
            else:
                self.cpuCoresNonRealtime = cpuInfo.CpuCoresNonRealtimeAsNumpy()
        self.cpuCoreRealtimeMax = cpuInfo.CpuCoreRealtimeMax()
        self.cpuCoreRealtimeMin = cpuInfo.CpuCoreRealtimeMin()
        self.cpuCoreRealtimeDefault = cpuInfo.CpuCoreRealtimeDefault()
        self.cpuCoreNonRealtimeMax = cpuInfo.CpuCoreNonRealtimeMax()
        self.cpuCoreNonRealtimeMin = cpuInfo.CpuCoreNonRealtimeMin()
        self.cpuCoreNonRealtimeDefault = cpuInfo.CpuCoreNonRealtimeDefault()
        self.variationId = cpuInfo.VariationId()
        self.cpuCoreHwWdg = cpuInfo.CpuCoreHwWdg()
        self.cpuCorePtpTimer = cpuInfo.CpuCorePtpTimer()
        self.cpuCoreScheduler = cpuInfo.CpuCoreScheduler()
        self.cpuCoreAutomation = cpuInfo.CpuCoreAutomation()

    # CpuInfoT
    def Pack(self, builder):
        if self.cpuCoresTotal is not None:
            if np is not None and type(self.cpuCoresTotal) is np.ndarray:
                cpuCoresTotal = builder.CreateNumpyVector(self.cpuCoresTotal)
            else:
                CpuInfoStartCpuCoresTotalVector(builder, len(self.cpuCoresTotal))
                for i in reversed(range(len(self.cpuCoresTotal))):
                    builder.PrependUint32(self.cpuCoresTotal[i])
                cpuCoresTotal = builder.EndVector()
        if self.cpuCoresActive is not None:
            if np is not None and type(self.cpuCoresActive) is np.ndarray:
                cpuCoresActive = builder.CreateNumpyVector(self.cpuCoresActive)
            else:
                CpuInfoStartCpuCoresActiveVector(builder, len(self.cpuCoresActive))
                for i in reversed(range(len(self.cpuCoresActive))):
                    builder.PrependUint32(self.cpuCoresActive[i])
                cpuCoresActive = builder.EndVector()
        if self.cpuCoresRealtime is not None:
            if np is not None and type(self.cpuCoresRealtime) is np.ndarray:
                cpuCoresRealtime = builder.CreateNumpyVector(self.cpuCoresRealtime)
            else:
                CpuInfoStartCpuCoresRealtimeVector(builder, len(self.cpuCoresRealtime))
                for i in reversed(range(len(self.cpuCoresRealtime))):
                    builder.PrependUint32(self.cpuCoresRealtime[i])
                cpuCoresRealtime = builder.EndVector()
        if self.cpuCoresNonRealtime is not None:
            if np is not None and type(self.cpuCoresNonRealtime) is np.ndarray:
                cpuCoresNonRealtime = builder.CreateNumpyVector(self.cpuCoresNonRealtime)
            else:
                CpuInfoStartCpuCoresNonRealtimeVector(builder, len(self.cpuCoresNonRealtime))
                for i in reversed(range(len(self.cpuCoresNonRealtime))):
                    builder.PrependUint32(self.cpuCoresNonRealtime[i])
                cpuCoresNonRealtime = builder.EndVector()
        if self.variationId is not None:
            variationId = builder.CreateString(self.variationId)
        CpuInfoStart(builder)
        if self.cpuCoresTotal is not None:
            CpuInfoAddCpuCoresTotal(builder, cpuCoresTotal)
        if self.cpuCoresActive is not None:
            CpuInfoAddCpuCoresActive(builder, cpuCoresActive)
        if self.cpuCoresRealtime is not None:
            CpuInfoAddCpuCoresRealtime(builder, cpuCoresRealtime)
        if self.cpuCoresNonRealtime is not None:
            CpuInfoAddCpuCoresNonRealtime(builder, cpuCoresNonRealtime)
        CpuInfoAddCpuCoreRealtimeMax(builder, self.cpuCoreRealtimeMax)
        CpuInfoAddCpuCoreRealtimeMin(builder, self.cpuCoreRealtimeMin)
        CpuInfoAddCpuCoreRealtimeDefault(builder, self.cpuCoreRealtimeDefault)
        CpuInfoAddCpuCoreNonRealtimeMax(builder, self.cpuCoreNonRealtimeMax)
        CpuInfoAddCpuCoreNonRealtimeMin(builder, self.cpuCoreNonRealtimeMin)
        CpuInfoAddCpuCoreNonRealtimeDefault(builder, self.cpuCoreNonRealtimeDefault)
        if self.variationId is not None:
            CpuInfoAddVariationId(builder, variationId)
        CpuInfoAddCpuCoreHwWdg(builder, self.cpuCoreHwWdg)
        CpuInfoAddCpuCorePtpTimer(builder, self.cpuCorePtpTimer)
        CpuInfoAddCpuCoreScheduler(builder, self.cpuCoreScheduler)
        CpuInfoAddCpuCoreAutomation(builder, self.cpuCoreAutomation)
        cpuInfo = CpuInfoEnd(builder)
        return cpuInfo
