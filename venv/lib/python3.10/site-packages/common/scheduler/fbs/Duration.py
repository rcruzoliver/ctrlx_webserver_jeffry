# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Duration measurement of execution of a task
class Duration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Duration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDuration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Duration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Minimum value of duration measurement in [µs]
    # Duration
    def Minimum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Maximum value of duration measurement in [µs]
    # Duration
    def Maximum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Average of values of duration measurement in [µs]
    # Duration
    def Average(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Indication whether the duration measurement of execution is active (true) or not (false)
    # Duration
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DurationStart(builder): builder.StartObject(4)
def Start(builder):
    return DurationStart(builder)
def DurationAddMinimum(builder, minimum): builder.PrependUint64Slot(0, minimum, 0)
def AddMinimum(builder, minimum):
    return DurationAddMinimum(builder, minimum)
def DurationAddMaximum(builder, maximum): builder.PrependUint64Slot(1, maximum, 0)
def AddMaximum(builder, maximum):
    return DurationAddMaximum(builder, maximum)
def DurationAddAverage(builder, average): builder.PrependUint64Slot(2, average, 0)
def AddAverage(builder, average):
    return DurationAddAverage(builder, average)
def DurationAddActive(builder, active): builder.PrependBoolSlot(3, active, 0)
def AddActive(builder, active):
    return DurationAddActive(builder, active)
def DurationEnd(builder): return builder.EndObject()
def End(builder):
    return DurationEnd(builder)

class DurationT(object):

    # DurationT
    def __init__(self):
        self.minimum = 0  # type: int
        self.maximum = 0  # type: int
        self.average = 0  # type: int
        self.active = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        duration = Duration()
        duration.Init(buf, pos)
        return cls.InitFromObj(duration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, duration):
        x = DurationT()
        x._UnPack(duration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.minimum == other.minimum and \
            self.maximum == other.maximum and \
            self.average == other.average and \
            self.active == other.active

    # DurationT
    def _UnPack(self, duration):
        if duration is None:
            return
        self.minimum = duration.Minimum()
        self.maximum = duration.Maximum()
        self.average = duration.Average()
        self.active = duration.Active()

    # DurationT
    def Pack(self, builder):
        DurationStart(builder)
        DurationAddMinimum(builder, self.minimum)
        DurationAddMaximum(builder, self.maximum)
        DurationAddAverage(builder, self.average)
        DurationAddActive(builder, self.active)
        duration = DurationEnd(builder)
        return duration
