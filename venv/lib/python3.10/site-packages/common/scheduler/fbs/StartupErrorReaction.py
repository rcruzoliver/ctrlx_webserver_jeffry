# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Error reaction in case of not all configured components are available on startup
class StartupErrorReaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StartupErrorReaction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStartupErrorReaction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StartupErrorReaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Error reaction in case of not all configured components are available on startup
    # StartupErrorReaction
    def ErrorReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def StartupErrorReactionStart(builder): builder.StartObject(1)
def Start(builder):
    return StartupErrorReactionStart(builder)
def StartupErrorReactionAddErrorReaction(builder, errorReaction): builder.PrependInt8Slot(0, errorReaction, 0)
def AddErrorReaction(builder, errorReaction):
    return StartupErrorReactionAddErrorReaction(builder, errorReaction)
def StartupErrorReactionEnd(builder): return builder.EndObject()
def End(builder):
    return StartupErrorReactionEnd(builder)

class StartupErrorReactionT(object):

    # StartupErrorReactionT
    def __init__(self):
        self.errorReaction = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        startupErrorReaction = StartupErrorReaction()
        startupErrorReaction.Init(buf, pos)
        return cls.InitFromObj(startupErrorReaction)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, startupErrorReaction):
        x = StartupErrorReactionT()
        x._UnPack(startupErrorReaction)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.errorReaction == other.errorReaction

    # StartupErrorReactionT
    def _UnPack(self, startupErrorReaction):
        if startupErrorReaction is None:
            return
        self.errorReaction = startupErrorReaction.ErrorReaction()

    # StartupErrorReactionT
    def Pack(self, builder):
        StartupErrorReactionStart(builder)
        StartupErrorReactionAddErrorReaction(builder, self.errorReaction)
        startupErrorReaction = StartupErrorReactionEnd(builder)
        return startupErrorReaction
