# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Callable configurations of a callable factory
class CallableConfigurations(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CallableConfigurations()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCallableConfigurations(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CallableConfigurations
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Callable configurations of a callable factory
    # CallableConfigurations
    def Configurations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.scheduler.fbs.CallableConfiguration import CallableConfiguration
            obj = CallableConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CallableConfigurations
    def ConfigurationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CallableConfigurations
    def ConfigurationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def CallableConfigurationsStart(builder): builder.StartObject(1)
def Start(builder):
    return CallableConfigurationsStart(builder)
def CallableConfigurationsAddConfigurations(builder, configurations): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(configurations), 0)
def AddConfigurations(builder, configurations):
    return CallableConfigurationsAddConfigurations(builder, configurations)
def CallableConfigurationsStartConfigurationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartConfigurationsVector(builder, numElems):
    return CallableConfigurationsStartConfigurationsVector(builder, numElems)
def CallableConfigurationsEnd(builder): return builder.EndObject()
def End(builder):
    return CallableConfigurationsEnd(builder)
import common.scheduler.fbs.CallableConfiguration
try:
    from typing import List
except:
    pass

class CallableConfigurationsT(object):

    # CallableConfigurationsT
    def __init__(self):
        self.configurations = None  # type: List[common.scheduler.fbs.CallableConfiguration.CallableConfigurationT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        callableConfigurations = CallableConfigurations()
        callableConfigurations.Init(buf, pos)
        return cls.InitFromObj(callableConfigurations)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, callableConfigurations):
        x = CallableConfigurationsT()
        x._UnPack(callableConfigurations)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.configurations == other.configurations

    # CallableConfigurationsT
    def _UnPack(self, callableConfigurations):
        if callableConfigurations is None:
            return
        if not callableConfigurations.ConfigurationsIsNone():
            self.configurations = []
            for i in range(callableConfigurations.ConfigurationsLength()):
                if callableConfigurations.Configurations(i) is None:
                    self.configurations.append(None)
                else:
                    callableConfiguration_ = common.scheduler.fbs.CallableConfiguration.CallableConfigurationT.InitFromObj(callableConfigurations.Configurations(i))
                    self.configurations.append(callableConfiguration_)

    # CallableConfigurationsT
    def Pack(self, builder):
        if self.configurations is not None:
            configurationslist = []
            for i in range(len(self.configurations)):
                configurationslist.append(self.configurations[i].Pack(builder))
            CallableConfigurationsStartConfigurationsVector(builder, len(self.configurations))
            for i in reversed(range(len(self.configurations))):
                builder.PrependUOffsetTRelative(configurationslist[i])
            configurations = builder.EndVector()
        CallableConfigurationsStart(builder)
        if self.configurations is not None:
            CallableConfigurationsAddConfigurations(builder, configurations)
        callableConfigurations = CallableConfigurationsEnd(builder)
        return callableConfigurations
