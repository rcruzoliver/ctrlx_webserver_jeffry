# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Callable configurations of a callable factory
class CallableConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CallableConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCallableConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CallableConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Alias of callable, human readable replacement of callable ID, any alphanumeric character [a-zA-Z_][a-zA-Z0-9-._]+
    # CallableConfiguration
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Synchronization points to specify the call sequence
    # CallableConfiguration
    def Sync(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs.SyncPoints import SyncPoints
            obj = SyncPoints()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # List of arguments to create the callable, for further information see application description of the callable factory
    # CallableConfiguration
    def Arguments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CallableConfiguration
    def ArgumentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CallableConfiguration
    def ArgumentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Requirement of the callable that a watchdog is present
    # CallableConfiguration
    def Watchdog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 3

    # Task specifications to defined callable environment
    # CallableConfiguration
    def Task(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.fbs.TaskSpecs import TaskSpecs
            obj = TaskSpecs()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CallableConfigurationStart(builder): builder.StartObject(5)
def Start(builder):
    return CallableConfigurationStart(builder)
def CallableConfigurationAddAlias(builder, alias): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)
def AddAlias(builder, alias):
    return CallableConfigurationAddAlias(builder, alias)
def CallableConfigurationAddSync(builder, sync): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sync), 0)
def AddSync(builder, sync):
    return CallableConfigurationAddSync(builder, sync)
def CallableConfigurationAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def AddArguments(builder, arguments):
    return CallableConfigurationAddArguments(builder, arguments)
def CallableConfigurationStartArgumentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartArgumentsVector(builder, numElems):
    return CallableConfigurationStartArgumentsVector(builder, numElems)
def CallableConfigurationAddWatchdog(builder, watchdog): builder.PrependInt8Slot(3, watchdog, 3)
def AddWatchdog(builder, watchdog):
    return CallableConfigurationAddWatchdog(builder, watchdog)
def CallableConfigurationAddTask(builder, task): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(task), 0)
def AddTask(builder, task):
    return CallableConfigurationAddTask(builder, task)
def CallableConfigurationEnd(builder): return builder.EndObject()
def End(builder):
    return CallableConfigurationEnd(builder)
import common.scheduler.fbs.SyncPoints
import common.scheduler.fbs.TaskSpecs
try:
    from typing import List, Optional
except:
    pass

class CallableConfigurationT(object):

    # CallableConfigurationT
    def __init__(self):
        self.alias = None  # type: str
        self.sync = None  # type: Optional[common.scheduler.fbs.SyncPoints.SyncPointsT]
        self.arguments = None  # type: List[str]
        self.watchdog = 3  # type: int
        self.task = None  # type: Optional[common.scheduler.fbs.TaskSpecs.TaskSpecsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        callableConfiguration = CallableConfiguration()
        callableConfiguration.Init(buf, pos)
        return cls.InitFromObj(callableConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, callableConfiguration):
        x = CallableConfigurationT()
        x._UnPack(callableConfiguration)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.alias == other.alias and \
            self.sync == other.sync and \
            self.arguments == other.arguments and \
            self.watchdog == other.watchdog and \
            self.task == other.task

    # CallableConfigurationT
    def _UnPack(self, callableConfiguration):
        if callableConfiguration is None:
            return
        self.alias = callableConfiguration.Alias()
        if callableConfiguration.Sync() is not None:
            self.sync = common.scheduler.fbs.SyncPoints.SyncPointsT.InitFromObj(callableConfiguration.Sync())
        if not callableConfiguration.ArgumentsIsNone():
            self.arguments = []
            for i in range(callableConfiguration.ArgumentsLength()):
                self.arguments.append(callableConfiguration.Arguments(i))
        self.watchdog = callableConfiguration.Watchdog()
        if callableConfiguration.Task() is not None:
            self.task = common.scheduler.fbs.TaskSpecs.TaskSpecsT.InitFromObj(callableConfiguration.Task())

    # CallableConfigurationT
    def Pack(self, builder):
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.sync is not None:
            sync = self.sync.Pack(builder)
        if self.arguments is not None:
            argumentslist = []
            for i in range(len(self.arguments)):
                argumentslist.append(builder.CreateString(self.arguments[i]))
            CallableConfigurationStartArgumentsVector(builder, len(self.arguments))
            for i in reversed(range(len(self.arguments))):
                builder.PrependUOffsetTRelative(argumentslist[i])
            arguments = builder.EndVector()
        if self.task is not None:
            task = self.task.Pack(builder)
        CallableConfigurationStart(builder)
        if self.alias is not None:
            CallableConfigurationAddAlias(builder, alias)
        if self.sync is not None:
            CallableConfigurationAddSync(builder, sync)
        if self.arguments is not None:
            CallableConfigurationAddArguments(builder, arguments)
        CallableConfigurationAddWatchdog(builder, self.watchdog)
        if self.task is not None:
            CallableConfigurationAddTask(builder, task)
        callableConfiguration = CallableConfigurationEnd(builder)
        return callableConfiguration
