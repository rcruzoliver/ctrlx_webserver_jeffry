# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Duration measurement of execution of the task (related to real-time usage)
class DurationRt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DurationRt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDurationRt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DurationRt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Total duration of the task including interruptions by other tasks in [µs]
    # DurationRt
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Task duration of the task without interruptions by other tasks in [µs]
    # DurationRt
    def Task(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Duration of interruptions of the task by other tasks in [µs]
    # DurationRt
    def Other(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Equidistance of the task from one cycle to an other in [µs]
    # DurationRt
    def Equidistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Deviation of the task to the expected start time in [µs]
    # DurationRt
    def Deviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Count of execution of the task
    # DurationRt
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Sample rate resp. cycle time of the task in [µs]
    # DurationRt
    def Samplerate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Remaining time from the end of the task to the begin of the next cycle of it in [µs]
    # DurationRt
    def Remaining(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def DurationRtStart(builder): builder.StartObject(8)
def Start(builder):
    return DurationRtStart(builder)
def DurationRtAddTotal(builder, total): builder.PrependUint64Slot(0, total, 0)
def AddTotal(builder, total):
    return DurationRtAddTotal(builder, total)
def DurationRtAddTask(builder, task): builder.PrependUint64Slot(1, task, 0)
def AddTask(builder, task):
    return DurationRtAddTask(builder, task)
def DurationRtAddOther(builder, other): builder.PrependUint64Slot(2, other, 0)
def AddOther(builder, other):
    return DurationRtAddOther(builder, other)
def DurationRtAddEquidistance(builder, equidistance): builder.PrependUint64Slot(3, equidistance, 0)
def AddEquidistance(builder, equidistance):
    return DurationRtAddEquidistance(builder, equidistance)
def DurationRtAddDeviation(builder, deviation): builder.PrependUint64Slot(4, deviation, 0)
def AddDeviation(builder, deviation):
    return DurationRtAddDeviation(builder, deviation)
def DurationRtAddCounter(builder, counter): builder.PrependUint64Slot(5, counter, 0)
def AddCounter(builder, counter):
    return DurationRtAddCounter(builder, counter)
def DurationRtAddSamplerate(builder, samplerate): builder.PrependUint64Slot(6, samplerate, 0)
def AddSamplerate(builder, samplerate):
    return DurationRtAddSamplerate(builder, samplerate)
def DurationRtAddRemaining(builder, remaining): builder.PrependUint64Slot(7, remaining, 0)
def AddRemaining(builder, remaining):
    return DurationRtAddRemaining(builder, remaining)
def DurationRtEnd(builder): return builder.EndObject()
def End(builder):
    return DurationRtEnd(builder)

class DurationRtT(object):

    # DurationRtT
    def __init__(self):
        self.total = 0  # type: int
        self.task = 0  # type: int
        self.other = 0  # type: int
        self.equidistance = 0  # type: int
        self.deviation = 0  # type: int
        self.counter = 0  # type: int
        self.samplerate = 0  # type: int
        self.remaining = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        durationRt = DurationRt()
        durationRt.Init(buf, pos)
        return cls.InitFromObj(durationRt)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, durationRt):
        x = DurationRtT()
        x._UnPack(durationRt)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.total == other.total and \
            self.task == other.task and \
            self.other == other.other and \
            self.equidistance == other.equidistance and \
            self.deviation == other.deviation and \
            self.counter == other.counter and \
            self.samplerate == other.samplerate and \
            self.remaining == other.remaining

    # DurationRtT
    def _UnPack(self, durationRt):
        if durationRt is None:
            return
        self.total = durationRt.Total()
        self.task = durationRt.Task()
        self.other = durationRt.Other()
        self.equidistance = durationRt.Equidistance()
        self.deviation = durationRt.Deviation()
        self.counter = durationRt.Counter()
        self.samplerate = durationRt.Samplerate()
        self.remaining = durationRt.Remaining()

    # DurationRtT
    def Pack(self, builder):
        DurationRtStart(builder)
        DurationRtAddTotal(builder, self.total)
        DurationRtAddTask(builder, self.task)
        DurationRtAddOther(builder, self.other)
        DurationRtAddEquidistance(builder, self.equidistance)
        DurationRtAddDeviation(builder, self.deviation)
        DurationRtAddCounter(builder, self.counter)
        DurationRtAddSamplerate(builder, self.samplerate)
        DurationRtAddRemaining(builder, self.remaining)
        durationRt = DurationRtEnd(builder)
        return durationRt
