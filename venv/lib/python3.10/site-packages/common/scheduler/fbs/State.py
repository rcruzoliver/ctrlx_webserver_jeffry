# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def StateStart(builder): builder.StartObject(1)
def Start(builder):
    return StateStart(builder)
def StateAddState(builder, state): builder.PrependInt8Slot(0, state, 1)
def AddState(builder, state):
    return StateAddState(builder, state)
def StateEnd(builder): return builder.EndObject()
def End(builder):
    return StateEnd(builder)

class StateT(object):

    # StateT
    def __init__(self):
        self.state = 1  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        state = State()
        state.Init(buf, pos)
        return cls.InitFromObj(state)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, state):
        x = StateT()
        x._UnPack(state)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.state == other.state

    # StateT
    def _UnPack(self, state):
        if state is None:
            return
        self.state = state.State()

    # StateT
    def Pack(self, builder):
        StateStart(builder)
        StateAddState(builder, self.state)
        state = StateEnd(builder)
        return state
