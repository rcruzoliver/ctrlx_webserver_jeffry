# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cyclic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cyclic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCyclic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cyclic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cyclic
    def ErrorCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Cyclic
    def Reset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Cyclic
    def ErrorReaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.watchdog.fbs.ErrorReaction import ErrorReaction
            obj = ErrorReaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CyclicStart(builder): builder.StartObject(3)
def Start(builder):
    return CyclicStart(builder)
def CyclicAddErrorCount(builder, errorCount): builder.PrependUint32Slot(0, errorCount, 0)
def AddErrorCount(builder, errorCount):
    return CyclicAddErrorCount(builder, errorCount)
def CyclicAddReset(builder, reset): builder.PrependBoolSlot(1, reset, 0)
def AddReset(builder, reset):
    return CyclicAddReset(builder, reset)
def CyclicAddErrorReaction(builder, errorReaction): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(errorReaction), 0)
def AddErrorReaction(builder, errorReaction):
    return CyclicAddErrorReaction(builder, errorReaction)
def CyclicEnd(builder): return builder.EndObject()
def End(builder):
    return CyclicEnd(builder)
import common.scheduler.watchdog.fbs.ErrorReaction
try:
    from typing import Optional
except:
    pass

class CyclicT(object):

    # CyclicT
    def __init__(self):
        self.errorCount = 0  # type: int
        self.reset = False  # type: bool
        self.errorReaction = None  # type: Optional[common.scheduler.watchdog.fbs.ErrorReaction.ErrorReactionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cyclic = Cyclic()
        cyclic.Init(buf, pos)
        return cls.InitFromObj(cyclic)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cyclic):
        x = CyclicT()
        x._UnPack(cyclic)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.errorCount == other.errorCount and \
            self.reset == other.reset and \
            self.errorReaction == other.errorReaction

    # CyclicT
    def _UnPack(self, cyclic):
        if cyclic is None:
            return
        self.errorCount = cyclic.ErrorCount()
        self.reset = cyclic.Reset()
        if cyclic.ErrorReaction() is not None:
            self.errorReaction = common.scheduler.watchdog.fbs.ErrorReaction.ErrorReactionT.InitFromObj(cyclic.ErrorReaction())

    # CyclicT
    def Pack(self, builder):
        if self.errorReaction is not None:
            errorReaction = self.errorReaction.Pack(builder)
        CyclicStart(builder)
        CyclicAddErrorCount(builder, self.errorCount)
        CyclicAddReset(builder, self.reset)
        if self.errorReaction is not None:
            CyclicAddErrorReaction(builder, errorReaction)
        cyclic = CyclicEnd(builder)
        return cyclic
