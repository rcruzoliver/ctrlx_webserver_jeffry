# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Type of watchdog of the task
class Type(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Type()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Type
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of watchdog of the task
    # Type
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def TypeStart(builder): builder.StartObject(1)
def Start(builder):
    return TypeStart(builder)
def TypeAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def AddType(builder, type):
    return TypeAddType(builder, type)
def TypeEnd(builder): return builder.EndObject()
def End(builder):
    return TypeEnd(builder)

class TypeT(object):

    # TypeT
    def __init__(self):
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        type = Type()
        type.Init(buf, pos)
        return cls.InitFromObj(type)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, type):
        x = TypeT()
        x._UnPack(type)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.type == other.type

    # TypeT
    def _UnPack(self, type):
        if type is None:
            return
        self.type = type.Type()

    # TypeT
    def Pack(self, builder):
        TypeStart(builder)
        TypeAddType(builder, self.type)
        type = TypeEnd(builder)
        return type
