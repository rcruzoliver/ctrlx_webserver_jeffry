# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the generic event type 1 that is used to evaluate specific diagnostic events.
class EventType1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventType1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventType1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventType1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Event counter that is incremented if the selected event occurs. 
    # EventType1
    def EventCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def EventType1Start(builder): builder.StartObject(1)
def Start(builder):
    return EventType1Start(builder)
def EventType1AddEventCounter(builder, eventCounter): builder.PrependUint64Slot(0, eventCounter, 0)
def AddEventCounter(builder, eventCounter):
    return EventType1AddEventCounter(builder, eventCounter)
def EventType1End(builder): return builder.EndObject()
def End(builder):
    return EventType1End(builder)

class EventType1T(object):

    # EventType1T
    def __init__(self):
        self.eventCounter = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eventType1 = EventType1()
        eventType1.Init(buf, pos)
        return cls.InitFromObj(eventType1)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, eventType1):
        x = EventType1T()
        x._UnPack(eventType1)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.eventCounter == other.eventCounter

    # EventType1T
    def _UnPack(self, eventType1):
        if eventType1 is None:
            return
        self.eventCounter = eventType1.EventCounter()

    # EventType1T
    def Pack(self, builder):
        EventType1Start(builder)
        EventType1AddEventCounter(builder, self.eventCounter)
        eventType1 = EventType1End(builder)
        return eventType1
