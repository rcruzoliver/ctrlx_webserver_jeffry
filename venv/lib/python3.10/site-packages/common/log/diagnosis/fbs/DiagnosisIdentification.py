# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines all diagnostic elements that are required to uniquely identify a diagnostic log.
class DiagnosisIdentification(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagnosisIdentification()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagnosisIdentification(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DiagnosisIdentification
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Main diagnostic number.
    # DiagnosisIdentification
    def MainDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detailed diagnostic number.
    # DiagnosisIdentification
    def DetailedDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Entity/resource that is affected.
    # DiagnosisIdentification
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisIdentificationStart(builder): builder.StartObject(3)
def Start(builder):
    return DiagnosisIdentificationStart(builder)
def DiagnosisIdentificationAddMainDiagnosisNumber(builder, mainDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainDiagnosisNumber), 0)
def AddMainDiagnosisNumber(builder, mainDiagnosisNumber):
    return DiagnosisIdentificationAddMainDiagnosisNumber(builder, mainDiagnosisNumber)
def DiagnosisIdentificationAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detailedDiagnosisNumber), 0)
def AddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber):
    return DiagnosisIdentificationAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber)
def DiagnosisIdentificationAddEntity(builder, entity): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)
def AddEntity(builder, entity):
    return DiagnosisIdentificationAddEntity(builder, entity)
def DiagnosisIdentificationEnd(builder): return builder.EndObject()
def End(builder):
    return DiagnosisIdentificationEnd(builder)

class DiagnosisIdentificationT(object):

    # DiagnosisIdentificationT
    def __init__(self):
        self.mainDiagnosisNumber = None  # type: str
        self.detailedDiagnosisNumber = None  # type: str
        self.entity = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosisIdentification = DiagnosisIdentification()
        diagnosisIdentification.Init(buf, pos)
        return cls.InitFromObj(diagnosisIdentification)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagnosisIdentification):
        x = DiagnosisIdentificationT()
        x._UnPack(diagnosisIdentification)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiagnosisNumber == other.mainDiagnosisNumber and \
            self.detailedDiagnosisNumber == other.detailedDiagnosisNumber and \
            self.entity == other.entity

    # DiagnosisIdentificationT
    def _UnPack(self, diagnosisIdentification):
        if diagnosisIdentification is None:
            return
        self.mainDiagnosisNumber = diagnosisIdentification.MainDiagnosisNumber()
        self.detailedDiagnosisNumber = diagnosisIdentification.DetailedDiagnosisNumber()
        self.entity = diagnosisIdentification.Entity()

    # DiagnosisIdentificationT
    def Pack(self, builder):
        if self.mainDiagnosisNumber is not None:
            mainDiagnosisNumber = builder.CreateString(self.mainDiagnosisNumber)
        if self.detailedDiagnosisNumber is not None:
            detailedDiagnosisNumber = builder.CreateString(self.detailedDiagnosisNumber)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        DiagnosisIdentificationStart(builder)
        if self.mainDiagnosisNumber is not None:
            DiagnosisIdentificationAddMainDiagnosisNumber(builder, mainDiagnosisNumber)
        if self.detailedDiagnosisNumber is not None:
            DiagnosisIdentificationAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber)
        if self.entity is not None:
            DiagnosisIdentificationAddEntity(builder, entity)
        diagnosisIdentification = DiagnosisIdentificationEnd(builder)
        return diagnosisIdentification
