# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines a list of uniquely identifiable diagnostic logs with the related timestamp (e.g. it is used for the pending diagnostics).
class ListDiagnosisIdentificationWithTimestamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListDiagnosisIdentificationWithTimestamp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListDiagnosisIdentificationWithTimestamp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListDiagnosisIdentificationWithTimestamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # List of uniquely identifiable diagnostic logs with the related timestamp.
    # ListDiagnosisIdentificationWithTimestamp
    def ListDiagnosisIdentificationWithTimestamp(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.log.diagnosis.fbs.DiagnosisIdentificationWithTimestamp import DiagnosisIdentificationWithTimestamp
            obj = DiagnosisIdentificationWithTimestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ListDiagnosisIdentificationWithTimestamp
    def ListDiagnosisIdentificationWithTimestampLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ListDiagnosisIdentificationWithTimestamp
    def ListDiagnosisIdentificationWithTimestampIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ListDiagnosisIdentificationWithTimestampStart(builder): builder.StartObject(1)
def Start(builder):
    return ListDiagnosisIdentificationWithTimestampStart(builder)
def ListDiagnosisIdentificationWithTimestampAddListDiagnosisIdentificationWithTimestamp(builder, listDiagnosisIdentificationWithTimestamp): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(listDiagnosisIdentificationWithTimestamp), 0)
def AddListDiagnosisIdentificationWithTimestamp(builder, listDiagnosisIdentificationWithTimestamp):
    return ListDiagnosisIdentificationWithTimestampAddListDiagnosisIdentificationWithTimestamp(builder, listDiagnosisIdentificationWithTimestamp)
def ListDiagnosisIdentificationWithTimestampStartListDiagnosisIdentificationWithTimestampVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartListDiagnosisIdentificationWithTimestampVector(builder, numElems):
    return ListDiagnosisIdentificationWithTimestampStartListDiagnosisIdentificationWithTimestampVector(builder, numElems)
def ListDiagnosisIdentificationWithTimestampEnd(builder): return builder.EndObject()
def End(builder):
    return ListDiagnosisIdentificationWithTimestampEnd(builder)
import common.log.diagnosis.fbs.DiagnosisIdentificationWithTimestamp
try:
    from typing import List
except:
    pass

class ListDiagnosisIdentificationWithTimestampT(object):

    # ListDiagnosisIdentificationWithTimestampT
    def __init__(self):
        self.listDiagnosisIdentificationWithTimestamp = None  # type: List[common.log.diagnosis.fbs.DiagnosisIdentificationWithTimestamp.DiagnosisIdentificationWithTimestampT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        listDiagnosisIdentificationWithTimestamp = ListDiagnosisIdentificationWithTimestamp()
        listDiagnosisIdentificationWithTimestamp.Init(buf, pos)
        return cls.InitFromObj(listDiagnosisIdentificationWithTimestamp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, listDiagnosisIdentificationWithTimestamp):
        x = ListDiagnosisIdentificationWithTimestampT()
        x._UnPack(listDiagnosisIdentificationWithTimestamp)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.listDiagnosisIdentificationWithTimestamp == other.listDiagnosisIdentificationWithTimestamp

    # ListDiagnosisIdentificationWithTimestampT
    def _UnPack(self, listDiagnosisIdentificationWithTimestamp):
        if listDiagnosisIdentificationWithTimestamp is None:
            return
        if not listDiagnosisIdentificationWithTimestamp.ListDiagnosisIdentificationWithTimestampIsNone():
            self.listDiagnosisIdentificationWithTimestamp = []
            for i in range(listDiagnosisIdentificationWithTimestamp.ListDiagnosisIdentificationWithTimestampLength()):
                if listDiagnosisIdentificationWithTimestamp.ListDiagnosisIdentificationWithTimestamp(i) is None:
                    self.listDiagnosisIdentificationWithTimestamp.append(None)
                else:
                    diagnosisIdentificationWithTimestamp_ = common.log.diagnosis.fbs.DiagnosisIdentificationWithTimestamp.DiagnosisIdentificationWithTimestampT.InitFromObj(listDiagnosisIdentificationWithTimestamp.ListDiagnosisIdentificationWithTimestamp(i))
                    self.listDiagnosisIdentificationWithTimestamp.append(diagnosisIdentificationWithTimestamp_)

    # ListDiagnosisIdentificationWithTimestampT
    def Pack(self, builder):
        if self.listDiagnosisIdentificationWithTimestamp is not None:
            listDiagnosisIdentificationWithTimestamplist = []
            for i in range(len(self.listDiagnosisIdentificationWithTimestamp)):
                listDiagnosisIdentificationWithTimestamplist.append(self.listDiagnosisIdentificationWithTimestamp[i].Pack(builder))
            ListDiagnosisIdentificationWithTimestampStartListDiagnosisIdentificationWithTimestampVector(builder, len(self.listDiagnosisIdentificationWithTimestamp))
            for i in reversed(range(len(self.listDiagnosisIdentificationWithTimestamp))):
                builder.PrependUOffsetTRelative(listDiagnosisIdentificationWithTimestamplist[i])
            listDiagnosisIdentificationWithTimestamp = builder.EndVector()
        ListDiagnosisIdentificationWithTimestampStart(builder)
        if self.listDiagnosisIdentificationWithTimestamp is not None:
            ListDiagnosisIdentificationWithTimestampAddListDiagnosisIdentificationWithTimestamp(builder, listDiagnosisIdentificationWithTimestamp)
        listDiagnosisIdentificationWithTimestamp = ListDiagnosisIdentificationWithTimestampEnd(builder)
        return listDiagnosisIdentificationWithTimestamp
