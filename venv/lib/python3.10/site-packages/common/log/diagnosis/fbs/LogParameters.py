# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines all elements that can be used to set a diagnostic log.
# It is used for diagnostic messages, warnings and errors.
class LogParameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogParameters()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogParameters(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LogParameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Main diagnostic number.
    # LogParameters
    def MainDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detailed diagnostic number.
    # LogParameters
    def DetailedDiagnosisCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User id of the user who sends the log.
    # LogParameters
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Object/resource that notifies the log (e.g. motion/axs/axisY).
    # LogParameters
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application that notifies the log (e.g. rexroth-automationcore).
    # LogParameters
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unit name of the component that notifies the log (e.g. comm.datalayer).
    # LogParameters
    def UnitName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the file from where the log is set.
    # LogParameters
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the function from where the log is set.
    # LogParameters
    def FunctionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Line number from where the log is set.
    # LogParameters
    def LineNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Dynamic description to set additional dynamic elements.
    # LogParameters
    def DynamicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogParametersStart(builder): builder.StartObject(10)
def Start(builder):
    return LogParametersStart(builder)
def LogParametersAddMainDiagnosisCode(builder, mainDiagnosisCode): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainDiagnosisCode), 0)
def AddMainDiagnosisCode(builder, mainDiagnosisCode):
    return LogParametersAddMainDiagnosisCode(builder, mainDiagnosisCode)
def LogParametersAddDetailedDiagnosisCode(builder, detailedDiagnosisCode): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detailedDiagnosisCode), 0)
def AddDetailedDiagnosisCode(builder, detailedDiagnosisCode):
    return LogParametersAddDetailedDiagnosisCode(builder, detailedDiagnosisCode)
def LogParametersAddUserId(builder, userId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)
def AddUserId(builder, userId):
    return LogParametersAddUserId(builder, userId)
def LogParametersAddEntity(builder, entity): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)
def AddEntity(builder, entity):
    return LogParametersAddEntity(builder, entity)
def LogParametersAddOrigin(builder, origin): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)
def AddOrigin(builder, origin):
    return LogParametersAddOrigin(builder, origin)
def LogParametersAddUnitName(builder, unitName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unitName), 0)
def AddUnitName(builder, unitName):
    return LogParametersAddUnitName(builder, unitName)
def LogParametersAddFileName(builder, fileName): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0)
def AddFileName(builder, fileName):
    return LogParametersAddFileName(builder, fileName)
def LogParametersAddFunctionName(builder, functionName): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(functionName), 0)
def AddFunctionName(builder, functionName):
    return LogParametersAddFunctionName(builder, functionName)
def LogParametersAddLineNumber(builder, lineNumber): builder.PrependUint32Slot(8, lineNumber, 0)
def AddLineNumber(builder, lineNumber):
    return LogParametersAddLineNumber(builder, lineNumber)
def LogParametersAddDynamicDescription(builder, dynamicDescription): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicDescription), 0)
def AddDynamicDescription(builder, dynamicDescription):
    return LogParametersAddDynamicDescription(builder, dynamicDescription)
def LogParametersEnd(builder): return builder.EndObject()
def End(builder):
    return LogParametersEnd(builder)

class LogParametersT(object):

    # LogParametersT
    def __init__(self):
        self.mainDiagnosisCode = None  # type: str
        self.detailedDiagnosisCode = None  # type: str
        self.userId = None  # type: str
        self.entity = None  # type: str
        self.origin = None  # type: str
        self.unitName = None  # type: str
        self.fileName = None  # type: str
        self.functionName = None  # type: str
        self.lineNumber = 0  # type: int
        self.dynamicDescription = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logParameters = LogParameters()
        logParameters.Init(buf, pos)
        return cls.InitFromObj(logParameters)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logParameters):
        x = LogParametersT()
        x._UnPack(logParameters)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiagnosisCode == other.mainDiagnosisCode and \
            self.detailedDiagnosisCode == other.detailedDiagnosisCode and \
            self.userId == other.userId and \
            self.entity == other.entity and \
            self.origin == other.origin and \
            self.unitName == other.unitName and \
            self.fileName == other.fileName and \
            self.functionName == other.functionName and \
            self.lineNumber == other.lineNumber and \
            self.dynamicDescription == other.dynamicDescription

    # LogParametersT
    def _UnPack(self, logParameters):
        if logParameters is None:
            return
        self.mainDiagnosisCode = logParameters.MainDiagnosisCode()
        self.detailedDiagnosisCode = logParameters.DetailedDiagnosisCode()
        self.userId = logParameters.UserId()
        self.entity = logParameters.Entity()
        self.origin = logParameters.Origin()
        self.unitName = logParameters.UnitName()
        self.fileName = logParameters.FileName()
        self.functionName = logParameters.FunctionName()
        self.lineNumber = logParameters.LineNumber()
        self.dynamicDescription = logParameters.DynamicDescription()

    # LogParametersT
    def Pack(self, builder):
        if self.mainDiagnosisCode is not None:
            mainDiagnosisCode = builder.CreateString(self.mainDiagnosisCode)
        if self.detailedDiagnosisCode is not None:
            detailedDiagnosisCode = builder.CreateString(self.detailedDiagnosisCode)
        if self.userId is not None:
            userId = builder.CreateString(self.userId)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.unitName is not None:
            unitName = builder.CreateString(self.unitName)
        if self.fileName is not None:
            fileName = builder.CreateString(self.fileName)
        if self.functionName is not None:
            functionName = builder.CreateString(self.functionName)
        if self.dynamicDescription is not None:
            dynamicDescription = builder.CreateString(self.dynamicDescription)
        LogParametersStart(builder)
        if self.mainDiagnosisCode is not None:
            LogParametersAddMainDiagnosisCode(builder, mainDiagnosisCode)
        if self.detailedDiagnosisCode is not None:
            LogParametersAddDetailedDiagnosisCode(builder, detailedDiagnosisCode)
        if self.userId is not None:
            LogParametersAddUserId(builder, userId)
        if self.entity is not None:
            LogParametersAddEntity(builder, entity)
        if self.origin is not None:
            LogParametersAddOrigin(builder, origin)
        if self.unitName is not None:
            LogParametersAddUnitName(builder, unitName)
        if self.fileName is not None:
            LogParametersAddFileName(builder, fileName)
        if self.functionName is not None:
            LogParametersAddFunctionName(builder, functionName)
        LogParametersAddLineNumber(builder, self.lineNumber)
        if self.dynamicDescription is not None:
            LogParametersAddDynamicDescription(builder, dynamicDescription)
        logParameters = LogParametersEnd(builder)
        return logParameters
