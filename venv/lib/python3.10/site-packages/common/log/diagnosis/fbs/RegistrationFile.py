# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the structure of the registration json file that is needed to register diagnostics.
class RegistrationFile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RegistrationFile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRegistrationFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RegistrationFile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Language of the default texts (optional).
    # RegistrationFile
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Product associated to the diagnostics (optional).
    # RegistrationFile
    def Product(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Component associated to the diagnostics (optional).
    # RegistrationFile
    def Component(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # All main diagnostics (including their related detailed diagnostics) that should be registered.
    # RegistrationFile
    def MainDiagnostics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.log.diagnosis.fbs.MainDiagnostic import MainDiagnostic
            obj = MainDiagnostic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RegistrationFile
    def MainDiagnosticsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RegistrationFile
    def MainDiagnosticsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def RegistrationFileStart(builder): builder.StartObject(4)
def Start(builder):
    return RegistrationFileStart(builder)
def RegistrationFileAddLanguage(builder, language): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(language), 0)
def AddLanguage(builder, language):
    return RegistrationFileAddLanguage(builder, language)
def RegistrationFileAddProduct(builder, product): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(product), 0)
def AddProduct(builder, product):
    return RegistrationFileAddProduct(builder, product)
def RegistrationFileAddComponent(builder, component): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(component), 0)
def AddComponent(builder, component):
    return RegistrationFileAddComponent(builder, component)
def RegistrationFileAddMainDiagnostics(builder, mainDiagnostics): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mainDiagnostics), 0)
def AddMainDiagnostics(builder, mainDiagnostics):
    return RegistrationFileAddMainDiagnostics(builder, mainDiagnostics)
def RegistrationFileStartMainDiagnosticsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartMainDiagnosticsVector(builder, numElems):
    return RegistrationFileStartMainDiagnosticsVector(builder, numElems)
def RegistrationFileEnd(builder): return builder.EndObject()
def End(builder):
    return RegistrationFileEnd(builder)
import common.log.diagnosis.fbs.MainDiagnostic
try:
    from typing import List
except:
    pass

class RegistrationFileT(object):

    # RegistrationFileT
    def __init__(self):
        self.language = None  # type: str
        self.product = None  # type: str
        self.component = None  # type: str
        self.mainDiagnostics = None  # type: List[common.log.diagnosis.fbs.MainDiagnostic.MainDiagnosticT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        registrationFile = RegistrationFile()
        registrationFile.Init(buf, pos)
        return cls.InitFromObj(registrationFile)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, registrationFile):
        x = RegistrationFileT()
        x._UnPack(registrationFile)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.language == other.language and \
            self.product == other.product and \
            self.component == other.component and \
            self.mainDiagnostics == other.mainDiagnostics

    # RegistrationFileT
    def _UnPack(self, registrationFile):
        if registrationFile is None:
            return
        self.language = registrationFile.Language()
        self.product = registrationFile.Product()
        self.component = registrationFile.Component()
        if not registrationFile.MainDiagnosticsIsNone():
            self.mainDiagnostics = []
            for i in range(registrationFile.MainDiagnosticsLength()):
                if registrationFile.MainDiagnostics(i) is None:
                    self.mainDiagnostics.append(None)
                else:
                    mainDiagnostic_ = common.log.diagnosis.fbs.MainDiagnostic.MainDiagnosticT.InitFromObj(registrationFile.MainDiagnostics(i))
                    self.mainDiagnostics.append(mainDiagnostic_)

    # RegistrationFileT
    def Pack(self, builder):
        if self.language is not None:
            language = builder.CreateString(self.language)
        if self.product is not None:
            product = builder.CreateString(self.product)
        if self.component is not None:
            component = builder.CreateString(self.component)
        if self.mainDiagnostics is not None:
            mainDiagnosticslist = []
            for i in range(len(self.mainDiagnostics)):
                mainDiagnosticslist.append(self.mainDiagnostics[i].Pack(builder))
            RegistrationFileStartMainDiagnosticsVector(builder, len(self.mainDiagnostics))
            for i in reversed(range(len(self.mainDiagnostics))):
                builder.PrependUOffsetTRelative(mainDiagnosticslist[i])
            mainDiagnostics = builder.EndVector()
        RegistrationFileStart(builder)
        if self.language is not None:
            RegistrationFileAddLanguage(builder, language)
        if self.product is not None:
            RegistrationFileAddProduct(builder, product)
        if self.component is not None:
            RegistrationFileAddComponent(builder, component)
        if self.mainDiagnostics is not None:
            RegistrationFileAddMainDiagnostics(builder, mainDiagnostics)
        registrationFile = RegistrationFileEnd(builder)
        return registrationFile
