# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the elements of one detailed diagnostics that should be registered.
class DetailedDiagnostic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DetailedDiagnostic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDetailedDiagnostic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DetailedDiagnostic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Detailed diagnostic number.
    # DetailedDiagnostic
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version of the detailed diagnostics starting with 1.
    # DetailedDiagnostic
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # Default text of the detailed diagnostics.
    # DetailedDiagnostic
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DetailedDiagnosticStart(builder): builder.StartObject(3)
def Start(builder):
    return DetailedDiagnosticStart(builder)
def DetailedDiagnosticAddNumber(builder, number): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)
def AddNumber(builder, number):
    return DetailedDiagnosticAddNumber(builder, number)
def DetailedDiagnosticAddVersion(builder, version): builder.PrependUint32Slot(1, version, 1)
def AddVersion(builder, version):
    return DetailedDiagnosticAddVersion(builder, version)
def DetailedDiagnosticAddText(builder, text): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return DetailedDiagnosticAddText(builder, text)
def DetailedDiagnosticEnd(builder): return builder.EndObject()
def End(builder):
    return DetailedDiagnosticEnd(builder)

class DetailedDiagnosticT(object):

    # DetailedDiagnosticT
    def __init__(self):
        self.number = None  # type: str
        self.version = 1  # type: int
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        detailedDiagnostic = DetailedDiagnostic()
        detailedDiagnostic.Init(buf, pos)
        return cls.InitFromObj(detailedDiagnostic)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, detailedDiagnostic):
        x = DetailedDiagnosticT()
        x._UnPack(detailedDiagnostic)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.number == other.number and \
            self.version == other.version and \
            self.text == other.text

    # DetailedDiagnosticT
    def _UnPack(self, detailedDiagnostic):
        if detailedDiagnostic is None:
            return
        self.number = detailedDiagnostic.Number()
        self.version = detailedDiagnostic.Version()
        self.text = detailedDiagnostic.Text()

    # DetailedDiagnosticT
    def Pack(self, builder):
        if self.number is not None:
            number = builder.CreateString(self.number)
        if self.text is not None:
            text = builder.CreateString(self.text)
        DetailedDiagnosticStart(builder)
        if self.number is not None:
            DetailedDiagnosticAddNumber(builder, number)
        DetailedDiagnosticAddVersion(builder, self.version)
        if self.text is not None:
            DetailedDiagnosticAddText(builder, text)
        detailedDiagnostic = DetailedDiagnosticEnd(builder)
        return detailedDiagnostic
