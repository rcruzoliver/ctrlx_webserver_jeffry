# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines a list of main or detailed diagnostics that should be registered.
class DiagnosisElements(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagnosisElements()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagnosisElements(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DiagnosisElements
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # List of main or detailed diagnostics.
    # DiagnosisElements
    def DiagnosisElements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.log.diagnosis.fbs.DiagnosisElement import DiagnosisElement
            obj = DiagnosisElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DiagnosisElements
    def DiagnosisElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DiagnosisElements
    def DiagnosisElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def DiagnosisElementsStart(builder): builder.StartObject(1)
def Start(builder):
    return DiagnosisElementsStart(builder)
def DiagnosisElementsAddDiagnosisElements(builder, diagnosisElements): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(diagnosisElements), 0)
def AddDiagnosisElements(builder, diagnosisElements):
    return DiagnosisElementsAddDiagnosisElements(builder, diagnosisElements)
def DiagnosisElementsStartDiagnosisElementsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDiagnosisElementsVector(builder, numElems):
    return DiagnosisElementsStartDiagnosisElementsVector(builder, numElems)
def DiagnosisElementsEnd(builder): return builder.EndObject()
def End(builder):
    return DiagnosisElementsEnd(builder)
import common.log.diagnosis.fbs.DiagnosisElement
try:
    from typing import List
except:
    pass

class DiagnosisElementsT(object):

    # DiagnosisElementsT
    def __init__(self):
        self.diagnosisElements = None  # type: List[common.log.diagnosis.fbs.DiagnosisElement.DiagnosisElementT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosisElements = DiagnosisElements()
        diagnosisElements.Init(buf, pos)
        return cls.InitFromObj(diagnosisElements)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagnosisElements):
        x = DiagnosisElementsT()
        x._UnPack(diagnosisElements)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.diagnosisElements == other.diagnosisElements

    # DiagnosisElementsT
    def _UnPack(self, diagnosisElements):
        if diagnosisElements is None:
            return
        if not diagnosisElements.DiagnosisElementsIsNone():
            self.diagnosisElements = []
            for i in range(diagnosisElements.DiagnosisElementsLength()):
                if diagnosisElements.DiagnosisElements(i) is None:
                    self.diagnosisElements.append(None)
                else:
                    diagnosisElement_ = common.log.diagnosis.fbs.DiagnosisElement.DiagnosisElementT.InitFromObj(diagnosisElements.DiagnosisElements(i))
                    self.diagnosisElements.append(diagnosisElement_)

    # DiagnosisElementsT
    def Pack(self, builder):
        if self.diagnosisElements is not None:
            diagnosisElementslist = []
            for i in range(len(self.diagnosisElements)):
                diagnosisElementslist.append(self.diagnosisElements[i].Pack(builder))
            DiagnosisElementsStartDiagnosisElementsVector(builder, len(self.diagnosisElements))
            for i in reversed(range(len(self.diagnosisElements))):
                builder.PrependUOffsetTRelative(diagnosisElementslist[i])
            diagnosisElements = builder.EndVector()
        DiagnosisElementsStart(builder)
        if self.diagnosisElements is not None:
            DiagnosisElementsAddDiagnosisElements(builder, diagnosisElements)
        diagnosisElements = DiagnosisElementsEnd(builder)
        return diagnosisElements
