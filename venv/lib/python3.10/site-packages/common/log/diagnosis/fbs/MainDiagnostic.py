# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the elements of one main diagnostics that should be registered.
class MainDiagnostic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MainDiagnostic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMainDiagnostic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MainDiagnostic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Main diagnostic number.
    # MainDiagnostic
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version of the main diagnostics starting with 1.
    # MainDiagnostic
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

    # Default text of the main diagnostics.
    # MainDiagnostic
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # All detailed diagnostics that belong to this main diagnostics.
    # MainDiagnostic
    def DetailedDiagnostics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from common.log.diagnosis.fbs.DetailedDiagnostic import DetailedDiagnostic
            obj = DetailedDiagnostic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MainDiagnostic
    def DetailedDiagnosticsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MainDiagnostic
    def DetailedDiagnosticsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MainDiagnosticStart(builder): builder.StartObject(4)
def Start(builder):
    return MainDiagnosticStart(builder)
def MainDiagnosticAddNumber(builder, number): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)
def AddNumber(builder, number):
    return MainDiagnosticAddNumber(builder, number)
def MainDiagnosticAddVersion(builder, version): builder.PrependUint32Slot(1, version, 1)
def AddVersion(builder, version):
    return MainDiagnosticAddVersion(builder, version)
def MainDiagnosticAddText(builder, text): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return MainDiagnosticAddText(builder, text)
def MainDiagnosticAddDetailedDiagnostics(builder, detailedDiagnostics): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(detailedDiagnostics), 0)
def AddDetailedDiagnostics(builder, detailedDiagnostics):
    return MainDiagnosticAddDetailedDiagnostics(builder, detailedDiagnostics)
def MainDiagnosticStartDetailedDiagnosticsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDetailedDiagnosticsVector(builder, numElems):
    return MainDiagnosticStartDetailedDiagnosticsVector(builder, numElems)
def MainDiagnosticEnd(builder): return builder.EndObject()
def End(builder):
    return MainDiagnosticEnd(builder)
import common.log.diagnosis.fbs.DetailedDiagnostic
try:
    from typing import List
except:
    pass

class MainDiagnosticT(object):

    # MainDiagnosticT
    def __init__(self):
        self.number = None  # type: str
        self.version = 1  # type: int
        self.text = None  # type: str
        self.detailedDiagnostics = None  # type: List[common.log.diagnosis.fbs.DetailedDiagnostic.DetailedDiagnosticT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mainDiagnostic = MainDiagnostic()
        mainDiagnostic.Init(buf, pos)
        return cls.InitFromObj(mainDiagnostic)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mainDiagnostic):
        x = MainDiagnosticT()
        x._UnPack(mainDiagnostic)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.number == other.number and \
            self.version == other.version and \
            self.text == other.text and \
            self.detailedDiagnostics == other.detailedDiagnostics

    # MainDiagnosticT
    def _UnPack(self, mainDiagnostic):
        if mainDiagnostic is None:
            return
        self.number = mainDiagnostic.Number()
        self.version = mainDiagnostic.Version()
        self.text = mainDiagnostic.Text()
        if not mainDiagnostic.DetailedDiagnosticsIsNone():
            self.detailedDiagnostics = []
            for i in range(mainDiagnostic.DetailedDiagnosticsLength()):
                if mainDiagnostic.DetailedDiagnostics(i) is None:
                    self.detailedDiagnostics.append(None)
                else:
                    detailedDiagnostic_ = common.log.diagnosis.fbs.DetailedDiagnostic.DetailedDiagnosticT.InitFromObj(mainDiagnostic.DetailedDiagnostics(i))
                    self.detailedDiagnostics.append(detailedDiagnostic_)

    # MainDiagnosticT
    def Pack(self, builder):
        if self.number is not None:
            number = builder.CreateString(self.number)
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.detailedDiagnostics is not None:
            detailedDiagnosticslist = []
            for i in range(len(self.detailedDiagnostics)):
                detailedDiagnosticslist.append(self.detailedDiagnostics[i].Pack(builder))
            MainDiagnosticStartDetailedDiagnosticsVector(builder, len(self.detailedDiagnostics))
            for i in reversed(range(len(self.detailedDiagnostics))):
                builder.PrependUOffsetTRelative(detailedDiagnosticslist[i])
            detailedDiagnostics = builder.EndVector()
        MainDiagnosticStart(builder)
        if self.number is not None:
            MainDiagnosticAddNumber(builder, number)
        MainDiagnosticAddVersion(builder, self.version)
        if self.text is not None:
            MainDiagnosticAddText(builder, text)
        if self.detailedDiagnostics is not None:
            MainDiagnosticAddDetailedDiagnostics(builder, detailedDiagnostics)
        mainDiagnostic = MainDiagnosticEnd(builder)
        return mainDiagnostic
