# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the state of one diagnostic log in the pending diagnostics.
class PendingDiagnosticState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PendingDiagnosticState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPendingDiagnosticState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PendingDiagnosticState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State of one diagnostic log in the pending diagnostics.
    # PendingDiagnosticState
    def PendingDiagnosticState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def PendingDiagnosticStateStart(builder): builder.StartObject(1)
def Start(builder):
    return PendingDiagnosticStateStart(builder)
def PendingDiagnosticStateAddPendingDiagnosticState(builder, pendingDiagnosticState): builder.PrependInt8Slot(0, pendingDiagnosticState, 0)
def AddPendingDiagnosticState(builder, pendingDiagnosticState):
    return PendingDiagnosticStateAddPendingDiagnosticState(builder, pendingDiagnosticState)
def PendingDiagnosticStateEnd(builder): return builder.EndObject()
def End(builder):
    return PendingDiagnosticStateEnd(builder)

class PendingDiagnosticStateT(object):

    # PendingDiagnosticStateT
    def __init__(self):
        self.pendingDiagnosticState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pendingDiagnosticState = PendingDiagnosticState()
        pendingDiagnosticState.Init(buf, pos)
        return cls.InitFromObj(pendingDiagnosticState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pendingDiagnosticState):
        x = PendingDiagnosticStateT()
        x._UnPack(pendingDiagnosticState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pendingDiagnosticState == other.pendingDiagnosticState

    # PendingDiagnosticStateT
    def _UnPack(self, pendingDiagnosticState):
        if pendingDiagnosticState is None:
            return
        self.pendingDiagnosticState = pendingDiagnosticState.PendingDiagnosticState()

    # PendingDiagnosticStateT
    def Pack(self, builder):
        PendingDiagnosticStateStart(builder)
        PendingDiagnosticStateAddPendingDiagnosticState(builder, self.pendingDiagnosticState)
        pendingDiagnosticState = PendingDiagnosticStateEnd(builder)
        return pendingDiagnosticState
