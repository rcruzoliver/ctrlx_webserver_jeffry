# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the required element to request the main diagnostic text of a diagnostic log.
class GetMainDiagnosisText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetMainDiagnosisText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetMainDiagnosisText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetMainDiagnosisText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Main diagnostic number.
    # GetMainDiagnosisText
    def MainDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GetMainDiagnosisTextStart(builder): builder.StartObject(1)
def Start(builder):
    return GetMainDiagnosisTextStart(builder)
def GetMainDiagnosisTextAddMainDiagnosisNumber(builder, mainDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainDiagnosisNumber), 0)
def AddMainDiagnosisNumber(builder, mainDiagnosisNumber):
    return GetMainDiagnosisTextAddMainDiagnosisNumber(builder, mainDiagnosisNumber)
def GetMainDiagnosisTextEnd(builder): return builder.EndObject()
def End(builder):
    return GetMainDiagnosisTextEnd(builder)

class GetMainDiagnosisTextT(object):

    # GetMainDiagnosisTextT
    def __init__(self):
        self.mainDiagnosisNumber = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        getMainDiagnosisText = GetMainDiagnosisText()
        getMainDiagnosisText.Init(buf, pos)
        return cls.InitFromObj(getMainDiagnosisText)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, getMainDiagnosisText):
        x = GetMainDiagnosisTextT()
        x._UnPack(getMainDiagnosisText)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainDiagnosisNumber == other.mainDiagnosisNumber

    # GetMainDiagnosisTextT
    def _UnPack(self, getMainDiagnosisText):
        if getMainDiagnosisText is None:
            return
        self.mainDiagnosisNumber = getMainDiagnosisText.MainDiagnosisNumber()

    # GetMainDiagnosisTextT
    def Pack(self, builder):
        if self.mainDiagnosisNumber is not None:
            mainDiagnosisNumber = builder.CreateString(self.mainDiagnosisNumber)
        GetMainDiagnosisTextStart(builder)
        if self.mainDiagnosisNumber is not None:
            GetMainDiagnosisTextAddMainDiagnosisNumber(builder, mainDiagnosisNumber)
        getMainDiagnosisText = GetMainDiagnosisTextEnd(builder)
        return getMainDiagnosisText
