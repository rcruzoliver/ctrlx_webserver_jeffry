# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the required elements to request the diagnostic text of a diagnostic log.
class GetDetailedDiagnosisText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetDetailedDiagnosisText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetDetailedDiagnosisText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetDetailedDiagnosisText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Detailed diagnostic number of the diagnostic log.
    # GetDetailedDiagnosisText
    def DetailedDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Related main diagnostic number of the diagnostic log.
    # GetDetailedDiagnosisText
    def RelatedMainDiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GetDetailedDiagnosisTextStart(builder): builder.StartObject(2)
def Start(builder):
    return GetDetailedDiagnosisTextStart(builder)
def GetDetailedDiagnosisTextAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(detailedDiagnosisNumber), 0)
def AddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber):
    return GetDetailedDiagnosisTextAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber)
def GetDetailedDiagnosisTextAddRelatedMainDiagnosisNumber(builder, relatedMainDiagnosisNumber): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(relatedMainDiagnosisNumber), 0)
def AddRelatedMainDiagnosisNumber(builder, relatedMainDiagnosisNumber):
    return GetDetailedDiagnosisTextAddRelatedMainDiagnosisNumber(builder, relatedMainDiagnosisNumber)
def GetDetailedDiagnosisTextEnd(builder): return builder.EndObject()
def End(builder):
    return GetDetailedDiagnosisTextEnd(builder)

class GetDetailedDiagnosisTextT(object):

    # GetDetailedDiagnosisTextT
    def __init__(self):
        self.detailedDiagnosisNumber = None  # type: str
        self.relatedMainDiagnosisNumber = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        getDetailedDiagnosisText = GetDetailedDiagnosisText()
        getDetailedDiagnosisText.Init(buf, pos)
        return cls.InitFromObj(getDetailedDiagnosisText)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, getDetailedDiagnosisText):
        x = GetDetailedDiagnosisTextT()
        x._UnPack(getDetailedDiagnosisText)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.detailedDiagnosisNumber == other.detailedDiagnosisNumber and \
            self.relatedMainDiagnosisNumber == other.relatedMainDiagnosisNumber

    # GetDetailedDiagnosisTextT
    def _UnPack(self, getDetailedDiagnosisText):
        if getDetailedDiagnosisText is None:
            return
        self.detailedDiagnosisNumber = getDetailedDiagnosisText.DetailedDiagnosisNumber()
        self.relatedMainDiagnosisNumber = getDetailedDiagnosisText.RelatedMainDiagnosisNumber()

    # GetDetailedDiagnosisTextT
    def Pack(self, builder):
        if self.detailedDiagnosisNumber is not None:
            detailedDiagnosisNumber = builder.CreateString(self.detailedDiagnosisNumber)
        if self.relatedMainDiagnosisNumber is not None:
            relatedMainDiagnosisNumber = builder.CreateString(self.relatedMainDiagnosisNumber)
        GetDetailedDiagnosisTextStart(builder)
        if self.detailedDiagnosisNumber is not None:
            GetDetailedDiagnosisTextAddDetailedDiagnosisNumber(builder, detailedDiagnosisNumber)
        if self.relatedMainDiagnosisNumber is not None:
            GetDetailedDiagnosisTextAddRelatedMainDiagnosisNumber(builder, relatedMainDiagnosisNumber)
        getDetailedDiagnosisText = GetDetailedDiagnosisTextEnd(builder)
        return getDetailedDiagnosisText
