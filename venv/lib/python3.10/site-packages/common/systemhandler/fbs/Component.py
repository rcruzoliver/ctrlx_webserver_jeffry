# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Information about the component
class Component(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Component()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsComponent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Component
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of component, must be unique
    # Component
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current state of component
    # Component
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.systemhandler.fbs.State import State
            obj = State()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Metadata information about the Data Layer child node which will be created for the component
    # Component
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Metadata import Metadata
            obj = Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ComponentStart(builder): builder.StartObject(3)
def Start(builder):
    return ComponentStart(builder)
def ComponentAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ComponentAddName(builder, name)
def ComponentAddState(builder, state): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)
def AddState(builder, state):
    return ComponentAddState(builder, state)
def ComponentAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def AddMetadata(builder, metadata):
    return ComponentAddMetadata(builder, metadata)
def ComponentEnd(builder): return builder.EndObject()
def End(builder):
    return ComponentEnd(builder)
import comm.datalayer.Metadata
import common.systemhandler.fbs.State
try:
    from typing import Optional
except:
    pass

class ComponentT(object):

    # ComponentT
    def __init__(self):
        self.name = None  # type: str
        self.state = None  # type: Optional[common.systemhandler.fbs.State.StateT]
        self.metadata = None  # type: Optional[comm.datalayer.Metadata.MetadataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        component = Component()
        component.Init(buf, pos)
        return cls.InitFromObj(component)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, component):
        x = ComponentT()
        x._UnPack(component)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.state == other.state and \
            self.metadata == other.metadata

    # ComponentT
    def _UnPack(self, component):
        if component is None:
            return
        self.name = component.Name()
        if component.State() is not None:
            self.state = common.systemhandler.fbs.State.StateT.InitFromObj(component.State())
        if component.Metadata() is not None:
            self.metadata = comm.datalayer.Metadata.MetadataT.InitFromObj(component.Metadata())

    # ComponentT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.state is not None:
            state = self.state.Pack(builder)
        if self.metadata is not None:
            metadata = self.metadata.Pack(builder)
        ComponentStart(builder)
        if self.name is not None:
            ComponentAddName(builder, name)
        if self.state is not None:
            ComponentAddState(builder, state)
        if self.metadata is not None:
            ComponentAddMetadata(builder, metadata)
        component = ComponentEnd(builder)
        return component
