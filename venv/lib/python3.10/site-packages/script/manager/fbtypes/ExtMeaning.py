# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# One pair with value and meaning for the internal kinematics pose (used for commanding)
class ExtMeaning(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExtMeaning()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExtMeaning(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExtMeaning
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # related meaning of the value
    # possible meanings are: "X", "Y", "Z", "AX1", "AX2", "AX3", "AX4", "AX5", "AX6", "AX7", "AX8", "AX9", "AX10", "AX11" "AX12", "AX13", "AX14", "AX15", "AX16", "EUL1_ZYZ_I", "EUL2_ZYZ_I", "EUL3_ZYZ_I", "EUL1_XYZ_E", "EUL2_XYZ_E", "EUL3_XYZ_E", "EUL1_ZYX_E", "EUL2_ZYX_E", "EUL3_ZYX_E"
    # ExtMeaning
    def Meaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    #  possible attributes are: "UNDEF", "INCR_VALUE", "ABS_VALUE", "SHORT_WAY", "POS_ROT_DIR", "NEG_ROT_DIR"
    # ExtMeaning
    def AddAttributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ExtMeaningStart(builder): builder.StartObject(2)
def Start(builder):
    return ExtMeaningStart(builder)
def ExtMeaningAddMeaning(builder, meaning): builder.PrependInt8Slot(0, meaning, 0)
def AddMeaning(builder, meaning):
    return ExtMeaningAddMeaning(builder, meaning)
def ExtMeaningAddAddAttributes(builder, addAttributes): builder.PrependInt8Slot(1, addAttributes, 0)
def AddAddAttributes(builder, addAttributes):
    return ExtMeaningAddAddAttributes(builder, addAttributes)
def ExtMeaningEnd(builder): return builder.EndObject()
def End(builder):
    return ExtMeaningEnd(builder)

class ExtMeaningT(object):

    # ExtMeaningT
    def __init__(self):
        self.meaning = 0  # type: int
        self.addAttributes = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        extMeaning = ExtMeaning()
        extMeaning.Init(buf, pos)
        return cls.InitFromObj(extMeaning)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, extMeaning):
        x = ExtMeaningT()
        x._UnPack(extMeaning)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.meaning == other.meaning and \
            self.addAttributes == other.addAttributes

    # ExtMeaningT
    def _UnPack(self, extMeaning):
        if extMeaning is None:
            return
        self.meaning = extMeaning.Meaning()
        self.addAttributes = extMeaning.AddAttributes()

    # ExtMeaningT
    def Pack(self, builder):
        ExtMeaningStart(builder)
        ExtMeaningAddMeaning(builder, self.meaning)
        ExtMeaningAddAddAttributes(builder, self.addAttributes)
        extMeaning = ExtMeaningEnd(builder)
        return extMeaning
