# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScriptDescription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScriptDescription()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScriptDescription(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScriptDescription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScriptDescription
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScriptDescription
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScriptDescription
    def Executable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScriptDescription
    def FileEnding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ScriptDescription
    def FileEndingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScriptDescription
    def FileEndingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ScriptDescription
    def License(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScriptDescription
    def LicenseVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScriptDescription
    def LifeCycle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ScriptDescriptionStart(builder): builder.StartObject(7)
def Start(builder):
    return ScriptDescriptionStart(builder)
def ScriptDescriptionAddLanguage(builder, language): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(language), 0)
def AddLanguage(builder, language):
    return ScriptDescriptionAddLanguage(builder, language)
def ScriptDescriptionAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return ScriptDescriptionAddVersion(builder, version)
def ScriptDescriptionAddExecutable(builder, executable): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(executable), 0)
def AddExecutable(builder, executable):
    return ScriptDescriptionAddExecutable(builder, executable)
def ScriptDescriptionAddFileEnding(builder, fileEnding): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fileEnding), 0)
def AddFileEnding(builder, fileEnding):
    return ScriptDescriptionAddFileEnding(builder, fileEnding)
def ScriptDescriptionStartFileEndingVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFileEndingVector(builder, numElems):
    return ScriptDescriptionStartFileEndingVector(builder, numElems)
def ScriptDescriptionAddLicense(builder, license): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(license), 0)
def AddLicense(builder, license):
    return ScriptDescriptionAddLicense(builder, license)
def ScriptDescriptionAddLicenseVersion(builder, licenseVersion): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(licenseVersion), 0)
def AddLicenseVersion(builder, licenseVersion):
    return ScriptDescriptionAddLicenseVersion(builder, licenseVersion)
def ScriptDescriptionAddLifeCycle(builder, lifeCycle): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(lifeCycle), 0)
def AddLifeCycle(builder, lifeCycle):
    return ScriptDescriptionAddLifeCycle(builder, lifeCycle)
def ScriptDescriptionEnd(builder): return builder.EndObject()
def End(builder):
    return ScriptDescriptionEnd(builder)
try:
    from typing import List
except:
    pass

class ScriptDescriptionT(object):

    # ScriptDescriptionT
    def __init__(self):
        self.language = None  # type: str
        self.version = None  # type: str
        self.executable = None  # type: str
        self.fileEnding = None  # type: List[str]
        self.license = None  # type: str
        self.licenseVersion = None  # type: str
        self.lifeCycle = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scriptDescription = ScriptDescription()
        scriptDescription.Init(buf, pos)
        return cls.InitFromObj(scriptDescription)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scriptDescription):
        x = ScriptDescriptionT()
        x._UnPack(scriptDescription)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.language == other.language and \
            self.version == other.version and \
            self.executable == other.executable and \
            self.fileEnding == other.fileEnding and \
            self.license == other.license and \
            self.licenseVersion == other.licenseVersion and \
            self.lifeCycle == other.lifeCycle

    # ScriptDescriptionT
    def _UnPack(self, scriptDescription):
        if scriptDescription is None:
            return
        self.language = scriptDescription.Language()
        self.version = scriptDescription.Version()
        self.executable = scriptDescription.Executable()
        if not scriptDescription.FileEndingIsNone():
            self.fileEnding = []
            for i in range(scriptDescription.FileEndingLength()):
                self.fileEnding.append(scriptDescription.FileEnding(i))
        self.license = scriptDescription.License()
        self.licenseVersion = scriptDescription.LicenseVersion()
        self.lifeCycle = scriptDescription.LifeCycle()

    # ScriptDescriptionT
    def Pack(self, builder):
        if self.language is not None:
            language = builder.CreateString(self.language)
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.executable is not None:
            executable = builder.CreateString(self.executable)
        if self.fileEnding is not None:
            fileEndinglist = []
            for i in range(len(self.fileEnding)):
                fileEndinglist.append(builder.CreateString(self.fileEnding[i]))
            ScriptDescriptionStartFileEndingVector(builder, len(self.fileEnding))
            for i in reversed(range(len(self.fileEnding))):
                builder.PrependUOffsetTRelative(fileEndinglist[i])
            fileEnding = builder.EndVector()
        if self.license is not None:
            license = builder.CreateString(self.license)
        if self.licenseVersion is not None:
            licenseVersion = builder.CreateString(self.licenseVersion)
        if self.lifeCycle is not None:
            lifeCycle = builder.CreateString(self.lifeCycle)
        ScriptDescriptionStart(builder)
        if self.language is not None:
            ScriptDescriptionAddLanguage(builder, language)
        if self.version is not None:
            ScriptDescriptionAddVersion(builder, version)
        if self.executable is not None:
            ScriptDescriptionAddExecutable(builder, executable)
        if self.fileEnding is not None:
            ScriptDescriptionAddFileEnding(builder, fileEnding)
        if self.license is not None:
            ScriptDescriptionAddLicense(builder, license)
        if self.licenseVersion is not None:
            ScriptDescriptionAddLicenseVersion(builder, licenseVersion)
        if self.lifeCycle is not None:
            ScriptDescriptionAddLifeCycle(builder, lifeCycle)
        scriptDescription = ScriptDescriptionEnd(builder)
        return scriptDescription
