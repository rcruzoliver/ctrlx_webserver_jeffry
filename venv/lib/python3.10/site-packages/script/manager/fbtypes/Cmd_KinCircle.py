# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the move 3D circular commands for a kinematics
class Cmd_KinCircle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinCircle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinCircle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinCircle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinCircle
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # commanded target position with meanings
    # Cmd_KinCircle
    def CmdKinPose(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from script.manager.fbtypes.KinCmdPosePair import KinCmdPosePair
            obj = KinCmdPosePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinCircle
    def CmdKinPoseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_KinCircle
    def CmdKinPoseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # commanded circle data with circle meanings
    # Cmd_KinCircle
    def CmdCircleData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from script.manager.fbtypes.KinCmdCircleDataPair import KinCmdCircleDataPair
            obj = KinCmdCircleDataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinCircle
    def CmdCircleDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_KinCircle
    def CmdCircleDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # coordSys for commanded target position
    # Cmd_KinCircle
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dynamic limits for the motion of this command
    # Cmd_KinCircle
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Cmd_KinCircleStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_KinCircleStart(builder)
def Cmd_KinCircleAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinCircleAddBase(builder, base)
def Cmd_KinCircleAddCmdKinPose(builder, cmdKinPose): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmdKinPose), 0)
def AddCmdKinPose(builder, cmdKinPose):
    return Cmd_KinCircleAddCmdKinPose(builder, cmdKinPose)
def Cmd_KinCircleStartCmdKinPoseVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdKinPoseVector(builder, numElems):
    return Cmd_KinCircleStartCmdKinPoseVector(builder, numElems)
def Cmd_KinCircleAddCmdCircleData(builder, cmdCircleData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cmdCircleData), 0)
def AddCmdCircleData(builder, cmdCircleData):
    return Cmd_KinCircleAddCmdCircleData(builder, cmdCircleData)
def Cmd_KinCircleStartCmdCircleDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdCircleDataVector(builder, numElems):
    return Cmd_KinCircleStartCmdCircleDataVector(builder, numElems)
def Cmd_KinCircleAddCoordSys(builder, coordSys): builder.PrependInt8Slot(3, coordSys, 0)
def AddCoordSys(builder, coordSys):
    return Cmd_KinCircleAddCoordSys(builder, coordSys)
def Cmd_KinCircleAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_KinCircleAddLim(builder, lim)
def Cmd_KinCircleEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinCircleEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
import script.manager.fbtypes.KinCmdCircleDataPair
import script.manager.fbtypes.KinCmdPosePair
try:
    from typing import List, Optional
except:
    pass

class Cmd_KinCircleT(object):

    # Cmd_KinCircleT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.cmdKinPose = None  # type: List[script.manager.fbtypes.KinCmdPosePair.KinCmdPosePairT]
        self.cmdCircleData = None  # type: List[script.manager.fbtypes.KinCmdCircleDataPair.KinCmdCircleDataPairT]
        self.coordSys = 0  # type: int
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinCircle = Cmd_KinCircle()
        cmdKinCircle.Init(buf, pos)
        return cls.InitFromObj(cmdKinCircle)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinCircle):
        x = Cmd_KinCircleT()
        x._UnPack(cmdKinCircle)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.cmdKinPose == other.cmdKinPose and \
            self.cmdCircleData == other.cmdCircleData and \
            self.coordSys == other.coordSys and \
            self.lim == other.lim

    # Cmd_KinCircleT
    def _UnPack(self, cmdKinCircle):
        if cmdKinCircle is None:
            return
        if cmdKinCircle.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinCircle.Base())
        if not cmdKinCircle.CmdKinPoseIsNone():
            self.cmdKinPose = []
            for i in range(cmdKinCircle.CmdKinPoseLength()):
                if cmdKinCircle.CmdKinPose(i) is None:
                    self.cmdKinPose.append(None)
                else:
                    kinCmdPosePair_ = script.manager.fbtypes.KinCmdPosePair.KinCmdPosePairT.InitFromObj(cmdKinCircle.CmdKinPose(i))
                    self.cmdKinPose.append(kinCmdPosePair_)
        if not cmdKinCircle.CmdCircleDataIsNone():
            self.cmdCircleData = []
            for i in range(cmdKinCircle.CmdCircleDataLength()):
                if cmdKinCircle.CmdCircleData(i) is None:
                    self.cmdCircleData.append(None)
                else:
                    kinCmdCircleDataPair_ = script.manager.fbtypes.KinCmdCircleDataPair.KinCmdCircleDataPairT.InitFromObj(cmdKinCircle.CmdCircleData(i))
                    self.cmdCircleData.append(kinCmdCircleDataPair_)
        self.coordSys = cmdKinCircle.CoordSys()
        if cmdKinCircle.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdKinCircle.Lim())

    # Cmd_KinCircleT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.cmdKinPose is not None:
            cmdKinPoselist = []
            for i in range(len(self.cmdKinPose)):
                cmdKinPoselist.append(self.cmdKinPose[i].Pack(builder))
            Cmd_KinCircleStartCmdKinPoseVector(builder, len(self.cmdKinPose))
            for i in reversed(range(len(self.cmdKinPose))):
                builder.PrependUOffsetTRelative(cmdKinPoselist[i])
            cmdKinPose = builder.EndVector()
        if self.cmdCircleData is not None:
            cmdCircleDatalist = []
            for i in range(len(self.cmdCircleData)):
                cmdCircleDatalist.append(self.cmdCircleData[i].Pack(builder))
            Cmd_KinCircleStartCmdCircleDataVector(builder, len(self.cmdCircleData))
            for i in reversed(range(len(self.cmdCircleData))):
                builder.PrependUOffsetTRelative(cmdCircleDatalist[i])
            cmdCircleData = builder.EndVector()
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_KinCircleStart(builder)
        if self.base is not None:
            Cmd_KinCircleAddBase(builder, base)
        if self.cmdKinPose is not None:
            Cmd_KinCircleAddCmdKinPose(builder, cmdKinPose)
        if self.cmdCircleData is not None:
            Cmd_KinCircleAddCmdCircleData(builder, cmdCircleData)
        Cmd_KinCircleAddCoordSys(builder, self.coordSys)
        if self.lim is not None:
            Cmd_KinCircleAddLim(builder, lim)
        cmdKinCircle = Cmd_KinCircleEnd(builder)
        return cmdKinCircle
