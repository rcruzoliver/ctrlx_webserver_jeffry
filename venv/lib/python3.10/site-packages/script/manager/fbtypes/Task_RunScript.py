# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Task_RunScript(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Task_RunScript()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTask_RunScript(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Task_RunScript
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Task_RunScript
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Task_RunScript
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Task_RunScript
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Task_RunScript
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Task_RunScriptStart(builder): builder.StartObject(2)
def Start(builder):
    return Task_RunScriptStart(builder)
def Task_RunScriptAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return Task_RunScriptAddName(builder, name)
def Task_RunScriptAddParam(builder, param): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)
def AddParam(builder, param):
    return Task_RunScriptAddParam(builder, param)
def Task_RunScriptStartParamVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartParamVector(builder, numElems):
    return Task_RunScriptStartParamVector(builder, numElems)
def Task_RunScriptEnd(builder): return builder.EndObject()
def End(builder):
    return Task_RunScriptEnd(builder)
try:
    from typing import List
except:
    pass

class Task_RunScriptT(object):

    # Task_RunScriptT
    def __init__(self):
        self.name = None  # type: str
        self.param = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        taskRunScript = Task_RunScript()
        taskRunScript.Init(buf, pos)
        return cls.InitFromObj(taskRunScript)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, taskRunScript):
        x = Task_RunScriptT()
        x._UnPack(taskRunScript)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.param == other.param

    # Task_RunScriptT
    def _UnPack(self, taskRunScript):
        if taskRunScript is None:
            return
        self.name = taskRunScript.Name()
        if not taskRunScript.ParamIsNone():
            self.param = []
            for i in range(taskRunScript.ParamLength()):
                self.param.append(taskRunScript.Param(i))

    # Task_RunScriptT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.param is not None:
            paramlist = []
            for i in range(len(self.param)):
                paramlist.append(builder.CreateString(self.param[i]))
            Task_RunScriptStartParamVector(builder, len(self.param))
            for i in reversed(range(len(self.param))):
                builder.PrependUOffsetTRelative(paramlist[i])
            param = builder.EndVector()
        Task_RunScriptStart(builder)
        if self.name is not None:
            Task_RunScriptAddName(builder, name)
        if self.param is not None:
            Task_RunScriptAddParam(builder, param)
        taskRunScript = Task_RunScriptEnd(builder)
        return taskRunScript
