# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Parameters of the runCalculationPipeline function
class State_AxsRunCalculationPipelineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsRunCalculationPipelineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState_AxsRunCalculationPipelineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State_AxsRunCalculationPipelineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsRunCalculationPipelineData
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_AxsRunCalculationPipelineData
    def PipelineName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_AxsRunCalculationPipelineData
    def SyncMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # State_AxsRunCalculationPipelineData
    def MasterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_AxsRunCalculationPipelineData
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # State_AxsRunCalculationPipelineData
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # State_AxsRunCalculationPipelineData
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State_AxsRunCalculationPipelineData
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def State_AxsRunCalculationPipelineDataStart(builder): builder.StartObject(5)
def Start(builder):
    return State_AxsRunCalculationPipelineDataStart(builder)
def State_AxsRunCalculationPipelineDataAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def AddAxsName(builder, axsName):
    return State_AxsRunCalculationPipelineDataAddAxsName(builder, axsName)
def State_AxsRunCalculationPipelineDataAddPipelineName(builder, pipelineName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pipelineName), 0)
def AddPipelineName(builder, pipelineName):
    return State_AxsRunCalculationPipelineDataAddPipelineName(builder, pipelineName)
def State_AxsRunCalculationPipelineDataAddSyncMode(builder, syncMode): builder.PrependInt8Slot(2, syncMode, 0)
def AddSyncMode(builder, syncMode):
    return State_AxsRunCalculationPipelineDataAddSyncMode(builder, syncMode)
def State_AxsRunCalculationPipelineDataAddMasterName(builder, masterName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(masterName), 0)
def AddMasterName(builder, masterName):
    return State_AxsRunCalculationPipelineDataAddMasterName(builder, masterName)
def State_AxsRunCalculationPipelineDataAddInputs(builder, inputs): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)
def AddInputs(builder, inputs):
    return State_AxsRunCalculationPipelineDataAddInputs(builder, inputs)
def State_AxsRunCalculationPipelineDataStartInputsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartInputsVector(builder, numElems):
    return State_AxsRunCalculationPipelineDataStartInputsVector(builder, numElems)
def State_AxsRunCalculationPipelineDataEnd(builder): return builder.EndObject()
def End(builder):
    return State_AxsRunCalculationPipelineDataEnd(builder)
try:
    from typing import List
except:
    pass

class State_AxsRunCalculationPipelineDataT(object):

    # State_AxsRunCalculationPipelineDataT
    def __init__(self):
        self.axsName = None  # type: str
        self.pipelineName = None  # type: str
        self.syncMode = 0  # type: int
        self.masterName = None  # type: str
        self.inputs = None  # type: List[float]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsRunCalculationPipelineData = State_AxsRunCalculationPipelineData()
        stateAxsRunCalculationPipelineData.Init(buf, pos)
        return cls.InitFromObj(stateAxsRunCalculationPipelineData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateAxsRunCalculationPipelineData):
        x = State_AxsRunCalculationPipelineDataT()
        x._UnPack(stateAxsRunCalculationPipelineData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axsName == other.axsName and \
            self.pipelineName == other.pipelineName and \
            self.syncMode == other.syncMode and \
            self.masterName == other.masterName and \
            self.inputs == other.inputs

    # State_AxsRunCalculationPipelineDataT
    def _UnPack(self, stateAxsRunCalculationPipelineData):
        if stateAxsRunCalculationPipelineData is None:
            return
        self.axsName = stateAxsRunCalculationPipelineData.AxsName()
        self.pipelineName = stateAxsRunCalculationPipelineData.PipelineName()
        self.syncMode = stateAxsRunCalculationPipelineData.SyncMode()
        self.masterName = stateAxsRunCalculationPipelineData.MasterName()
        if not stateAxsRunCalculationPipelineData.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(stateAxsRunCalculationPipelineData.InputsLength()):
                    self.inputs.append(stateAxsRunCalculationPipelineData.Inputs(i))
            else:
                self.inputs = stateAxsRunCalculationPipelineData.InputsAsNumpy()

    # State_AxsRunCalculationPipelineDataT
    def Pack(self, builder):
        if self.axsName is not None:
            axsName = builder.CreateString(self.axsName)
        if self.pipelineName is not None:
            pipelineName = builder.CreateString(self.pipelineName)
        if self.masterName is not None:
            masterName = builder.CreateString(self.masterName)
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                State_AxsRunCalculationPipelineDataStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependFloat64(self.inputs[i])
                inputs = builder.EndVector()
        State_AxsRunCalculationPipelineDataStart(builder)
        if self.axsName is not None:
            State_AxsRunCalculationPipelineDataAddAxsName(builder, axsName)
        if self.pipelineName is not None:
            State_AxsRunCalculationPipelineDataAddPipelineName(builder, pipelineName)
        State_AxsRunCalculationPipelineDataAddSyncMode(builder, self.syncMode)
        if self.masterName is not None:
            State_AxsRunCalculationPipelineDataAddMasterName(builder, masterName)
        if self.inputs is not None:
            State_AxsRunCalculationPipelineDataAddInputs(builder, inputs)
        stateAxsRunCalculationPipelineData = State_AxsRunCalculationPipelineDataEnd(builder)
        return stateAxsRunCalculationPipelineData
