# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinContour(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinContour()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinContour(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinContour
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinContour
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinContour
    def IsStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # Cmd_KinContour
    def PrepCmds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Cmd_KinContourStart(builder): builder.StartObject(3)
def Start(builder):
    return Cmd_KinContourStart(builder)
def Cmd_KinContourAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinContourAddBase(builder, base)
def Cmd_KinContourAddIsStart(builder, isStart): builder.PrependBoolSlot(1, isStart, 1)
def AddIsStart(builder, isStart):
    return Cmd_KinContourAddIsStart(builder, isStart)
def Cmd_KinContourAddPrepCmds(builder, prepCmds): builder.PrependUint32Slot(2, prepCmds, 0)
def AddPrepCmds(builder, prepCmds):
    return Cmd_KinContourAddPrepCmds(builder, prepCmds)
def Cmd_KinContourEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinContourEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Cmd_KinContourT(object):

    # Cmd_KinContourT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.isStart = True  # type: bool
        self.prepCmds = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinContour = Cmd_KinContour()
        cmdKinContour.Init(buf, pos)
        return cls.InitFromObj(cmdKinContour)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinContour):
        x = Cmd_KinContourT()
        x._UnPack(cmdKinContour)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.isStart == other.isStart and \
            self.prepCmds == other.prepCmds

    # Cmd_KinContourT
    def _UnPack(self, cmdKinContour):
        if cmdKinContour is None:
            return
        if cmdKinContour.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinContour.Base())
        self.isStart = cmdKinContour.IsStart()
        self.prepCmds = cmdKinContour.PrepCmds()

    # Cmd_KinContourT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        Cmd_KinContourStart(builder)
        if self.base is not None:
            Cmd_KinContourAddBase(builder, base)
        Cmd_KinContourAddIsStart(builder, self.isStart)
        Cmd_KinContourAddPrepCmds(builder, self.prepCmds)
        cmdKinContour = Cmd_KinContourEnd(builder)
        return cmdKinContour
