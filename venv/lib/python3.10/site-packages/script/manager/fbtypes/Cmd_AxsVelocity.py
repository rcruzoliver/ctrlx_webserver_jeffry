# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_AxsVelocity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_AxsVelocity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_AxsVelocity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_AxsVelocity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_AxsVelocity
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_AxsVelocity
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_AxsVelocity
    def DriveVelMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Cmd_AxsVelocity
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Cmd_AxsVelocity
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Cmd_AxsVelocityStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_AxsVelocityStart(builder)
def Cmd_AxsVelocityAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_AxsVelocityAddBase(builder, base)
def Cmd_AxsVelocityAddVel(builder, vel): builder.PrependFloat64Slot(1, vel, 0.0)
def AddVel(builder, vel):
    return Cmd_AxsVelocityAddVel(builder, vel)
def Cmd_AxsVelocityAddDriveVelMode(builder, driveVelMode): builder.PrependBoolSlot(2, driveVelMode, 0)
def AddDriveVelMode(builder, driveVelMode):
    return Cmd_AxsVelocityAddDriveVelMode(builder, driveVelMode)
def Cmd_AxsVelocityAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 0)
def AddBuffered(builder, buffered):
    return Cmd_AxsVelocityAddBuffered(builder, buffered)
def Cmd_AxsVelocityAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_AxsVelocityAddLim(builder, lim)
def Cmd_AxsVelocityEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_AxsVelocityEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
try:
    from typing import Optional
except:
    pass

class Cmd_AxsVelocityT(object):

    # Cmd_AxsVelocityT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.vel = 0.0  # type: float
        self.driveVelMode = False  # type: bool
        self.buffered = False  # type: bool
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsVelocity = Cmd_AxsVelocity()
        cmdAxsVelocity.Init(buf, pos)
        return cls.InitFromObj(cmdAxsVelocity)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsVelocity):
        x = Cmd_AxsVelocityT()
        x._UnPack(cmdAxsVelocity)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.vel == other.vel and \
            self.driveVelMode == other.driveVelMode and \
            self.buffered == other.buffered and \
            self.lim == other.lim

    # Cmd_AxsVelocityT
    def _UnPack(self, cmdAxsVelocity):
        if cmdAxsVelocity is None:
            return
        if cmdAxsVelocity.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsVelocity.Base())
        self.vel = cmdAxsVelocity.Vel()
        self.driveVelMode = cmdAxsVelocity.DriveVelMode()
        self.buffered = cmdAxsVelocity.Buffered()
        if cmdAxsVelocity.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdAxsVelocity.Lim())

    # Cmd_AxsVelocityT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_AxsVelocityStart(builder)
        if self.base is not None:
            Cmd_AxsVelocityAddBase(builder, base)
        Cmd_AxsVelocityAddVel(builder, self.vel)
        Cmd_AxsVelocityAddDriveVelMode(builder, self.driveVelMode)
        Cmd_AxsVelocityAddBuffered(builder, self.buffered)
        if self.lim is not None:
            Cmd_AxsVelocityAddLim(builder, lim)
        cmdAxsVelocity = Cmd_AxsVelocityEnd(builder)
        return cmdAxsVelocity
