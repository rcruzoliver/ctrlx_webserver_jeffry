# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CmdOpt_KinBlend(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdOpt_KinBlend()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdOpt_KinBlend(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdOpt_KinBlend
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CmdOpt_KinBlend
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.CmdOpt_Base import CmdOpt_Base
            obj = CmdOpt_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CmdOpt_KinBlend
    def Dist1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # CmdOpt_KinBlend
    def Dist2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def CmdOpt_KinBlendStart(builder): builder.StartObject(3)
def Start(builder):
    return CmdOpt_KinBlendStart(builder)
def CmdOpt_KinBlendAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return CmdOpt_KinBlendAddBase(builder, base)
def CmdOpt_KinBlendAddDist1(builder, dist1): builder.PrependFloat64Slot(1, dist1, 0.0)
def AddDist1(builder, dist1):
    return CmdOpt_KinBlendAddDist1(builder, dist1)
def CmdOpt_KinBlendAddDist2(builder, dist2): builder.PrependFloat64Slot(2, dist2, 0.0)
def AddDist2(builder, dist2):
    return CmdOpt_KinBlendAddDist2(builder, dist2)
def CmdOpt_KinBlendEnd(builder): return builder.EndObject()
def End(builder):
    return CmdOpt_KinBlendEnd(builder)
import script.manager.fbtypes.CmdOpt_Base
try:
    from typing import Optional
except:
    pass

class CmdOpt_KinBlendT(object):

    # CmdOpt_KinBlendT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.CmdOpt_Base.CmdOpt_BaseT]
        self.dist1 = 0.0  # type: float
        self.dist2 = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdOptKinBlend = CmdOpt_KinBlend()
        cmdOptKinBlend.Init(buf, pos)
        return cls.InitFromObj(cmdOptKinBlend)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdOptKinBlend):
        x = CmdOpt_KinBlendT()
        x._UnPack(cmdOptKinBlend)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.dist1 == other.dist1 and \
            self.dist2 == other.dist2

    # CmdOpt_KinBlendT
    def _UnPack(self, cmdOptKinBlend):
        if cmdOptKinBlend is None:
            return
        if cmdOptKinBlend.Base() is not None:
            self.base = script.manager.fbtypes.CmdOpt_Base.CmdOpt_BaseT.InitFromObj(cmdOptKinBlend.Base())
        self.dist1 = cmdOptKinBlend.Dist1()
        self.dist2 = cmdOptKinBlend.Dist2()

    # CmdOpt_KinBlendT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        CmdOpt_KinBlendStart(builder)
        if self.base is not None:
            CmdOpt_KinBlendAddBase(builder, base)
        CmdOpt_KinBlendAddDist1(builder, self.dist1)
        CmdOpt_KinBlendAddDist2(builder, self.dist2)
        cmdOptKinBlend = CmdOpt_KinBlendEnd(builder)
        return cmdOptKinBlend
