# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option tool lengths correction for kinematics
class CmdOpt_KinToolLenghts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CmdOpt_KinToolLenghts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmdOpt_KinToolLenghts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CmdOpt_KinToolLenghts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command option base
    # CmdOpt_KinToolLenghts
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.CmdOpt_Base import CmdOpt_Base
            obj = CmdOpt_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # name of the tool lengths corretion
    # CmdOpt_KinToolLenghts
    def SetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CmdOpt_KinToolLenghtsStart(builder): builder.StartObject(2)
def Start(builder):
    return CmdOpt_KinToolLenghtsStart(builder)
def CmdOpt_KinToolLenghtsAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return CmdOpt_KinToolLenghtsAddBase(builder, base)
def CmdOpt_KinToolLenghtsAddSetName(builder, setName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(setName), 0)
def AddSetName(builder, setName):
    return CmdOpt_KinToolLenghtsAddSetName(builder, setName)
def CmdOpt_KinToolLenghtsEnd(builder): return builder.EndObject()
def End(builder):
    return CmdOpt_KinToolLenghtsEnd(builder)
import script.manager.fbtypes.CmdOpt_Base
try:
    from typing import Optional
except:
    pass

class CmdOpt_KinToolLenghtsT(object):

    # CmdOpt_KinToolLenghtsT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.CmdOpt_Base.CmdOpt_BaseT]
        self.setName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdOptKinToolLenghts = CmdOpt_KinToolLenghts()
        cmdOptKinToolLenghts.Init(buf, pos)
        return cls.InitFromObj(cmdOptKinToolLenghts)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdOptKinToolLenghts):
        x = CmdOpt_KinToolLenghtsT()
        x._UnPack(cmdOptKinToolLenghts)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.setName == other.setName

    # CmdOpt_KinToolLenghtsT
    def _UnPack(self, cmdOptKinToolLenghts):
        if cmdOptKinToolLenghts is None:
            return
        if cmdOptKinToolLenghts.Base() is not None:
            self.base = script.manager.fbtypes.CmdOpt_Base.CmdOpt_BaseT.InitFromObj(cmdOptKinToolLenghts.Base())
        self.setName = cmdOptKinToolLenghts.SetName()

    # CmdOpt_KinToolLenghtsT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.setName is not None:
            setName = builder.CreateString(self.setName)
        CmdOpt_KinToolLenghtsStart(builder)
        if self.base is not None:
            CmdOpt_KinToolLenghtsAddBase(builder, base)
        if self.setName is not None:
            CmdOpt_KinToolLenghtsAddSetName(builder, setName)
        cmdOptKinToolLenghts = CmdOpt_KinToolLenghtsEnd(builder)
        return cmdOptKinToolLenghts
