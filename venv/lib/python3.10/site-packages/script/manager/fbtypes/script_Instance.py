# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class script_Instance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = script_Instance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsscript_Instance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # script_Instance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # script_Instance
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # script_Instance
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def script_InstanceStart(builder): builder.StartObject(2)
def Start(builder):
    return script_InstanceStart(builder)
def script_InstanceAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return script_InstanceAddName(builder, name)
def script_InstanceAddLanguage(builder, language): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(language), 0)
def AddLanguage(builder, language):
    return script_InstanceAddLanguage(builder, language)
def script_InstanceEnd(builder): return builder.EndObject()
def End(builder):
    return script_InstanceEnd(builder)

class script_InstanceT(object):

    # script_InstanceT
    def __init__(self):
        self.name = None  # type: str
        self.language = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scriptInstance = script_Instance()
        scriptInstance.Init(buf, pos)
        return cls.InitFromObj(scriptInstance)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scriptInstance):
        x = script_InstanceT()
        x._UnPack(scriptInstance)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.name == other.name and \
            self.language == other.language

    # script_InstanceT
    def _UnPack(self, scriptInstance):
        if scriptInstance is None:
            return
        self.name = scriptInstance.Name()
        self.language = scriptInstance.Language()

    # script_InstanceT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.language is not None:
            language = builder.CreateString(self.language)
        script_InstanceStart(builder)
        if self.name is not None:
            script_InstanceAddName(builder, name)
        if self.language is not None:
            script_InstanceAddLanguage(builder, language)
        scriptInstance = script_InstanceEnd(builder)
        return scriptInstance
