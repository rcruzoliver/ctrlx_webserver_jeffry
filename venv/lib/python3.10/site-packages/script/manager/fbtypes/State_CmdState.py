# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_CmdState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_CmdState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState_CmdState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State_CmdState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_CmdState
    def ObjName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_CmdState
    def CmdId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def State_CmdStateStart(builder): builder.StartObject(2)
def Start(builder):
    return State_CmdStateStart(builder)
def State_CmdStateAddObjName(builder, objName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objName), 0)
def AddObjName(builder, objName):
    return State_CmdStateAddObjName(builder, objName)
def State_CmdStateAddCmdId(builder, cmdId): builder.PrependUint64Slot(1, cmdId, 0)
def AddCmdId(builder, cmdId):
    return State_CmdStateAddCmdId(builder, cmdId)
def State_CmdStateEnd(builder): return builder.EndObject()
def End(builder):
    return State_CmdStateEnd(builder)

class State_CmdStateT(object):

    # State_CmdStateT
    def __init__(self):
        self.objName = None  # type: str
        self.cmdId = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateCmdState = State_CmdState()
        stateCmdState.Init(buf, pos)
        return cls.InitFromObj(stateCmdState)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateCmdState):
        x = State_CmdStateT()
        x._UnPack(stateCmdState)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.objName == other.objName and \
            self.cmdId == other.cmdId

    # State_CmdStateT
    def _UnPack(self, stateCmdState):
        if stateCmdState is None:
            return
        self.objName = stateCmdState.ObjName()
        self.cmdId = stateCmdState.CmdId()

    # State_CmdStateT
    def Pack(self, builder):
        if self.objName is not None:
            objName = builder.CreateString(self.objName)
        State_CmdStateStart(builder)
        if self.objName is not None:
            State_CmdStateAddObjName(builder, objName)
        State_CmdStateAddCmdId(builder, self.cmdId)
        stateCmdState = State_CmdStateEnd(builder)
        return stateCmdState
