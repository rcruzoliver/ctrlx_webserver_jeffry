# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_AxsPos(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_AxsPos()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_AxsPos(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_AxsPos
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_AxsPos
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_AxsPos
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_AxsPos
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Cmd_AxsPos
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Cmd_AxsPosStart(builder): builder.StartObject(4)
def Start(builder):
    return Cmd_AxsPosStart(builder)
def Cmd_AxsPosAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_AxsPosAddBase(builder, base)
def Cmd_AxsPosAddPos(builder, pos): builder.PrependFloat64Slot(1, pos, 0.0)
def AddPos(builder, pos):
    return Cmd_AxsPosAddPos(builder, pos)
def Cmd_AxsPosAddBuffered(builder, buffered): builder.PrependBoolSlot(2, buffered, 0)
def AddBuffered(builder, buffered):
    return Cmd_AxsPosAddBuffered(builder, buffered)
def Cmd_AxsPosAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_AxsPosAddLim(builder, lim)
def Cmd_AxsPosEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_AxsPosEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
try:
    from typing import Optional
except:
    pass

class Cmd_AxsPosT(object):

    # Cmd_AxsPosT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.pos = 0.0  # type: float
        self.buffered = False  # type: bool
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsPos = Cmd_AxsPos()
        cmdAxsPos.Init(buf, pos)
        return cls.InitFromObj(cmdAxsPos)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsPos):
        x = Cmd_AxsPosT()
        x._UnPack(cmdAxsPos)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.pos == other.pos and \
            self.buffered == other.buffered and \
            self.lim == other.lim

    # Cmd_AxsPosT
    def _UnPack(self, cmdAxsPos):
        if cmdAxsPos is None:
            return
        if cmdAxsPos.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsPos.Base())
        self.pos = cmdAxsPos.Pos()
        self.buffered = cmdAxsPos.Buffered()
        if cmdAxsPos.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdAxsPos.Lim())

    # Cmd_AxsPosT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_AxsPosStart(builder)
        if self.base is not None:
            Cmd_AxsPosAddBase(builder, base)
        Cmd_AxsPosAddPos(builder, self.pos)
        Cmd_AxsPosAddBuffered(builder, self.buffered)
        if self.lim is not None:
            Cmd_AxsPosAddLim(builder, lim)
        cmdAxsPos = Cmd_AxsPosEnd(builder)
        return cmdAxsPos
