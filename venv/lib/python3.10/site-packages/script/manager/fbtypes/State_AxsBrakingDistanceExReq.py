# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_AxsBrakingDistanceExReq(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsBrakingDistanceExReq()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState_AxsBrakingDistanceExReq(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State_AxsBrakingDistanceExReq
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsBrakingDistanceExReq
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_AxsBrakingDistanceExReq
    def SelectedTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # State_AxsBrakingDistanceExReq
    def SelectedTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # State_AxsBrakingDistanceExReq
    def SelectedTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State_AxsBrakingDistanceExReq
    def SelectedTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def State_AxsBrakingDistanceExReqStart(builder): builder.StartObject(2)
def Start(builder):
    return State_AxsBrakingDistanceExReqStart(builder)
def State_AxsBrakingDistanceExReqAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def AddAxsName(builder, axsName):
    return State_AxsBrakingDistanceExReqAddAxsName(builder, axsName)
def State_AxsBrakingDistanceExReqAddSelectedTypes(builder, selectedTypes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selectedTypes), 0)
def AddSelectedTypes(builder, selectedTypes):
    return State_AxsBrakingDistanceExReqAddSelectedTypes(builder, selectedTypes)
def State_AxsBrakingDistanceExReqStartSelectedTypesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartSelectedTypesVector(builder, numElems):
    return State_AxsBrakingDistanceExReqStartSelectedTypesVector(builder, numElems)
def State_AxsBrakingDistanceExReqEnd(builder): return builder.EndObject()
def End(builder):
    return State_AxsBrakingDistanceExReqEnd(builder)
try:
    from typing import List
except:
    pass

class State_AxsBrakingDistanceExReqT(object):

    # State_AxsBrakingDistanceExReqT
    def __init__(self):
        self.axsName = None  # type: str
        self.selectedTypes = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsBrakingDistanceExReq = State_AxsBrakingDistanceExReq()
        stateAxsBrakingDistanceExReq.Init(buf, pos)
        return cls.InitFromObj(stateAxsBrakingDistanceExReq)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateAxsBrakingDistanceExReq):
        x = State_AxsBrakingDistanceExReqT()
        x._UnPack(stateAxsBrakingDistanceExReq)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.axsName == other.axsName and \
            self.selectedTypes == other.selectedTypes

    # State_AxsBrakingDistanceExReqT
    def _UnPack(self, stateAxsBrakingDistanceExReq):
        if stateAxsBrakingDistanceExReq is None:
            return
        self.axsName = stateAxsBrakingDistanceExReq.AxsName()
        if not stateAxsBrakingDistanceExReq.SelectedTypesIsNone():
            if np is None:
                self.selectedTypes = []
                for i in range(stateAxsBrakingDistanceExReq.SelectedTypesLength()):
                    self.selectedTypes.append(stateAxsBrakingDistanceExReq.SelectedTypes(i))
            else:
                self.selectedTypes = stateAxsBrakingDistanceExReq.SelectedTypesAsNumpy()

    # State_AxsBrakingDistanceExReqT
    def Pack(self, builder):
        if self.axsName is not None:
            axsName = builder.CreateString(self.axsName)
        if self.selectedTypes is not None:
            if np is not None and type(self.selectedTypes) is np.ndarray:
                selectedTypes = builder.CreateNumpyVector(self.selectedTypes)
            else:
                State_AxsBrakingDistanceExReqStartSelectedTypesVector(builder, len(self.selectedTypes))
                for i in reversed(range(len(self.selectedTypes))):
                    builder.PrependByte(self.selectedTypes[i])
                selectedTypes = builder.EndVector()
        State_AxsBrakingDistanceExReqStart(builder)
        if self.axsName is not None:
            State_AxsBrakingDistanceExReqAddAxsName(builder, axsName)
        if self.selectedTypes is not None:
            State_AxsBrakingDistanceExReqAddSelectedTypes(builder, selectedTypes)
        stateAxsBrakingDistanceExReq = State_AxsBrakingDistanceExReqEnd(builder)
        return stateAxsBrakingDistanceExReq
