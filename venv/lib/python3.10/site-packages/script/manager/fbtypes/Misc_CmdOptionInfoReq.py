# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Misc_CmdOptionInfoReq(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_CmdOptionInfoReq()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMisc_CmdOptionInfoReq(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Misc_CmdOptionInfoReq
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_CmdOptionInfoReq
    def CmdName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_CmdOptionInfoReq
    def ObjType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Misc_CmdOptionInfoReq
    def CmdType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Misc_CmdOptionInfoReqStart(builder): builder.StartObject(3)
def Start(builder):
    return Misc_CmdOptionInfoReqStart(builder)
def Misc_CmdOptionInfoReqAddCmdName(builder, cmdName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmdName), 0)
def AddCmdName(builder, cmdName):
    return Misc_CmdOptionInfoReqAddCmdName(builder, cmdName)
def Misc_CmdOptionInfoReqAddObjType(builder, objType): builder.PrependInt8Slot(1, objType, 0)
def AddObjType(builder, objType):
    return Misc_CmdOptionInfoReqAddObjType(builder, objType)
def Misc_CmdOptionInfoReqAddCmdType(builder, cmdType): builder.PrependInt8Slot(2, cmdType, 0)
def AddCmdType(builder, cmdType):
    return Misc_CmdOptionInfoReqAddCmdType(builder, cmdType)
def Misc_CmdOptionInfoReqEnd(builder): return builder.EndObject()
def End(builder):
    return Misc_CmdOptionInfoReqEnd(builder)

class Misc_CmdOptionInfoReqT(object):

    # Misc_CmdOptionInfoReqT
    def __init__(self):
        self.cmdName = None  # type: str
        self.objType = 0  # type: int
        self.cmdType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscCmdOptionInfoReq = Misc_CmdOptionInfoReq()
        miscCmdOptionInfoReq.Init(buf, pos)
        return cls.InitFromObj(miscCmdOptionInfoReq)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, miscCmdOptionInfoReq):
        x = Misc_CmdOptionInfoReqT()
        x._UnPack(miscCmdOptionInfoReq)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.cmdName == other.cmdName and \
            self.objType == other.objType and \
            self.cmdType == other.cmdType

    # Misc_CmdOptionInfoReqT
    def _UnPack(self, miscCmdOptionInfoReq):
        if miscCmdOptionInfoReq is None:
            return
        self.cmdName = miscCmdOptionInfoReq.CmdName()
        self.objType = miscCmdOptionInfoReq.ObjType()
        self.cmdType = miscCmdOptionInfoReq.CmdType()

    # Misc_CmdOptionInfoReqT
    def Pack(self, builder):
        if self.cmdName is not None:
            cmdName = builder.CreateString(self.cmdName)
        Misc_CmdOptionInfoReqStart(builder)
        if self.cmdName is not None:
            Misc_CmdOptionInfoReqAddCmdName(builder, cmdName)
        Misc_CmdOptionInfoReqAddObjType(builder, self.objType)
        Misc_CmdOptionInfoReqAddCmdType(builder, self.cmdType)
        miscCmdOptionInfoReq = Misc_CmdOptionInfoReqEnd(builder)
        return miscCmdOptionInfoReq
