# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Packed pair of target position meaning and attribute
class ExtCircleMeaning(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExtCircleMeaning()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExtCircleMeaning(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExtCircleMeaning
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # related meaning of the value
    # possible meanings are: "RADIUS", "CP_X", "CP_Y", "CP_Z", "IP_X", "IP_Y", "IP_Z", "REV"
    # ExtCircleMeaning
    def Meaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # attributes for the target position meaning
    # possible meanings are: "UNDEF", "INCR_VALUE", "ABS_VALUE", "SHORT_WAY", "POS_ROT_DIR", "NEG_ROT_DIR"
    # ExtCircleMeaning
    def AddAttributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ExtCircleMeaningStart(builder): builder.StartObject(2)
def Start(builder):
    return ExtCircleMeaningStart(builder)
def ExtCircleMeaningAddMeaning(builder, meaning): builder.PrependInt8Slot(0, meaning, 0)
def AddMeaning(builder, meaning):
    return ExtCircleMeaningAddMeaning(builder, meaning)
def ExtCircleMeaningAddAddAttributes(builder, addAttributes): builder.PrependInt8Slot(1, addAttributes, 0)
def AddAddAttributes(builder, addAttributes):
    return ExtCircleMeaningAddAddAttributes(builder, addAttributes)
def ExtCircleMeaningEnd(builder): return builder.EndObject()
def End(builder):
    return ExtCircleMeaningEnd(builder)

class ExtCircleMeaningT(object):

    # ExtCircleMeaningT
    def __init__(self):
        self.meaning = 0  # type: int
        self.addAttributes = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        extCircleMeaning = ExtCircleMeaning()
        extCircleMeaning.Init(buf, pos)
        return cls.InitFromObj(extCircleMeaning)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, extCircleMeaning):
        x = ExtCircleMeaningT()
        x._UnPack(extCircleMeaning)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.meaning == other.meaning and \
            self.addAttributes == other.addAttributes

    # ExtCircleMeaningT
    def _UnPack(self, extCircleMeaning):
        if extCircleMeaning is None:
            return
        self.meaning = extCircleMeaning.Meaning()
        self.addAttributes = extCircleMeaning.AddAttributes()

    # ExtCircleMeaningT
    def Pack(self, builder):
        ExtCircleMeaningStart(builder)
        ExtCircleMeaningAddMeaning(builder, self.meaning)
        ExtCircleMeaningAddAddAttributes(builder, self.addAttributes)
        extCircleMeaning = ExtCircleMeaningEnd(builder)
        return extCircleMeaning
