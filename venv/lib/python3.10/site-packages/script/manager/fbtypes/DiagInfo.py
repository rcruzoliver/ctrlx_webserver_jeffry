# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DiagInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiagInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DiagInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DiagInfo
    def LastMainDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DiagInfo
    def LastDetailDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # DiagInfo
    def LastErrText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DiagInfo
    def LastErrTrace(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DiagInfo
    def LastErrTraceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DiagInfo
    def LastErrTraceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def DiagInfoStart(builder): builder.StartObject(4)
def Start(builder):
    return DiagInfoStart(builder)
def DiagInfoAddLastMainDiag(builder, lastMainDiag): builder.PrependUint32Slot(0, lastMainDiag, 0)
def AddLastMainDiag(builder, lastMainDiag):
    return DiagInfoAddLastMainDiag(builder, lastMainDiag)
def DiagInfoAddLastDetailDiag(builder, lastDetailDiag): builder.PrependUint32Slot(1, lastDetailDiag, 0)
def AddLastDetailDiag(builder, lastDetailDiag):
    return DiagInfoAddLastDetailDiag(builder, lastDetailDiag)
def DiagInfoAddLastErrText(builder, lastErrText): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lastErrText), 0)
def AddLastErrText(builder, lastErrText):
    return DiagInfoAddLastErrText(builder, lastErrText)
def DiagInfoAddLastErrTrace(builder, lastErrTrace): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lastErrTrace), 0)
def AddLastErrTrace(builder, lastErrTrace):
    return DiagInfoAddLastErrTrace(builder, lastErrTrace)
def DiagInfoStartLastErrTraceVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartLastErrTraceVector(builder, numElems):
    return DiagInfoStartLastErrTraceVector(builder, numElems)
def DiagInfoEnd(builder): return builder.EndObject()
def End(builder):
    return DiagInfoEnd(builder)
try:
    from typing import List
except:
    pass

class DiagInfoT(object):

    # DiagInfoT
    def __init__(self):
        self.lastMainDiag = 0  # type: int
        self.lastDetailDiag = 0  # type: int
        self.lastErrText = None  # type: str
        self.lastErrTrace = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagInfo = DiagInfo()
        diagInfo.Init(buf, pos)
        return cls.InitFromObj(diagInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diagInfo):
        x = DiagInfoT()
        x._UnPack(diagInfo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.lastMainDiag == other.lastMainDiag and \
            self.lastDetailDiag == other.lastDetailDiag and \
            self.lastErrText == other.lastErrText and \
            self.lastErrTrace == other.lastErrTrace

    # DiagInfoT
    def _UnPack(self, diagInfo):
        if diagInfo is None:
            return
        self.lastMainDiag = diagInfo.LastMainDiag()
        self.lastDetailDiag = diagInfo.LastDetailDiag()
        self.lastErrText = diagInfo.LastErrText()
        if not diagInfo.LastErrTraceIsNone():
            self.lastErrTrace = []
            for i in range(diagInfo.LastErrTraceLength()):
                self.lastErrTrace.append(diagInfo.LastErrTrace(i))

    # DiagInfoT
    def Pack(self, builder):
        if self.lastErrText is not None:
            lastErrText = builder.CreateString(self.lastErrText)
        if self.lastErrTrace is not None:
            lastErrTracelist = []
            for i in range(len(self.lastErrTrace)):
                lastErrTracelist.append(builder.CreateString(self.lastErrTrace[i]))
            DiagInfoStartLastErrTraceVector(builder, len(self.lastErrTrace))
            for i in reversed(range(len(self.lastErrTrace))):
                builder.PrependUOffsetTRelative(lastErrTracelist[i])
            lastErrTrace = builder.EndVector()
        DiagInfoStart(builder)
        DiagInfoAddLastMainDiag(builder, self.lastMainDiag)
        DiagInfoAddLastDetailDiag(builder, self.lastDetailDiag)
        if self.lastErrText is not None:
            DiagInfoAddLastErrText(builder, lastErrText)
        if self.lastErrTrace is not None:
            DiagInfoAddLastErrTrace(builder, lastErrTrace)
        diagInfo = DiagInfoEnd(builder)
        return diagInfo
