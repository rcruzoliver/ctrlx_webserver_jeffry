# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinMoveEx(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinMoveEx()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinMoveEx(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinMoveEx
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinMoveEx
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # commanded target position with meanings
    # Cmd_KinMoveEx
    def CmdKinPose(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from script.manager.fbtypes.KinCmdPosePair import KinCmdPosePair
            obj = KinCmdPosePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinMoveEx
    def CmdKinPoseLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_KinMoveEx
    def CmdKinPoseIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # coordSys for commanded target position
    # Cmd_KinMoveEx
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # dynamic limits for the motion of this command
    # Cmd_KinMoveEx
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # buffered or unbuffered command
    # Cmd_KinMoveEx
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def Cmd_KinMoveExStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_KinMoveExStart(builder)
def Cmd_KinMoveExAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinMoveExAddBase(builder, base)
def Cmd_KinMoveExAddCmdKinPose(builder, cmdKinPose): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmdKinPose), 0)
def AddCmdKinPose(builder, cmdKinPose):
    return Cmd_KinMoveExAddCmdKinPose(builder, cmdKinPose)
def Cmd_KinMoveExStartCmdKinPoseVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCmdKinPoseVector(builder, numElems):
    return Cmd_KinMoveExStartCmdKinPoseVector(builder, numElems)
def Cmd_KinMoveExAddCoordSys(builder, coordSys): builder.PrependInt8Slot(2, coordSys, 0)
def AddCoordSys(builder, coordSys):
    return Cmd_KinMoveExAddCoordSys(builder, coordSys)
def Cmd_KinMoveExAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_KinMoveExAddLim(builder, lim)
def Cmd_KinMoveExAddBuffered(builder, buffered): builder.PrependBoolSlot(4, buffered, 1)
def AddBuffered(builder, buffered):
    return Cmd_KinMoveExAddBuffered(builder, buffered)
def Cmd_KinMoveExEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinMoveExEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
import script.manager.fbtypes.KinCmdPosePair
try:
    from typing import List, Optional
except:
    pass

class Cmd_KinMoveExT(object):

    # Cmd_KinMoveExT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.cmdKinPose = None  # type: List[script.manager.fbtypes.KinCmdPosePair.KinCmdPosePairT]
        self.coordSys = 0  # type: int
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinMoveEx = Cmd_KinMoveEx()
        cmdKinMoveEx.Init(buf, pos)
        return cls.InitFromObj(cmdKinMoveEx)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinMoveEx):
        x = Cmd_KinMoveExT()
        x._UnPack(cmdKinMoveEx)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.cmdKinPose == other.cmdKinPose and \
            self.coordSys == other.coordSys and \
            self.lim == other.lim and \
            self.buffered == other.buffered

    # Cmd_KinMoveExT
    def _UnPack(self, cmdKinMoveEx):
        if cmdKinMoveEx is None:
            return
        if cmdKinMoveEx.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinMoveEx.Base())
        if not cmdKinMoveEx.CmdKinPoseIsNone():
            self.cmdKinPose = []
            for i in range(cmdKinMoveEx.CmdKinPoseLength()):
                if cmdKinMoveEx.CmdKinPose(i) is None:
                    self.cmdKinPose.append(None)
                else:
                    kinCmdPosePair_ = script.manager.fbtypes.KinCmdPosePair.KinCmdPosePairT.InitFromObj(cmdKinMoveEx.CmdKinPose(i))
                    self.cmdKinPose.append(kinCmdPosePair_)
        self.coordSys = cmdKinMoveEx.CoordSys()
        if cmdKinMoveEx.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdKinMoveEx.Lim())
        self.buffered = cmdKinMoveEx.Buffered()

    # Cmd_KinMoveExT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.cmdKinPose is not None:
            cmdKinPoselist = []
            for i in range(len(self.cmdKinPose)):
                cmdKinPoselist.append(self.cmdKinPose[i].Pack(builder))
            Cmd_KinMoveExStartCmdKinPoseVector(builder, len(self.cmdKinPose))
            for i in reversed(range(len(self.cmdKinPose))):
                builder.PrependUOffsetTRelative(cmdKinPoselist[i])
            cmdKinPose = builder.EndVector()
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_KinMoveExStart(builder)
        if self.base is not None:
            Cmd_KinMoveExAddBase(builder, base)
        if self.cmdKinPose is not None:
            Cmd_KinMoveExAddCmdKinPose(builder, cmdKinPose)
        Cmd_KinMoveExAddCoordSys(builder, self.coordSys)
        if self.lim is not None:
            Cmd_KinMoveExAddLim(builder, lim)
        Cmd_KinMoveExAddBuffered(builder, self.buffered)
        cmdKinMoveEx = Cmd_KinMoveExEnd(builder)
        return cmdKinMoveEx
