# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Misc_SetOverride(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_SetOverride()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMisc_SetOverride(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Misc_SetOverride
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_SetOverride
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Misc_SetOverride
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Misc_SetOverrideStart(builder): builder.StartObject(2)
def Start(builder):
    return Misc_SetOverrideStart(builder)
def Misc_SetOverrideAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Misc_SetOverrideAddBase(builder, base)
def Misc_SetOverrideAddValue(builder, value): builder.PrependFloat64Slot(1, value, 0.0)
def AddValue(builder, value):
    return Misc_SetOverrideAddValue(builder, value)
def Misc_SetOverrideEnd(builder): return builder.EndObject()
def End(builder):
    return Misc_SetOverrideEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Misc_SetOverrideT(object):

    # Misc_SetOverrideT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.value = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscSetOverride = Misc_SetOverride()
        miscSetOverride.Init(buf, pos)
        return cls.InitFromObj(miscSetOverride)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, miscSetOverride):
        x = Misc_SetOverrideT()
        x._UnPack(miscSetOverride)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.value == other.value

    # Misc_SetOverrideT
    def _UnPack(self, miscSetOverride):
        if miscSetOverride is None:
            return
        if miscSetOverride.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(miscSetOverride.Base())
        self.value = miscSetOverride.Value()

    # Misc_SetOverrideT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        Misc_SetOverrideStart(builder)
        if self.base is not None:
            Misc_SetOverrideAddBase(builder, base)
        Misc_SetOverrideAddValue(builder, self.value)
        miscSetOverride = Misc_SetOverrideEnd(builder)
        return miscSetOverride
