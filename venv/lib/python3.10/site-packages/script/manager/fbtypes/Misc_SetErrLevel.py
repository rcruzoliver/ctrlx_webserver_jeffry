# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Misc_SetErrLevel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_SetErrLevel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMisc_SetErrLevel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Misc_SetErrLevel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_SetErrLevel
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Misc_SetErrLevel
    def ErrLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Misc_SetErrLevelStart(builder): builder.StartObject(2)
def Start(builder):
    return Misc_SetErrLevelStart(builder)
def Misc_SetErrLevelAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Misc_SetErrLevelAddBase(builder, base)
def Misc_SetErrLevelAddErrLvl(builder, errLvl): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(errLvl), 0)
def AddErrLvl(builder, errLvl):
    return Misc_SetErrLevelAddErrLvl(builder, errLvl)
def Misc_SetErrLevelEnd(builder): return builder.EndObject()
def End(builder):
    return Misc_SetErrLevelEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Misc_SetErrLevelT(object):

    # Misc_SetErrLevelT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.errLvl = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscSetErrLevel = Misc_SetErrLevel()
        miscSetErrLevel.Init(buf, pos)
        return cls.InitFromObj(miscSetErrLevel)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, miscSetErrLevel):
        x = Misc_SetErrLevelT()
        x._UnPack(miscSetErrLevel)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.errLvl == other.errLvl

    # Misc_SetErrLevelT
    def _UnPack(self, miscSetErrLevel):
        if miscSetErrLevel is None:
            return
        if miscSetErrLevel.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(miscSetErrLevel.Base())
        self.errLvl = miscSetErrLevel.ErrLvl()

    # Misc_SetErrLevelT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.errLvl is not None:
            errLvl = builder.CreateString(self.errLvl)
        Misc_SetErrLevelStart(builder)
        if self.base is not None:
            Misc_SetErrLevelAddBase(builder, base)
        if self.errLvl is not None:
            Misc_SetErrLevelAddErrLvl(builder, errLvl)
        miscSetErrLevel = Misc_SetErrLevelEnd(builder)
        return miscSetErrLevel
