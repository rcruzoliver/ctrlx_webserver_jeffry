# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinMoveDirectAsync(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinMoveDirectAsync()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinMoveDirectAsync(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinMoveDirectAsync
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinMoveDirectAsync
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinMoveDirectAsync
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Cmd_KinMoveDirectAsync
    def PosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # Cmd_KinMoveDirectAsync
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_KinMoveDirectAsync
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Cmd_KinMoveDirectAsync
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cmd_KinMoveDirectAsync
    def DynLimFactors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinMoveDirectAsync
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def Cmd_KinMoveDirectAsyncStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_KinMoveDirectAsyncStart(builder)
def Cmd_KinMoveDirectAsyncAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinMoveDirectAsyncAddBase(builder, base)
def Cmd_KinMoveDirectAsyncAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def AddPos(builder, pos):
    return Cmd_KinMoveDirectAsyncAddPos(builder, pos)
def Cmd_KinMoveDirectAsyncStartPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPosVector(builder, numElems):
    return Cmd_KinMoveDirectAsyncStartPosVector(builder, numElems)
def Cmd_KinMoveDirectAsyncAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def AddCoordSys(builder, coordSys):
    return Cmd_KinMoveDirectAsyncAddCoordSys(builder, coordSys)
def Cmd_KinMoveDirectAsyncAddDynLimFactors(builder, dynLimFactors): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dynLimFactors), 0)
def AddDynLimFactors(builder, dynLimFactors):
    return Cmd_KinMoveDirectAsyncAddDynLimFactors(builder, dynLimFactors)
def Cmd_KinMoveDirectAsyncAddBuffered(builder, buffered): builder.PrependBoolSlot(4, buffered, 1)
def AddBuffered(builder, buffered):
    return Cmd_KinMoveDirectAsyncAddBuffered(builder, buffered)
def Cmd_KinMoveDirectAsyncEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinMoveDirectAsyncEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
try:
    from typing import List, Optional
except:
    pass

class Cmd_KinMoveDirectAsyncT(object):

    # Cmd_KinMoveDirectAsyncT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.pos = None  # type: List[float]
        self.coordSys = None  # type: str
        self.dynLimFactors = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinMoveDirectAsync = Cmd_KinMoveDirectAsync()
        cmdKinMoveDirectAsync.Init(buf, pos)
        return cls.InitFromObj(cmdKinMoveDirectAsync)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinMoveDirectAsync):
        x = Cmd_KinMoveDirectAsyncT()
        x._UnPack(cmdKinMoveDirectAsync)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.pos == other.pos and \
            self.coordSys == other.coordSys and \
            self.dynLimFactors == other.dynLimFactors and \
            self.buffered == other.buffered

    # Cmd_KinMoveDirectAsyncT
    def _UnPack(self, cmdKinMoveDirectAsync):
        if cmdKinMoveDirectAsync is None:
            return
        if cmdKinMoveDirectAsync.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinMoveDirectAsync.Base())
        if not cmdKinMoveDirectAsync.PosIsNone():
            if np is None:
                self.pos = []
                for i in range(cmdKinMoveDirectAsync.PosLength()):
                    self.pos.append(cmdKinMoveDirectAsync.Pos(i))
            else:
                self.pos = cmdKinMoveDirectAsync.PosAsNumpy()
        self.coordSys = cmdKinMoveDirectAsync.CoordSys()
        if cmdKinMoveDirectAsync.DynLimFactors() is not None:
            self.dynLimFactors = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdKinMoveDirectAsync.DynLimFactors())
        self.buffered = cmdKinMoveDirectAsync.Buffered()

    # Cmd_KinMoveDirectAsyncT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.pos is not None:
            if np is not None and type(self.pos) is np.ndarray:
                pos = builder.CreateNumpyVector(self.pos)
            else:
                Cmd_KinMoveDirectAsyncStartPosVector(builder, len(self.pos))
                for i in reversed(range(len(self.pos))):
                    builder.PrependFloat64(self.pos[i])
                pos = builder.EndVector()
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.dynLimFactors is not None:
            dynLimFactors = self.dynLimFactors.Pack(builder)
        Cmd_KinMoveDirectAsyncStart(builder)
        if self.base is not None:
            Cmd_KinMoveDirectAsyncAddBase(builder, base)
        if self.pos is not None:
            Cmd_KinMoveDirectAsyncAddPos(builder, pos)
        if self.coordSys is not None:
            Cmd_KinMoveDirectAsyncAddCoordSys(builder, coordSys)
        if self.dynLimFactors is not None:
            Cmd_KinMoveDirectAsyncAddDynLimFactors(builder, dynLimFactors)
        Cmd_KinMoveDirectAsyncAddBuffered(builder, self.buffered)
        cmdKinMoveDirectAsync = Cmd_KinMoveDirectAsyncEnd(builder)
        return cmdKinMoveDirectAsync
