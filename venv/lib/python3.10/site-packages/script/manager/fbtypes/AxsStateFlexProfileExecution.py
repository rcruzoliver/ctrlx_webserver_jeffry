# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# state information of the execution
class AxsStateFlexProfileExecution(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsStateFlexProfileExecution()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAxsStateFlexProfileExecution(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AxsStateFlexProfileExecution
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently active profile from the axis
    # AxsStateFlexProfileExecution
    def ActiveProfile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # currently active segment of the profile from the axis
    # AxsStateFlexProfileExecution
    def ActiveSegment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # the profile is waiting for the specified switching position
    # AxsStateFlexProfileExecution
    def WaitForSwitchPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # the one-time execution of the profile was completed (only for execution mode "SINGLE")
    # AxsStateFlexProfileExecution
    def SingleExecDone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AxsStateFlexProfileExecutionStart(builder): builder.StartObject(4)
def Start(builder):
    return AxsStateFlexProfileExecutionStart(builder)
def AxsStateFlexProfileExecutionAddActiveProfile(builder, activeProfile): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(activeProfile), 0)
def AddActiveProfile(builder, activeProfile):
    return AxsStateFlexProfileExecutionAddActiveProfile(builder, activeProfile)
def AxsStateFlexProfileExecutionAddActiveSegment(builder, activeSegment): builder.PrependUint32Slot(1, activeSegment, 0)
def AddActiveSegment(builder, activeSegment):
    return AxsStateFlexProfileExecutionAddActiveSegment(builder, activeSegment)
def AxsStateFlexProfileExecutionAddWaitForSwitchPos(builder, waitForSwitchPos): builder.PrependBoolSlot(2, waitForSwitchPos, 0)
def AddWaitForSwitchPos(builder, waitForSwitchPos):
    return AxsStateFlexProfileExecutionAddWaitForSwitchPos(builder, waitForSwitchPos)
def AxsStateFlexProfileExecutionAddSingleExecDone(builder, singleExecDone): builder.PrependBoolSlot(3, singleExecDone, 0)
def AddSingleExecDone(builder, singleExecDone):
    return AxsStateFlexProfileExecutionAddSingleExecDone(builder, singleExecDone)
def AxsStateFlexProfileExecutionEnd(builder): return builder.EndObject()
def End(builder):
    return AxsStateFlexProfileExecutionEnd(builder)

class AxsStateFlexProfileExecutionT(object):

    # AxsStateFlexProfileExecutionT
    def __init__(self):
        self.activeProfile = None  # type: str
        self.activeSegment = 0  # type: int
        self.waitForSwitchPos = False  # type: bool
        self.singleExecDone = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsStateFlexProfileExecution = AxsStateFlexProfileExecution()
        axsStateFlexProfileExecution.Init(buf, pos)
        return cls.InitFromObj(axsStateFlexProfileExecution)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, axsStateFlexProfileExecution):
        x = AxsStateFlexProfileExecutionT()
        x._UnPack(axsStateFlexProfileExecution)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.activeProfile == other.activeProfile and \
            self.activeSegment == other.activeSegment and \
            self.waitForSwitchPos == other.waitForSwitchPos and \
            self.singleExecDone == other.singleExecDone

    # AxsStateFlexProfileExecutionT
    def _UnPack(self, axsStateFlexProfileExecution):
        if axsStateFlexProfileExecution is None:
            return
        self.activeProfile = axsStateFlexProfileExecution.ActiveProfile()
        self.activeSegment = axsStateFlexProfileExecution.ActiveSegment()
        self.waitForSwitchPos = axsStateFlexProfileExecution.WaitForSwitchPos()
        self.singleExecDone = axsStateFlexProfileExecution.SingleExecDone()

    # AxsStateFlexProfileExecutionT
    def Pack(self, builder):
        if self.activeProfile is not None:
            activeProfile = builder.CreateString(self.activeProfile)
        AxsStateFlexProfileExecutionStart(builder)
        if self.activeProfile is not None:
            AxsStateFlexProfileExecutionAddActiveProfile(builder, activeProfile)
        AxsStateFlexProfileExecutionAddActiveSegment(builder, self.activeSegment)
        AxsStateFlexProfileExecutionAddWaitForSwitchPos(builder, self.waitForSwitchPos)
        AxsStateFlexProfileExecutionAddSingleExecDone(builder, self.singleExecDone)
        axsStateFlexProfileExecution = AxsStateFlexProfileExecutionEnd(builder)
        return axsStateFlexProfileExecution
