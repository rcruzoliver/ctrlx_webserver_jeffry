# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinJog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinJog()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_KinJog(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_KinJog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinJog
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinJog
    def Dir(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Cmd_KinJog
    def DirAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # Cmd_KinJog
    def DirLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_KinJog
    def DirIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Cmd_KinJog
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cmd_KinJog
    def Incr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_KinJog
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_DynLimits import Cmd_DynLimits
            obj = Cmd_DynLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Cmd_KinJogStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_KinJogStart(builder)
def Cmd_KinJogAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_KinJogAddBase(builder, base)
def Cmd_KinJogAddDir(builder, dir): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dir), 0)
def AddDir(builder, dir):
    return Cmd_KinJogAddDir(builder, dir)
def Cmd_KinJogStartDirVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartDirVector(builder, numElems):
    return Cmd_KinJogStartDirVector(builder, numElems)
def Cmd_KinJogAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def AddCoordSys(builder, coordSys):
    return Cmd_KinJogAddCoordSys(builder, coordSys)
def Cmd_KinJogAddIncr(builder, incr): builder.PrependFloat64Slot(3, incr, 0.0)
def AddIncr(builder, incr):
    return Cmd_KinJogAddIncr(builder, incr)
def Cmd_KinJogAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AddLim(builder, lim):
    return Cmd_KinJogAddLim(builder, lim)
def Cmd_KinJogEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_KinJogEnd(builder)
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.Cmd_DynLimits
try:
    from typing import List, Optional
except:
    pass

class Cmd_KinJogT(object):

    # Cmd_KinJogT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.dir = None  # type: List[float]
        self.coordSys = None  # type: str
        self.incr = 0.0  # type: float
        self.lim = None  # type: Optional[script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinJog = Cmd_KinJog()
        cmdKinJog.Init(buf, pos)
        return cls.InitFromObj(cmdKinJog)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdKinJog):
        x = Cmd_KinJogT()
        x._UnPack(cmdKinJog)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.dir == other.dir and \
            self.coordSys == other.coordSys and \
            self.incr == other.incr and \
            self.lim == other.lim

    # Cmd_KinJogT
    def _UnPack(self, cmdKinJog):
        if cmdKinJog is None:
            return
        if cmdKinJog.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinJog.Base())
        if not cmdKinJog.DirIsNone():
            if np is None:
                self.dir = []
                for i in range(cmdKinJog.DirLength()):
                    self.dir.append(cmdKinJog.Dir(i))
            else:
                self.dir = cmdKinJog.DirAsNumpy()
        self.coordSys = cmdKinJog.CoordSys()
        self.incr = cmdKinJog.Incr()
        if cmdKinJog.Lim() is not None:
            self.lim = script.manager.fbtypes.Cmd_DynLimits.Cmd_DynLimitsT.InitFromObj(cmdKinJog.Lim())

    # Cmd_KinJogT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.dir is not None:
            if np is not None and type(self.dir) is np.ndarray:
                dir = builder.CreateNumpyVector(self.dir)
            else:
                Cmd_KinJogStartDirVector(builder, len(self.dir))
                for i in reversed(range(len(self.dir))):
                    builder.PrependFloat64(self.dir[i])
                dir = builder.EndVector()
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        Cmd_KinJogStart(builder)
        if self.base is not None:
            Cmd_KinJogAddBase(builder, base)
        if self.dir is not None:
            Cmd_KinJogAddDir(builder, dir)
        if self.coordSys is not None:
            Cmd_KinJogAddCoordSys(builder, coordSys)
        Cmd_KinJogAddIncr(builder, self.incr)
        if self.lim is not None:
            Cmd_KinJogAddLim(builder, lim)
        cmdKinJog = Cmd_KinJogEnd(builder)
        return cmdKinJog
