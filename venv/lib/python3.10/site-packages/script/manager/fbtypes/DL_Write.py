# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DL_Write(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DL_Write()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDL_Write(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DL_Write
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DL_Write
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DL_Write
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DL_Write
    def S(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DL_Write
    def I(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DL_Write
    def B(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DL_Write
    def D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def DL_WriteStart(builder): builder.StartObject(6)
def Start(builder):
    return DL_WriteStart(builder)
def DL_WriteAddPath(builder, path): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def AddPath(builder, path):
    return DL_WriteAddPath(builder, path)
def DL_WriteAddType(builder, type): builder.PrependInt32Slot(1, type, 0)
def AddType(builder, type):
    return DL_WriteAddType(builder, type)
def DL_WriteAddS(builder, s): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(s), 0)
def AddS(builder, s):
    return DL_WriteAddS(builder, s)
def DL_WriteAddI(builder, i): builder.PrependInt64Slot(3, i, 0)
def AddI(builder, i):
    return DL_WriteAddI(builder, i)
def DL_WriteAddB(builder, b): builder.PrependBoolSlot(4, b, 0)
def AddB(builder, b):
    return DL_WriteAddB(builder, b)
def DL_WriteAddD(builder, d): builder.PrependFloat64Slot(5, d, 0.0)
def AddD(builder, d):
    return DL_WriteAddD(builder, d)
def DL_WriteEnd(builder): return builder.EndObject()
def End(builder):
    return DL_WriteEnd(builder)

class DL_WriteT(object):

    # DL_WriteT
    def __init__(self):
        self.path = None  # type: str
        self.type = 0  # type: int
        self.s = None  # type: str
        self.i = 0  # type: int
        self.b = False  # type: bool
        self.d = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dlWrite = DL_Write()
        dlWrite.Init(buf, pos)
        return cls.InitFromObj(dlWrite)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dlWrite):
        x = DL_WriteT()
        x._UnPack(dlWrite)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.path == other.path and \
            self.type == other.type and \
            self.s == other.s and \
            self.i == other.i and \
            self.b == other.b and \
            self.d == other.d

    # DL_WriteT
    def _UnPack(self, dlWrite):
        if dlWrite is None:
            return
        self.path = dlWrite.Path()
        self.type = dlWrite.Type()
        self.s = dlWrite.S()
        self.i = dlWrite.I()
        self.b = dlWrite.B()
        self.d = dlWrite.D()

    # DL_WriteT
    def Pack(self, builder):
        if self.path is not None:
            path = builder.CreateString(self.path)
        if self.s is not None:
            s = builder.CreateString(self.s)
        DL_WriteStart(builder)
        if self.path is not None:
            DL_WriteAddPath(builder, path)
        DL_WriteAddType(builder, self.type)
        if self.s is not None:
            DL_WriteAddS(builder, s)
        DL_WriteAddI(builder, self.i)
        DL_WriteAddB(builder, self.b)
        DL_WriteAddD(builder, self.d)
        dlWrite = DL_WriteEnd(builder)
        return dlWrite
