# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Misc_CmdOptionInfoResp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_CmdOptionInfoResp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMisc_CmdOptionInfoResp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Misc_CmdOptionInfoResp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_CmdOptionInfoResp
    def Bfbs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_CmdOptionInfoResp
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Misc_CmdOptionInfoRespStart(builder): builder.StartObject(2)
def Start(builder):
    return Misc_CmdOptionInfoRespStart(builder)
def Misc_CmdOptionInfoRespAddBfbs(builder, bfbs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bfbs), 0)
def AddBfbs(builder, bfbs):
    return Misc_CmdOptionInfoRespAddBfbs(builder, bfbs)
def Misc_CmdOptionInfoRespAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return Misc_CmdOptionInfoRespAddDescription(builder, description)
def Misc_CmdOptionInfoRespEnd(builder): return builder.EndObject()
def End(builder):
    return Misc_CmdOptionInfoRespEnd(builder)

class Misc_CmdOptionInfoRespT(object):

    # Misc_CmdOptionInfoRespT
    def __init__(self):
        self.bfbs = None  # type: str
        self.description = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscCmdOptionInfoResp = Misc_CmdOptionInfoResp()
        miscCmdOptionInfoResp.Init(buf, pos)
        return cls.InitFromObj(miscCmdOptionInfoResp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, miscCmdOptionInfoResp):
        x = Misc_CmdOptionInfoRespT()
        x._UnPack(miscCmdOptionInfoResp)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.bfbs == other.bfbs and \
            self.description == other.description

    # Misc_CmdOptionInfoRespT
    def _UnPack(self, miscCmdOptionInfoResp):
        if miscCmdOptionInfoResp is None:
            return
        self.bfbs = miscCmdOptionInfoResp.Bfbs()
        self.description = miscCmdOptionInfoResp.Description()

    # Misc_CmdOptionInfoRespT
    def Pack(self, builder):
        if self.bfbs is not None:
            bfbs = builder.CreateString(self.bfbs)
        if self.description is not None:
            description = builder.CreateString(self.description)
        Misc_CmdOptionInfoRespStart(builder)
        if self.bfbs is not None:
            Misc_CmdOptionInfoRespAddBfbs(builder, bfbs)
        if self.description is not None:
            Misc_CmdOptionInfoRespAddDescription(builder, description)
        miscCmdOptionInfoResp = Misc_CmdOptionInfoRespEnd(builder)
        return miscCmdOptionInfoResp
