# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Resp_Error(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Resp_Error()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResp_Error(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Resp_Error
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Resp_Error
    def MainCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Resp_Error
    def DetailCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Resp_Error
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Resp_Error
    def Trace(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Resp_Error
    def TraceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Resp_Error
    def TraceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Resp_ErrorStart(builder): builder.StartObject(4)
def Start(builder):
    return Resp_ErrorStart(builder)
def Resp_ErrorAddMainCode(builder, mainCode): builder.PrependUint32Slot(0, mainCode, 0)
def AddMainCode(builder, mainCode):
    return Resp_ErrorAddMainCode(builder, mainCode)
def Resp_ErrorAddDetailCode(builder, detailCode): builder.PrependUint32Slot(1, detailCode, 0)
def AddDetailCode(builder, detailCode):
    return Resp_ErrorAddDetailCode(builder, detailCode)
def Resp_ErrorAddText(builder, text): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def AddText(builder, text):
    return Resp_ErrorAddText(builder, text)
def Resp_ErrorAddTrace(builder, trace): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(trace), 0)
def AddTrace(builder, trace):
    return Resp_ErrorAddTrace(builder, trace)
def Resp_ErrorStartTraceVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartTraceVector(builder, numElems):
    return Resp_ErrorStartTraceVector(builder, numElems)
def Resp_ErrorEnd(builder): return builder.EndObject()
def End(builder):
    return Resp_ErrorEnd(builder)
try:
    from typing import List
except:
    pass

class Resp_ErrorT(object):

    # Resp_ErrorT
    def __init__(self):
        self.mainCode = 0  # type: int
        self.detailCode = 0  # type: int
        self.text = None  # type: str
        self.trace = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        respError = Resp_Error()
        respError.Init(buf, pos)
        return cls.InitFromObj(respError)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, respError):
        x = Resp_ErrorT()
        x._UnPack(respError)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.mainCode == other.mainCode and \
            self.detailCode == other.detailCode and \
            self.text == other.text and \
            self.trace == other.trace

    # Resp_ErrorT
    def _UnPack(self, respError):
        if respError is None:
            return
        self.mainCode = respError.MainCode()
        self.detailCode = respError.DetailCode()
        self.text = respError.Text()
        if not respError.TraceIsNone():
            self.trace = []
            for i in range(respError.TraceLength()):
                self.trace.append(respError.Trace(i))

    # Resp_ErrorT
    def Pack(self, builder):
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.trace is not None:
            tracelist = []
            for i in range(len(self.trace)):
                tracelist.append(builder.CreateString(self.trace[i]))
            Resp_ErrorStartTraceVector(builder, len(self.trace))
            for i in reversed(range(len(self.trace))):
                builder.PrependUOffsetTRelative(tracelist[i])
            trace = builder.EndVector()
        Resp_ErrorStart(builder)
        Resp_ErrorAddMainCode(builder, self.mainCode)
        Resp_ErrorAddDetailCode(builder, self.detailCode)
        if self.text is not None:
            Resp_ErrorAddText(builder, text)
        if self.trace is not None:
            Resp_ErrorAddTrace(builder, trace)
        respError = Resp_ErrorEnd(builder)
        return respError
