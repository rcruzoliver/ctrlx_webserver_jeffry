# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently the actual values of the probe
class state_AxsProbeActualValuesResp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = state_AxsProbeActualValuesResp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsstate_AxsProbeActualValuesResp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # state_AxsProbeActualValuesResp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # currently the data of vaild 
    # state_AxsProbeActualValuesResp
    def Valid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # currently positive edge value
    # state_AxsProbeActualValuesResp
    def PosEdgeValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently negative edge value
    # state_AxsProbeActualValuesResp
    def NegEdgeValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently difference of probe values
    # state_AxsProbeActualValuesResp
    def DifferValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # currently difference count
    # state_AxsProbeActualValuesResp
    def DiffCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently positive edge count
    # state_AxsProbeActualValuesResp
    def PosEdgeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently negative edge count
    # state_AxsProbeActualValuesResp
    def NegEdgeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently marks edge count
    # state_AxsProbeActualValuesResp
    def MarksEdgeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # currently probe status
    # state_AxsProbeActualValuesResp
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def state_AxsProbeActualValuesRespStart(builder): builder.StartObject(9)
def Start(builder):
    return state_AxsProbeActualValuesRespStart(builder)
def state_AxsProbeActualValuesRespAddValid(builder, valid): builder.PrependBoolSlot(0, valid, 0)
def AddValid(builder, valid):
    return state_AxsProbeActualValuesRespAddValid(builder, valid)
def state_AxsProbeActualValuesRespAddPosEdgeValue(builder, posEdgeValue): builder.PrependFloat64Slot(1, posEdgeValue, 0.0)
def AddPosEdgeValue(builder, posEdgeValue):
    return state_AxsProbeActualValuesRespAddPosEdgeValue(builder, posEdgeValue)
def state_AxsProbeActualValuesRespAddNegEdgeValue(builder, negEdgeValue): builder.PrependFloat64Slot(2, negEdgeValue, 0.0)
def AddNegEdgeValue(builder, negEdgeValue):
    return state_AxsProbeActualValuesRespAddNegEdgeValue(builder, negEdgeValue)
def state_AxsProbeActualValuesRespAddDifferValue(builder, differValue): builder.PrependFloat64Slot(3, differValue, 0.0)
def AddDifferValue(builder, differValue):
    return state_AxsProbeActualValuesRespAddDifferValue(builder, differValue)
def state_AxsProbeActualValuesRespAddDiffCount(builder, diffCount): builder.PrependUint32Slot(4, diffCount, 0)
def AddDiffCount(builder, diffCount):
    return state_AxsProbeActualValuesRespAddDiffCount(builder, diffCount)
def state_AxsProbeActualValuesRespAddPosEdgeCount(builder, posEdgeCount): builder.PrependUint32Slot(5, posEdgeCount, 0)
def AddPosEdgeCount(builder, posEdgeCount):
    return state_AxsProbeActualValuesRespAddPosEdgeCount(builder, posEdgeCount)
def state_AxsProbeActualValuesRespAddNegEdgeCount(builder, negEdgeCount): builder.PrependUint32Slot(6, negEdgeCount, 0)
def AddNegEdgeCount(builder, negEdgeCount):
    return state_AxsProbeActualValuesRespAddNegEdgeCount(builder, negEdgeCount)
def state_AxsProbeActualValuesRespAddMarksEdgeCount(builder, marksEdgeCount): builder.PrependUint32Slot(7, marksEdgeCount, 0)
def AddMarksEdgeCount(builder, marksEdgeCount):
    return state_AxsProbeActualValuesRespAddMarksEdgeCount(builder, marksEdgeCount)
def state_AxsProbeActualValuesRespAddStatus(builder, status): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)
def AddStatus(builder, status):
    return state_AxsProbeActualValuesRespAddStatus(builder, status)
def state_AxsProbeActualValuesRespEnd(builder): return builder.EndObject()
def End(builder):
    return state_AxsProbeActualValuesRespEnd(builder)

class state_AxsProbeActualValuesRespT(object):

    # state_AxsProbeActualValuesRespT
    def __init__(self):
        self.valid = False  # type: bool
        self.posEdgeValue = 0.0  # type: float
        self.negEdgeValue = 0.0  # type: float
        self.differValue = 0.0  # type: float
        self.diffCount = 0  # type: int
        self.posEdgeCount = 0  # type: int
        self.negEdgeCount = 0  # type: int
        self.marksEdgeCount = 0  # type: int
        self.status = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsProbeActualValuesResp = state_AxsProbeActualValuesResp()
        stateAxsProbeActualValuesResp.Init(buf, pos)
        return cls.InitFromObj(stateAxsProbeActualValuesResp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateAxsProbeActualValuesResp):
        x = state_AxsProbeActualValuesRespT()
        x._UnPack(stateAxsProbeActualValuesResp)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.valid == other.valid and \
            self.posEdgeValue == other.posEdgeValue and \
            self.negEdgeValue == other.negEdgeValue and \
            self.differValue == other.differValue and \
            self.diffCount == other.diffCount and \
            self.posEdgeCount == other.posEdgeCount and \
            self.negEdgeCount == other.negEdgeCount and \
            self.marksEdgeCount == other.marksEdgeCount and \
            self.status == other.status

    # state_AxsProbeActualValuesRespT
    def _UnPack(self, stateAxsProbeActualValuesResp):
        if stateAxsProbeActualValuesResp is None:
            return
        self.valid = stateAxsProbeActualValuesResp.Valid()
        self.posEdgeValue = stateAxsProbeActualValuesResp.PosEdgeValue()
        self.negEdgeValue = stateAxsProbeActualValuesResp.NegEdgeValue()
        self.differValue = stateAxsProbeActualValuesResp.DifferValue()
        self.diffCount = stateAxsProbeActualValuesResp.DiffCount()
        self.posEdgeCount = stateAxsProbeActualValuesResp.PosEdgeCount()
        self.negEdgeCount = stateAxsProbeActualValuesResp.NegEdgeCount()
        self.marksEdgeCount = stateAxsProbeActualValuesResp.MarksEdgeCount()
        self.status = stateAxsProbeActualValuesResp.Status()

    # state_AxsProbeActualValuesRespT
    def Pack(self, builder):
        if self.status is not None:
            status = builder.CreateString(self.status)
        state_AxsProbeActualValuesRespStart(builder)
        state_AxsProbeActualValuesRespAddValid(builder, self.valid)
        state_AxsProbeActualValuesRespAddPosEdgeValue(builder, self.posEdgeValue)
        state_AxsProbeActualValuesRespAddNegEdgeValue(builder, self.negEdgeValue)
        state_AxsProbeActualValuesRespAddDifferValue(builder, self.differValue)
        state_AxsProbeActualValuesRespAddDiffCount(builder, self.diffCount)
        state_AxsProbeActualValuesRespAddPosEdgeCount(builder, self.posEdgeCount)
        state_AxsProbeActualValuesRespAddNegEdgeCount(builder, self.negEdgeCount)
        state_AxsProbeActualValuesRespAddMarksEdgeCount(builder, self.marksEdgeCount)
        if self.status is not None:
            state_AxsProbeActualValuesRespAddStatus(builder, status)
        stateAxsProbeActualValuesResp = state_AxsProbeActualValuesRespEnd(builder)
        return stateAxsProbeActualValuesResp
