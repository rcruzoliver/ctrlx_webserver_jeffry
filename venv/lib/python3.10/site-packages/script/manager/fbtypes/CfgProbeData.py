# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of the axis probe 
class CfgProbeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CfgProbeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCfgProbeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CfgProbeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # measuring signal select
    # CfgProbeData
    def MeasurSigSel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # selection of measuring type
    # CfgProbeData
    def MeasurType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # selection which edge is evaluated
    # CfgProbeData
    def EvalEdgeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # probe difference measuring type
    # CfgProbeData
    def EvalDiffType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # enable of expectation window
    # CfgProbeData
    def ExpWindowEdgeEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # start of the expectation window if the positive edge is evaluated
    # CfgProbeData
    def ExpWindowStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # end of the expectation window if the positive edge is evaluated
    # CfgProbeData
    def ExpWindowEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # enable lost mark check
    # CfgProbeData
    def EnableMarkFailure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # threshold for the registered number of marker failure
    # CfgProbeData
    def MaxNumOfMarkFailuer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # probe dead time compensation enable
    # CfgProbeData
    def TimeCompEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # dead time compensation for the positive edge if evaluated
    # CfgProbeData
    def TimeCompPosEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # dead time compensation for the negative edge if evaluated
    # CfgProbeData
    def TimeCompNegEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # switch-on level monitoring active, only worked for drive based touch probe 1
    # CfgProbeData
    def LvlMonitorActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # probe auto activated after config
    # CfgProbeData
    def IsAutoActivated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CfgProbeDataStart(builder): builder.StartObject(14)
def Start(builder):
    return CfgProbeDataStart(builder)
def CfgProbeDataAddMeasurSigSel(builder, measurSigSel): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(measurSigSel), 0)
def AddMeasurSigSel(builder, measurSigSel):
    return CfgProbeDataAddMeasurSigSel(builder, measurSigSel)
def CfgProbeDataAddMeasurType(builder, measurType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(measurType), 0)
def AddMeasurType(builder, measurType):
    return CfgProbeDataAddMeasurType(builder, measurType)
def CfgProbeDataAddEvalEdgeType(builder, evalEdgeType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(evalEdgeType), 0)
def AddEvalEdgeType(builder, evalEdgeType):
    return CfgProbeDataAddEvalEdgeType(builder, evalEdgeType)
def CfgProbeDataAddEvalDiffType(builder, evalDiffType): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(evalDiffType), 0)
def AddEvalDiffType(builder, evalDiffType):
    return CfgProbeDataAddEvalDiffType(builder, evalDiffType)
def CfgProbeDataAddExpWindowEdgeEnable(builder, expWindowEdgeEnable): builder.PrependBoolSlot(4, expWindowEdgeEnable, 0)
def AddExpWindowEdgeEnable(builder, expWindowEdgeEnable):
    return CfgProbeDataAddExpWindowEdgeEnable(builder, expWindowEdgeEnable)
def CfgProbeDataAddExpWindowStart(builder, expWindowStart): builder.PrependFloat64Slot(5, expWindowStart, 0.0)
def AddExpWindowStart(builder, expWindowStart):
    return CfgProbeDataAddExpWindowStart(builder, expWindowStart)
def CfgProbeDataAddExpWindowEnd(builder, expWindowEnd): builder.PrependFloat64Slot(6, expWindowEnd, 0.0)
def AddExpWindowEnd(builder, expWindowEnd):
    return CfgProbeDataAddExpWindowEnd(builder, expWindowEnd)
def CfgProbeDataAddEnableMarkFailure(builder, enableMarkFailure): builder.PrependBoolSlot(7, enableMarkFailure, 0)
def AddEnableMarkFailure(builder, enableMarkFailure):
    return CfgProbeDataAddEnableMarkFailure(builder, enableMarkFailure)
def CfgProbeDataAddMaxNumOfMarkFailuer(builder, maxNumOfMarkFailuer): builder.PrependUint32Slot(8, maxNumOfMarkFailuer, 0)
def AddMaxNumOfMarkFailuer(builder, maxNumOfMarkFailuer):
    return CfgProbeDataAddMaxNumOfMarkFailuer(builder, maxNumOfMarkFailuer)
def CfgProbeDataAddTimeCompEnable(builder, timeCompEnable): builder.PrependBoolSlot(9, timeCompEnable, 0)
def AddTimeCompEnable(builder, timeCompEnable):
    return CfgProbeDataAddTimeCompEnable(builder, timeCompEnable)
def CfgProbeDataAddTimeCompPosEdge(builder, timeCompPosEdge): builder.PrependFloat64Slot(10, timeCompPosEdge, 0.0)
def AddTimeCompPosEdge(builder, timeCompPosEdge):
    return CfgProbeDataAddTimeCompPosEdge(builder, timeCompPosEdge)
def CfgProbeDataAddTimeCompNegEdge(builder, timeCompNegEdge): builder.PrependFloat64Slot(11, timeCompNegEdge, 0.0)
def AddTimeCompNegEdge(builder, timeCompNegEdge):
    return CfgProbeDataAddTimeCompNegEdge(builder, timeCompNegEdge)
def CfgProbeDataAddLvlMonitorActive(builder, lvlMonitorActive): builder.PrependBoolSlot(12, lvlMonitorActive, 0)
def AddLvlMonitorActive(builder, lvlMonitorActive):
    return CfgProbeDataAddLvlMonitorActive(builder, lvlMonitorActive)
def CfgProbeDataAddIsAutoActivated(builder, isAutoActivated): builder.PrependBoolSlot(13, isAutoActivated, 0)
def AddIsAutoActivated(builder, isAutoActivated):
    return CfgProbeDataAddIsAutoActivated(builder, isAutoActivated)
def CfgProbeDataEnd(builder): return builder.EndObject()
def End(builder):
    return CfgProbeDataEnd(builder)

class CfgProbeDataT(object):

    # CfgProbeDataT
    def __init__(self):
        self.measurSigSel = None  # type: str
        self.measurType = None  # type: str
        self.evalEdgeType = None  # type: str
        self.evalDiffType = None  # type: str
        self.expWindowEdgeEnable = False  # type: bool
        self.expWindowStart = 0.0  # type: float
        self.expWindowEnd = 0.0  # type: float
        self.enableMarkFailure = False  # type: bool
        self.maxNumOfMarkFailuer = 0  # type: int
        self.timeCompEnable = False  # type: bool
        self.timeCompPosEdge = 0.0  # type: float
        self.timeCompNegEdge = 0.0  # type: float
        self.lvlMonitorActive = False  # type: bool
        self.isAutoActivated = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cfgProbeData = CfgProbeData()
        cfgProbeData.Init(buf, pos)
        return cls.InitFromObj(cfgProbeData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cfgProbeData):
        x = CfgProbeDataT()
        x._UnPack(cfgProbeData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.measurSigSel == other.measurSigSel and \
            self.measurType == other.measurType and \
            self.evalEdgeType == other.evalEdgeType and \
            self.evalDiffType == other.evalDiffType and \
            self.expWindowEdgeEnable == other.expWindowEdgeEnable and \
            self.expWindowStart == other.expWindowStart and \
            self.expWindowEnd == other.expWindowEnd and \
            self.enableMarkFailure == other.enableMarkFailure and \
            self.maxNumOfMarkFailuer == other.maxNumOfMarkFailuer and \
            self.timeCompEnable == other.timeCompEnable and \
            self.timeCompPosEdge == other.timeCompPosEdge and \
            self.timeCompNegEdge == other.timeCompNegEdge and \
            self.lvlMonitorActive == other.lvlMonitorActive and \
            self.isAutoActivated == other.isAutoActivated

    # CfgProbeDataT
    def _UnPack(self, cfgProbeData):
        if cfgProbeData is None:
            return
        self.measurSigSel = cfgProbeData.MeasurSigSel()
        self.measurType = cfgProbeData.MeasurType()
        self.evalEdgeType = cfgProbeData.EvalEdgeType()
        self.evalDiffType = cfgProbeData.EvalDiffType()
        self.expWindowEdgeEnable = cfgProbeData.ExpWindowEdgeEnable()
        self.expWindowStart = cfgProbeData.ExpWindowStart()
        self.expWindowEnd = cfgProbeData.ExpWindowEnd()
        self.enableMarkFailure = cfgProbeData.EnableMarkFailure()
        self.maxNumOfMarkFailuer = cfgProbeData.MaxNumOfMarkFailuer()
        self.timeCompEnable = cfgProbeData.TimeCompEnable()
        self.timeCompPosEdge = cfgProbeData.TimeCompPosEdge()
        self.timeCompNegEdge = cfgProbeData.TimeCompNegEdge()
        self.lvlMonitorActive = cfgProbeData.LvlMonitorActive()
        self.isAutoActivated = cfgProbeData.IsAutoActivated()

    # CfgProbeDataT
    def Pack(self, builder):
        if self.measurSigSel is not None:
            measurSigSel = builder.CreateString(self.measurSigSel)
        if self.measurType is not None:
            measurType = builder.CreateString(self.measurType)
        if self.evalEdgeType is not None:
            evalEdgeType = builder.CreateString(self.evalEdgeType)
        if self.evalDiffType is not None:
            evalDiffType = builder.CreateString(self.evalDiffType)
        CfgProbeDataStart(builder)
        if self.measurSigSel is not None:
            CfgProbeDataAddMeasurSigSel(builder, measurSigSel)
        if self.measurType is not None:
            CfgProbeDataAddMeasurType(builder, measurType)
        if self.evalEdgeType is not None:
            CfgProbeDataAddEvalEdgeType(builder, evalEdgeType)
        if self.evalDiffType is not None:
            CfgProbeDataAddEvalDiffType(builder, evalDiffType)
        CfgProbeDataAddExpWindowEdgeEnable(builder, self.expWindowEdgeEnable)
        CfgProbeDataAddExpWindowStart(builder, self.expWindowStart)
        CfgProbeDataAddExpWindowEnd(builder, self.expWindowEnd)
        CfgProbeDataAddEnableMarkFailure(builder, self.enableMarkFailure)
        CfgProbeDataAddMaxNumOfMarkFailuer(builder, self.maxNumOfMarkFailuer)
        CfgProbeDataAddTimeCompEnable(builder, self.timeCompEnable)
        CfgProbeDataAddTimeCompPosEdge(builder, self.timeCompPosEdge)
        CfgProbeDataAddTimeCompNegEdge(builder, self.timeCompNegEdge)
        CfgProbeDataAddLvlMonitorActive(builder, self.lvlMonitorActive)
        CfgProbeDataAddIsAutoActivated(builder, self.isAutoActivated)
        cfgProbeData = CfgProbeDataEnd(builder)
        return cfgProbeData
