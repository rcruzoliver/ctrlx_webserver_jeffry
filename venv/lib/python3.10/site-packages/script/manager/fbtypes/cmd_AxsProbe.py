# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis probe command
class cmd_AxsProbe(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = cmd_AxsProbe()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAscmd_AxsProbe(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # cmd_AxsProbe
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command base input
    # cmd_AxsProbe
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # probe base parameter
    # cmd_AxsProbe
    def BaseData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.cmd_AxsProbeBase import cmd_AxsProbeBase
            obj = cmd_AxsProbeBase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # probe configure parameter
    # cmd_AxsProbe
    def CfgData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.CfgProbeData import CfgProbeData
            obj = CfgProbeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def cmd_AxsProbeStart(builder): builder.StartObject(3)
def Start(builder):
    return cmd_AxsProbeStart(builder)
def cmd_AxsProbeAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return cmd_AxsProbeAddBase(builder, base)
def cmd_AxsProbeAddBaseData(builder, baseData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(baseData), 0)
def AddBaseData(builder, baseData):
    return cmd_AxsProbeAddBaseData(builder, baseData)
def cmd_AxsProbeAddCfgData(builder, cfgData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cfgData), 0)
def AddCfgData(builder, cfgData):
    return cmd_AxsProbeAddCfgData(builder, cfgData)
def cmd_AxsProbeEnd(builder): return builder.EndObject()
def End(builder):
    return cmd_AxsProbeEnd(builder)
import script.manager.fbtypes.CfgProbeData
import script.manager.fbtypes.Cmd_Base
import script.manager.fbtypes.cmd_AxsProbeBase
try:
    from typing import Optional
except:
    pass

class cmd_AxsProbeT(object):

    # cmd_AxsProbeT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.baseData = None  # type: Optional[script.manager.fbtypes.cmd_AxsProbeBase.cmd_AxsProbeBaseT]
        self.cfgData = None  # type: Optional[script.manager.fbtypes.CfgProbeData.CfgProbeDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsProbe = cmd_AxsProbe()
        cmdAxsProbe.Init(buf, pos)
        return cls.InitFromObj(cmdAxsProbe)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsProbe):
        x = cmd_AxsProbeT()
        x._UnPack(cmdAxsProbe)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.baseData == other.baseData and \
            self.cfgData == other.cfgData

    # cmd_AxsProbeT
    def _UnPack(self, cmdAxsProbe):
        if cmdAxsProbe is None:
            return
        if cmdAxsProbe.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsProbe.Base())
        if cmdAxsProbe.BaseData() is not None:
            self.baseData = script.manager.fbtypes.cmd_AxsProbeBase.cmd_AxsProbeBaseT.InitFromObj(cmdAxsProbe.BaseData())
        if cmdAxsProbe.CfgData() is not None:
            self.cfgData = script.manager.fbtypes.CfgProbeData.CfgProbeDataT.InitFromObj(cmdAxsProbe.CfgData())

    # cmd_AxsProbeT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.baseData is not None:
            baseData = self.baseData.Pack(builder)
        if self.cfgData is not None:
            cfgData = self.cfgData.Pack(builder)
        cmd_AxsProbeStart(builder)
        if self.base is not None:
            cmd_AxsProbeAddBase(builder, base)
        if self.baseData is not None:
            cmd_AxsProbeAddBaseData(builder, baseData)
        if self.cfgData is not None:
            cmd_AxsProbeAddCfgData(builder, cfgData)
        cmdAxsProbe = cmd_AxsProbeEnd(builder)
        return cmdAxsProbe
