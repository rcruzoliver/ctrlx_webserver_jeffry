# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Misc_ActCmdData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Misc_ActCmdData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMisc_ActCmdData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Misc_ActCmdData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Misc_ActCmdData
    def SrcName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_ActCmdData
    def SrcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Misc_ActCmdData
    def SrcLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def Misc_ActCmdDataStart(builder): builder.StartObject(3)
def Start(builder):
    return Misc_ActCmdDataStart(builder)
def Misc_ActCmdDataAddSrcName(builder, srcName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(srcName), 0)
def AddSrcName(builder, srcName):
    return Misc_ActCmdDataAddSrcName(builder, srcName)
def Misc_ActCmdDataAddSrcType(builder, srcType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(srcType), 0)
def AddSrcType(builder, srcType):
    return Misc_ActCmdDataAddSrcType(builder, srcType)
def Misc_ActCmdDataAddSrcLine(builder, srcLine): builder.PrependUint64Slot(2, srcLine, 0)
def AddSrcLine(builder, srcLine):
    return Misc_ActCmdDataAddSrcLine(builder, srcLine)
def Misc_ActCmdDataEnd(builder): return builder.EndObject()
def End(builder):
    return Misc_ActCmdDataEnd(builder)

class Misc_ActCmdDataT(object):

    # Misc_ActCmdDataT
    def __init__(self):
        self.srcName = None  # type: str
        self.srcType = None  # type: str
        self.srcLine = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        miscActCmdData = Misc_ActCmdData()
        miscActCmdData.Init(buf, pos)
        return cls.InitFromObj(miscActCmdData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, miscActCmdData):
        x = Misc_ActCmdDataT()
        x._UnPack(miscActCmdData)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.srcName == other.srcName and \
            self.srcType == other.srcType and \
            self.srcLine == other.srcLine

    # Misc_ActCmdDataT
    def _UnPack(self, miscActCmdData):
        if miscActCmdData is None:
            return
        self.srcName = miscActCmdData.SrcName()
        self.srcType = miscActCmdData.SrcType()
        self.srcLine = miscActCmdData.SrcLine()

    # Misc_ActCmdDataT
    def Pack(self, builder):
        if self.srcName is not None:
            srcName = builder.CreateString(self.srcName)
        if self.srcType is not None:
            srcType = builder.CreateString(self.srcType)
        Misc_ActCmdDataStart(builder)
        if self.srcName is not None:
            Misc_ActCmdDataAddSrcName(builder, srcName)
        if self.srcType is not None:
            Misc_ActCmdDataAddSrcType(builder, srcType)
        Misc_ActCmdDataAddSrcLine(builder, self.srcLine)
        miscActCmdData = Misc_ActCmdDataEnd(builder)
        return miscActCmdData
