# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_AxsActValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsActValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState_AxsActValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State_AxsActValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsActValues
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsActValues
    def DistLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsActValues
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsActValues
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsActValues
    def Torque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def State_AxsActValuesStart(builder): builder.StartObject(5)
def Start(builder):
    return State_AxsActValuesStart(builder)
def State_AxsActValuesAddPos(builder, pos): builder.PrependFloat64Slot(0, pos, 0.0)
def AddPos(builder, pos):
    return State_AxsActValuesAddPos(builder, pos)
def State_AxsActValuesAddDistLeft(builder, distLeft): builder.PrependFloat64Slot(1, distLeft, 0.0)
def AddDistLeft(builder, distLeft):
    return State_AxsActValuesAddDistLeft(builder, distLeft)
def State_AxsActValuesAddVel(builder, vel): builder.PrependFloat64Slot(2, vel, 0.0)
def AddVel(builder, vel):
    return State_AxsActValuesAddVel(builder, vel)
def State_AxsActValuesAddAcc(builder, acc): builder.PrependFloat64Slot(3, acc, 0.0)
def AddAcc(builder, acc):
    return State_AxsActValuesAddAcc(builder, acc)
def State_AxsActValuesAddTorque(builder, torque): builder.PrependFloat64Slot(4, torque, 0.0)
def AddTorque(builder, torque):
    return State_AxsActValuesAddTorque(builder, torque)
def State_AxsActValuesEnd(builder): return builder.EndObject()
def End(builder):
    return State_AxsActValuesEnd(builder)

class State_AxsActValuesT(object):

    # State_AxsActValuesT
    def __init__(self):
        self.pos = 0.0  # type: float
        self.distLeft = 0.0  # type: float
        self.vel = 0.0  # type: float
        self.acc = 0.0  # type: float
        self.torque = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsActValues = State_AxsActValues()
        stateAxsActValues.Init(buf, pos)
        return cls.InitFromObj(stateAxsActValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateAxsActValues):
        x = State_AxsActValuesT()
        x._UnPack(stateAxsActValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pos == other.pos and \
            self.distLeft == other.distLeft and \
            self.vel == other.vel and \
            self.acc == other.acc and \
            self.torque == other.torque

    # State_AxsActValuesT
    def _UnPack(self, stateAxsActValues):
        if stateAxsActValues is None:
            return
        self.pos = stateAxsActValues.Pos()
        self.distLeft = stateAxsActValues.DistLeft()
        self.vel = stateAxsActValues.Vel()
        self.acc = stateAxsActValues.Acc()
        self.torque = stateAxsActValues.Torque()

    # State_AxsActValuesT
    def Pack(self, builder):
        State_AxsActValuesStart(builder)
        State_AxsActValuesAddPos(builder, self.pos)
        State_AxsActValuesAddDistLeft(builder, self.distLeft)
        State_AxsActValuesAddVel(builder, self.vel)
        State_AxsActValuesAddAcc(builder, self.acc)
        State_AxsActValuesAddTorque(builder, self.torque)
        stateAxsActValues = State_AxsActValuesEnd(builder)
        return stateAxsActValues
