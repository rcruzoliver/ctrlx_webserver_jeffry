# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# base parameters of the axis probe and axis probe abort command
class cmd_AxsProbeBase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = cmd_AxsProbeBase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAscmd_AxsProbeBase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # cmd_AxsProbeBase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # command base input
    # cmd_AxsProbeBase
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # probe trigger source
    # cmd_AxsProbeBase
    def TriggerSrc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # probe index
    # cmd_AxsProbeBase
    def ProbeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def cmd_AxsProbeBaseStart(builder): builder.StartObject(3)
def Start(builder):
    return cmd_AxsProbeBaseStart(builder)
def cmd_AxsProbeBaseAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return cmd_AxsProbeBaseAddBase(builder, base)
def cmd_AxsProbeBaseAddTriggerSrc(builder, triggerSrc): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(triggerSrc), 0)
def AddTriggerSrc(builder, triggerSrc):
    return cmd_AxsProbeBaseAddTriggerSrc(builder, triggerSrc)
def cmd_AxsProbeBaseAddProbeIndex(builder, probeIndex): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(probeIndex), 0)
def AddProbeIndex(builder, probeIndex):
    return cmd_AxsProbeBaseAddProbeIndex(builder, probeIndex)
def cmd_AxsProbeBaseEnd(builder): return builder.EndObject()
def End(builder):
    return cmd_AxsProbeBaseEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class cmd_AxsProbeBaseT(object):

    # cmd_AxsProbeBaseT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.triggerSrc = None  # type: str
        self.probeIndex = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsProbeBase = cmd_AxsProbeBase()
        cmdAxsProbeBase.Init(buf, pos)
        return cls.InitFromObj(cmdAxsProbeBase)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsProbeBase):
        x = cmd_AxsProbeBaseT()
        x._UnPack(cmdAxsProbeBase)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.triggerSrc == other.triggerSrc and \
            self.probeIndex == other.probeIndex

    # cmd_AxsProbeBaseT
    def _UnPack(self, cmdAxsProbeBase):
        if cmdAxsProbeBase is None:
            return
        if cmdAxsProbeBase.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsProbeBase.Base())
        self.triggerSrc = cmdAxsProbeBase.TriggerSrc()
        self.probeIndex = cmdAxsProbeBase.ProbeIndex()

    # cmd_AxsProbeBaseT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.triggerSrc is not None:
            triggerSrc = builder.CreateString(self.triggerSrc)
        if self.probeIndex is not None:
            probeIndex = builder.CreateString(self.probeIndex)
        cmd_AxsProbeBaseStart(builder)
        if self.base is not None:
            cmd_AxsProbeBaseAddBase(builder, base)
        if self.triggerSrc is not None:
            cmd_AxsProbeBaseAddTriggerSrc(builder, triggerSrc)
        if self.probeIndex is not None:
            cmd_AxsProbeBaseAddProbeIndex(builder, probeIndex)
        cmdAxsProbeBase = cmd_AxsProbeBaseEnd(builder)
        return cmdAxsProbeBase
