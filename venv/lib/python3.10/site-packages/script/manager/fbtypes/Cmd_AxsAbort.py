# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_AxsAbort(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_AxsAbort()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_AxsAbort(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_AxsAbort
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_AxsAbort
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_AxsAbort
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_AxsAbort
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Cmd_AxsAbortStart(builder): builder.StartObject(3)
def Start(builder):
    return Cmd_AxsAbortStart(builder)
def Cmd_AxsAbortAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def AddBase(builder, base):
    return Cmd_AxsAbortAddBase(builder, base)
def Cmd_AxsAbortAddDec(builder, dec): builder.PrependFloat64Slot(1, dec, 0.0)
def AddDec(builder, dec):
    return Cmd_AxsAbortAddDec(builder, dec)
def Cmd_AxsAbortAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(2, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return Cmd_AxsAbortAddJrkDec(builder, jrkDec)
def Cmd_AxsAbortEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_AxsAbortEnd(builder)
import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Cmd_AxsAbortT(object):

    # Cmd_AxsAbortT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.dec = 0.0  # type: float
        self.jrkDec = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdAxsAbort = Cmd_AxsAbort()
        cmdAxsAbort.Init(buf, pos)
        return cls.InitFromObj(cmdAxsAbort)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdAxsAbort):
        x = Cmd_AxsAbortT()
        x._UnPack(cmdAxsAbort)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.base == other.base and \
            self.dec == other.dec and \
            self.jrkDec == other.jrkDec

    # Cmd_AxsAbortT
    def _UnPack(self, cmdAxsAbort):
        if cmdAxsAbort is None:
            return
        if cmdAxsAbort.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdAxsAbort.Base())
        self.dec = cmdAxsAbort.Dec()
        self.jrkDec = cmdAxsAbort.JrkDec()

    # Cmd_AxsAbortT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        Cmd_AxsAbortStart(builder)
        if self.base is not None:
            Cmd_AxsAbortAddBase(builder, base)
        Cmd_AxsAbortAddDec(builder, self.dec)
        Cmd_AxsAbortAddJrkDec(builder, self.jrkDec)
        cmdAxsAbort = Cmd_AxsAbortEnd(builder)
        return cmdAxsAbort
