# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# One pair with value and meaning for the internal additional circle data (used for commanding)
class KinCmdCircleDataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdCircleDataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsKinCmdCircleDataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # KinCmdCircleDataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # one value of a circle data
    # KinCmdCircleDataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # related meaning of the value
    # KinCmdCircleDataPair
    def ExtMeaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.ExtCircleMeaning import ExtCircleMeaning
            obj = ExtCircleMeaning()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdCircleDataPairStart(builder): builder.StartObject(2)
def Start(builder):
    return KinCmdCircleDataPairStart(builder)
def KinCmdCircleDataPairAddValue(builder, value): builder.PrependFloat64Slot(0, value, 0.0)
def AddValue(builder, value):
    return KinCmdCircleDataPairAddValue(builder, value)
def KinCmdCircleDataPairAddExtMeaning(builder, extMeaning): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(extMeaning), 0)
def AddExtMeaning(builder, extMeaning):
    return KinCmdCircleDataPairAddExtMeaning(builder, extMeaning)
def KinCmdCircleDataPairEnd(builder): return builder.EndObject()
def End(builder):
    return KinCmdCircleDataPairEnd(builder)
import script.manager.fbtypes.ExtCircleMeaning
try:
    from typing import Optional
except:
    pass

class KinCmdCircleDataPairT(object):

    # KinCmdCircleDataPairT
    def __init__(self):
        self.value = 0.0  # type: float
        self.extMeaning = None  # type: Optional[script.manager.fbtypes.ExtCircleMeaning.ExtCircleMeaningT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdCircleDataPair = KinCmdCircleDataPair()
        kinCmdCircleDataPair.Init(buf, pos)
        return cls.InitFromObj(kinCmdCircleDataPair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, kinCmdCircleDataPair):
        x = KinCmdCircleDataPairT()
        x._UnPack(kinCmdCircleDataPair)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.value == other.value and \
            self.extMeaning == other.extMeaning

    # KinCmdCircleDataPairT
    def _UnPack(self, kinCmdCircleDataPair):
        if kinCmdCircleDataPair is None:
            return
        self.value = kinCmdCircleDataPair.Value()
        if kinCmdCircleDataPair.ExtMeaning() is not None:
            self.extMeaning = script.manager.fbtypes.ExtCircleMeaning.ExtCircleMeaningT.InitFromObj(kinCmdCircleDataPair.ExtMeaning())

    # KinCmdCircleDataPairT
    def Pack(self, builder):
        if self.extMeaning is not None:
            extMeaning = self.extMeaning.Pack(builder)
        KinCmdCircleDataPairStart(builder)
        KinCmdCircleDataPairAddValue(builder, self.value)
        if self.extMeaning is not None:
            KinCmdCircleDataPairAddExtMeaning(builder, extMeaning)
        kinCmdCircleDataPair = KinCmdCircleDataPairEnd(builder)
        return kinCmdCircleDataPair
