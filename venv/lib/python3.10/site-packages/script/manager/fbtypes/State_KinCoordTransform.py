# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_KinCoordTransform(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_KinCoordTransform()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState_KinCoordTransform(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State_KinCoordTransform
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_KinCoordTransform
    def ObjName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_KinCoordTransform
    def PosIn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # State_KinCoordTransform
    def PosInAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # State_KinCoordTransform
    def PosInLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # State_KinCoordTransform
    def PosInIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # State_KinCoordTransform
    def CoordSysIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State_KinCoordTransform
    def CoordSysOut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def State_KinCoordTransformStart(builder): builder.StartObject(4)
def Start(builder):
    return State_KinCoordTransformStart(builder)
def State_KinCoordTransformAddObjName(builder, objName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objName), 0)
def AddObjName(builder, objName):
    return State_KinCoordTransformAddObjName(builder, objName)
def State_KinCoordTransformAddPosIn(builder, posIn): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(posIn), 0)
def AddPosIn(builder, posIn):
    return State_KinCoordTransformAddPosIn(builder, posIn)
def State_KinCoordTransformStartPosInVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartPosInVector(builder, numElems):
    return State_KinCoordTransformStartPosInVector(builder, numElems)
def State_KinCoordTransformAddCoordSysIn(builder, coordSysIn): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(coordSysIn), 0)
def AddCoordSysIn(builder, coordSysIn):
    return State_KinCoordTransformAddCoordSysIn(builder, coordSysIn)
def State_KinCoordTransformAddCoordSysOut(builder, coordSysOut): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(coordSysOut), 0)
def AddCoordSysOut(builder, coordSysOut):
    return State_KinCoordTransformAddCoordSysOut(builder, coordSysOut)
def State_KinCoordTransformEnd(builder): return builder.EndObject()
def End(builder):
    return State_KinCoordTransformEnd(builder)
try:
    from typing import List
except:
    pass

class State_KinCoordTransformT(object):

    # State_KinCoordTransformT
    def __init__(self):
        self.objName = None  # type: str
        self.posIn = None  # type: List[float]
        self.coordSysIn = None  # type: str
        self.coordSysOut = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateKinCoordTransform = State_KinCoordTransform()
        stateKinCoordTransform.Init(buf, pos)
        return cls.InitFromObj(stateKinCoordTransform)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateKinCoordTransform):
        x = State_KinCoordTransformT()
        x._UnPack(stateKinCoordTransform)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.objName == other.objName and \
            self.posIn == other.posIn and \
            self.coordSysIn == other.coordSysIn and \
            self.coordSysOut == other.coordSysOut

    # State_KinCoordTransformT
    def _UnPack(self, stateKinCoordTransform):
        if stateKinCoordTransform is None:
            return
        self.objName = stateKinCoordTransform.ObjName()
        if not stateKinCoordTransform.PosInIsNone():
            if np is None:
                self.posIn = []
                for i in range(stateKinCoordTransform.PosInLength()):
                    self.posIn.append(stateKinCoordTransform.PosIn(i))
            else:
                self.posIn = stateKinCoordTransform.PosInAsNumpy()
        self.coordSysIn = stateKinCoordTransform.CoordSysIn()
        self.coordSysOut = stateKinCoordTransform.CoordSysOut()

    # State_KinCoordTransformT
    def Pack(self, builder):
        if self.objName is not None:
            objName = builder.CreateString(self.objName)
        if self.posIn is not None:
            if np is not None and type(self.posIn) is np.ndarray:
                posIn = builder.CreateNumpyVector(self.posIn)
            else:
                State_KinCoordTransformStartPosInVector(builder, len(self.posIn))
                for i in reversed(range(len(self.posIn))):
                    builder.PrependFloat64(self.posIn[i])
                posIn = builder.EndVector()
        if self.coordSysIn is not None:
            coordSysIn = builder.CreateString(self.coordSysIn)
        if self.coordSysOut is not None:
            coordSysOut = builder.CreateString(self.coordSysOut)
        State_KinCoordTransformStart(builder)
        if self.objName is not None:
            State_KinCoordTransformAddObjName(builder, objName)
        if self.posIn is not None:
            State_KinCoordTransformAddPosIn(builder, posIn)
        if self.coordSysIn is not None:
            State_KinCoordTransformAddCoordSysIn(builder, coordSysIn)
        if self.coordSysOut is not None:
            State_KinCoordTransformAddCoordSysOut(builder, coordSysOut)
        stateKinCoordTransform = State_KinCoordTransformEnd(builder)
        return stateKinCoordTransform
