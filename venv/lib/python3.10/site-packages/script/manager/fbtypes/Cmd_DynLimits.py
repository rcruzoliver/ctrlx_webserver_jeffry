# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_DynLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_DynLimits()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCmd_DynLimits(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cmd_DynLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_DynLimits
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cmd_DynLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def Cmd_DynLimitsStart(builder): builder.StartObject(5)
def Start(builder):
    return Cmd_DynLimitsStart(builder)
def Cmd_DynLimitsAddVel(builder, vel): builder.PrependFloat64Slot(0, vel, 0.0)
def AddVel(builder, vel):
    return Cmd_DynLimitsAddVel(builder, vel)
def Cmd_DynLimitsAddAcc(builder, acc): builder.PrependFloat64Slot(1, acc, 0.0)
def AddAcc(builder, acc):
    return Cmd_DynLimitsAddAcc(builder, acc)
def Cmd_DynLimitsAddDec(builder, dec): builder.PrependFloat64Slot(2, dec, 0.0)
def AddDec(builder, dec):
    return Cmd_DynLimitsAddDec(builder, dec)
def Cmd_DynLimitsAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(3, jrkAcc, 0.0)
def AddJrkAcc(builder, jrkAcc):
    return Cmd_DynLimitsAddJrkAcc(builder, jrkAcc)
def Cmd_DynLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(4, jrkDec, 0.0)
def AddJrkDec(builder, jrkDec):
    return Cmd_DynLimitsAddJrkDec(builder, jrkDec)
def Cmd_DynLimitsEnd(builder): return builder.EndObject()
def End(builder):
    return Cmd_DynLimitsEnd(builder)

class Cmd_DynLimitsT(object):

    # Cmd_DynLimitsT
    def __init__(self):
        self.vel = 0.0  # type: float
        self.acc = 0.0  # type: float
        self.dec = 0.0  # type: float
        self.jrkAcc = 0.0  # type: float
        self.jrkDec = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdDynLimits = Cmd_DynLimits()
        cmdDynLimits.Init(buf, pos)
        return cls.InitFromObj(cmdDynLimits)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cmdDynLimits):
        x = Cmd_DynLimitsT()
        x._UnPack(cmdDynLimits)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.vel == other.vel and \
            self.acc == other.acc and \
            self.dec == other.dec and \
            self.jrkAcc == other.jrkAcc and \
            self.jrkDec == other.jrkDec

    # Cmd_DynLimitsT
    def _UnPack(self, cmdDynLimits):
        if cmdDynLimits is None:
            return
        self.vel = cmdDynLimits.Vel()
        self.acc = cmdDynLimits.Acc()
        self.dec = cmdDynLimits.Dec()
        self.jrkAcc = cmdDynLimits.JrkAcc()
        self.jrkDec = cmdDynLimits.JrkDec()

    # Cmd_DynLimitsT
    def Pack(self, builder):
        Cmd_DynLimitsStart(builder)
        Cmd_DynLimitsAddVel(builder, self.vel)
        Cmd_DynLimitsAddAcc(builder, self.acc)
        Cmd_DynLimitsAddDec(builder, self.dec)
        Cmd_DynLimitsAddJrkAcc(builder, self.jrkAcc)
        Cmd_DynLimitsAddJrkDec(builder, self.jrkDec)
        cmdDynLimits = Cmd_DynLimitsEnd(builder)
        return cmdDynLimits
