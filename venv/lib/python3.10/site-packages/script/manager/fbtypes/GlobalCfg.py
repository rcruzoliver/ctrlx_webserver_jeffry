# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GlobalCfg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GlobalCfg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGlobalCfg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GlobalCfg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GlobalCfg
    def InitScript(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GlobalCfg
    def InitScriptParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GlobalCfg
    def InitScriptParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GlobalCfg
    def InitScriptParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def GlobalCfgStart(builder): builder.StartObject(2)
def Start(builder):
    return GlobalCfgStart(builder)
def GlobalCfgAddInitScript(builder, initScript): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initScript), 0)
def AddInitScript(builder, initScript):
    return GlobalCfgAddInitScript(builder, initScript)
def GlobalCfgAddInitScriptParam(builder, initScriptParam): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(initScriptParam), 0)
def AddInitScriptParam(builder, initScriptParam):
    return GlobalCfgAddInitScriptParam(builder, initScriptParam)
def GlobalCfgStartInitScriptParamVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInitScriptParamVector(builder, numElems):
    return GlobalCfgStartInitScriptParamVector(builder, numElems)
def GlobalCfgEnd(builder): return builder.EndObject()
def End(builder):
    return GlobalCfgEnd(builder)
try:
    from typing import List
except:
    pass

class GlobalCfgT(object):

    # GlobalCfgT
    def __init__(self):
        self.initScript = None  # type: str
        self.initScriptParam = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        globalCfg = GlobalCfg()
        globalCfg.Init(buf, pos)
        return cls.InitFromObj(globalCfg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, globalCfg):
        x = GlobalCfgT()
        x._UnPack(globalCfg)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.initScript == other.initScript and \
            self.initScriptParam == other.initScriptParam

    # GlobalCfgT
    def _UnPack(self, globalCfg):
        if globalCfg is None:
            return
        self.initScript = globalCfg.InitScript()
        if not globalCfg.InitScriptParamIsNone():
            self.initScriptParam = []
            for i in range(globalCfg.InitScriptParamLength()):
                self.initScriptParam.append(globalCfg.InitScriptParam(i))

    # GlobalCfgT
    def Pack(self, builder):
        if self.initScript is not None:
            initScript = builder.CreateString(self.initScript)
        if self.initScriptParam is not None:
            initScriptParamlist = []
            for i in range(len(self.initScriptParam)):
                initScriptParamlist.append(builder.CreateString(self.initScriptParam[i]))
            GlobalCfgStartInitScriptParamVector(builder, len(self.initScriptParam))
            for i in reversed(range(len(self.initScriptParam))):
                builder.PrependUOffsetTRelative(initScriptParamlist[i])
            initScriptParam = builder.EndVector()
        GlobalCfgStart(builder)
        if self.initScript is not None:
            GlobalCfgAddInitScript(builder, initScript)
        if self.initScriptParam is not None:
            GlobalCfgAddInitScriptParam(builder, initScriptParam)
        globalCfg = GlobalCfgEnd(builder)
        return globalCfg
