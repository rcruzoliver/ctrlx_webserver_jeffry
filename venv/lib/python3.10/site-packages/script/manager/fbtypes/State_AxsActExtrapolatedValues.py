# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_AxsActExtrapolatedValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsActExtrapolatedValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState_AxsActExtrapolatedValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # State_AxsActExtrapolatedValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsActExtrapolatedValues
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsActExtrapolatedValues
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsActExtrapolatedValues
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def State_AxsActExtrapolatedValuesStart(builder): builder.StartObject(3)
def Start(builder):
    return State_AxsActExtrapolatedValuesStart(builder)
def State_AxsActExtrapolatedValuesAddPos(builder, pos): builder.PrependFloat64Slot(0, pos, 0.0)
def AddPos(builder, pos):
    return State_AxsActExtrapolatedValuesAddPos(builder, pos)
def State_AxsActExtrapolatedValuesAddVel(builder, vel): builder.PrependFloat64Slot(1, vel, 0.0)
def AddVel(builder, vel):
    return State_AxsActExtrapolatedValuesAddVel(builder, vel)
def State_AxsActExtrapolatedValuesAddAcc(builder, acc): builder.PrependFloat64Slot(2, acc, 0.0)
def AddAcc(builder, acc):
    return State_AxsActExtrapolatedValuesAddAcc(builder, acc)
def State_AxsActExtrapolatedValuesEnd(builder): return builder.EndObject()
def End(builder):
    return State_AxsActExtrapolatedValuesEnd(builder)

class State_AxsActExtrapolatedValuesT(object):

    # State_AxsActExtrapolatedValuesT
    def __init__(self):
        self.pos = 0.0  # type: float
        self.vel = 0.0  # type: float
        self.acc = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsActExtrapolatedValues = State_AxsActExtrapolatedValues()
        stateAxsActExtrapolatedValues.Init(buf, pos)
        return cls.InitFromObj(stateAxsActExtrapolatedValues)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stateAxsActExtrapolatedValues):
        x = State_AxsActExtrapolatedValuesT()
        x._UnPack(stateAxsActExtrapolatedValues)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.pos == other.pos and \
            self.vel == other.vel and \
            self.acc == other.acc

    # State_AxsActExtrapolatedValuesT
    def _UnPack(self, stateAxsActExtrapolatedValues):
        if stateAxsActExtrapolatedValues is None:
            return
        self.pos = stateAxsActExtrapolatedValues.Pos()
        self.vel = stateAxsActExtrapolatedValues.Vel()
        self.acc = stateAxsActExtrapolatedValues.Acc()

    # State_AxsActExtrapolatedValuesT
    def Pack(self, builder):
        State_AxsActExtrapolatedValuesStart(builder)
        State_AxsActExtrapolatedValuesAddPos(builder, self.pos)
        State_AxsActExtrapolatedValuesAddVel(builder, self.vel)
        State_AxsActExtrapolatedValuesAddAcc(builder, self.acc)
        stateAxsActExtrapolatedValues = State_AxsActExtrapolatedValuesEnd(builder)
        return stateAxsActExtrapolatedValues
