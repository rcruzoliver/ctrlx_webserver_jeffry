# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CfgInitScript(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CfgInitScript()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCfgInitScript(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CfgInitScript
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CfgInitScript
    def File(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CfgInitScript
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CfgInitScript
    def Parameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CfgInitScript
    def ParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CfgInitScript
    def ParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CfgInitScriptStart(builder): builder.StartObject(3)
def Start(builder):
    return CfgInitScriptStart(builder)
def CfgInitScriptAddFile(builder, file): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(file), 0)
def AddFile(builder, file):
    return CfgInitScriptAddFile(builder, file)
def CfgInitScriptAddLanguage(builder, language): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(language), 0)
def AddLanguage(builder, language):
    return CfgInitScriptAddLanguage(builder, language)
def CfgInitScriptAddParameter(builder, parameter): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parameter), 0)
def AddParameter(builder, parameter):
    return CfgInitScriptAddParameter(builder, parameter)
def CfgInitScriptStartParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartParameterVector(builder, numElems):
    return CfgInitScriptStartParameterVector(builder, numElems)
def CfgInitScriptEnd(builder): return builder.EndObject()
def End(builder):
    return CfgInitScriptEnd(builder)
try:
    from typing import List
except:
    pass

class CfgInitScriptT(object):

    # CfgInitScriptT
    def __init__(self):
        self.file = None  # type: str
        self.language = None  # type: str
        self.parameter = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cfgInitScript = CfgInitScript()
        cfgInitScript.Init(buf, pos)
        return cls.InitFromObj(cfgInitScript)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cfgInitScript):
        x = CfgInitScriptT()
        x._UnPack(cfgInitScript)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.file == other.file and \
            self.language == other.language and \
            self.parameter == other.parameter

    # CfgInitScriptT
    def _UnPack(self, cfgInitScript):
        if cfgInitScript is None:
            return
        self.file = cfgInitScript.File()
        self.language = cfgInitScript.Language()
        if not cfgInitScript.ParameterIsNone():
            self.parameter = []
            for i in range(cfgInitScript.ParameterLength()):
                self.parameter.append(cfgInitScript.Parameter(i))

    # CfgInitScriptT
    def Pack(self, builder):
        if self.file is not None:
            file = builder.CreateString(self.file)
        if self.language is not None:
            language = builder.CreateString(self.language)
        if self.parameter is not None:
            parameterlist = []
            for i in range(len(self.parameter)):
                parameterlist.append(builder.CreateString(self.parameter[i]))
            CfgInitScriptStartParameterVector(builder, len(self.parameter))
            for i in reversed(range(len(self.parameter))):
                builder.PrependUOffsetTRelative(parameterlist[i])
            parameter = builder.EndVector()
        CfgInitScriptStart(builder)
        if self.file is not None:
            CfgInitScriptAddFile(builder, file)
        if self.language is not None:
            CfgInitScriptAddLanguage(builder, language)
        if self.parameter is not None:
            CfgInitScriptAddParameter(builder, parameter)
        cfgInitScript = CfgInitScriptEnd(builder)
        return cfgInitScript
