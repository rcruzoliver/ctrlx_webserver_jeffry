# automatically generated by the FlatBuffers compiler, do not modify

# namespace: packagemanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Release(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Release()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRelease(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Release
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Release
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Release
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ReleaseStart(builder): builder.StartObject(2)
def Start(builder):
    return ReleaseStart(builder)
def ReleaseAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def AddVersion(builder, version):
    return ReleaseAddVersion(builder, version)
def ReleaseAddLocation(builder, location): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def AddLocation(builder, location):
    return ReleaseAddLocation(builder, location)
def ReleaseEnd(builder): return builder.EndObject()
def End(builder):
    return ReleaseEnd(builder)

class ReleaseT(object):

    # ReleaseT
    def __init__(self):
        self.version = None  # type: str
        self.location = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        release = Release()
        release.Init(buf, pos)
        return cls.InitFromObj(release)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, release):
        x = ReleaseT()
        x._UnPack(release)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.version == other.version and \
            self.location == other.location

    # ReleaseT
    def _UnPack(self, release):
        if release is None:
            return
        self.version = release.Version()
        self.location = release.Location()

    # ReleaseT
    def Pack(self, builder):
        if self.version is not None:
            version = builder.CreateString(self.version)
        if self.location is not None:
            location = builder.CreateString(self.location)
        ReleaseStart(builder)
        if self.version is not None:
            ReleaseAddVersion(builder, version)
        if self.location is not None:
            ReleaseAddLocation(builder, location)
        release = ReleaseEnd(builder)
        return release
