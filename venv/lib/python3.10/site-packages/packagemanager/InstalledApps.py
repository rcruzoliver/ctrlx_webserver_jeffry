# automatically generated by the FlatBuffers compiler, do not modify

# namespace: packagemanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InstalledApps(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InstalledApps()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstalledApps(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InstalledApps
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InstalledApps
    def InstalledApps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from packagemanager.InstalledApp import InstalledApp
            obj = InstalledApp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InstalledApps
    def InstalledAppsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InstalledApps
    def InstalledAppsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def InstalledAppsStart(builder): builder.StartObject(1)
def Start(builder):
    return InstalledAppsStart(builder)
def InstalledAppsAddInstalledApps(builder, installedApps): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(installedApps), 0)
def AddInstalledApps(builder, installedApps):
    return InstalledAppsAddInstalledApps(builder, installedApps)
def InstalledAppsStartInstalledAppsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartInstalledAppsVector(builder, numElems):
    return InstalledAppsStartInstalledAppsVector(builder, numElems)
def InstalledAppsEnd(builder): return builder.EndObject()
def End(builder):
    return InstalledAppsEnd(builder)
import packagemanager.InstalledApp
try:
    from typing import List
except:
    pass

class InstalledAppsT(object):

    # InstalledAppsT
    def __init__(self):
        self.installedApps = None  # type: List[packagemanager.InstalledApp.InstalledAppT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        installedApps = InstalledApps()
        installedApps.Init(buf, pos)
        return cls.InitFromObj(installedApps)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, installedApps):
        x = InstalledAppsT()
        x._UnPack(installedApps)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.installedApps == other.installedApps

    # InstalledAppsT
    def _UnPack(self, installedApps):
        if installedApps is None:
            return
        if not installedApps.InstalledAppsIsNone():
            self.installedApps = []
            for i in range(installedApps.InstalledAppsLength()):
                if installedApps.InstalledApps(i) is None:
                    self.installedApps.append(None)
                else:
                    installedApp_ = packagemanager.InstalledApp.InstalledAppT.InitFromObj(installedApps.InstalledApps(i))
                    self.installedApps.append(installedApp_)

    # InstalledAppsT
    def Pack(self, builder):
        if self.installedApps is not None:
            installedAppslist = []
            for i in range(len(self.installedApps)):
                installedAppslist.append(self.installedApps[i].Pack(builder))
            InstalledAppsStartInstalledAppsVector(builder, len(self.installedApps))
            for i in reversed(range(len(self.installedApps))):
                builder.PrependUOffsetTRelative(installedAppslist[i])
            installedApps = builder.EndVector()
        InstalledAppsStart(builder)
        if self.installedApps is not None:
            InstalledAppsAddInstalledApps(builder, installedApps)
        installedApps = InstalledAppsEnd(builder)
        return installedApps
