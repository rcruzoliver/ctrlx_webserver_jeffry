# automatically generated by the FlatBuffers compiler, do not modify

# namespace: packagemanager

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InstalledApp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InstalledApp()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInstalledApp(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InstalledApp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InstalledApp
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Summary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Vendor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Link(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Installed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # InstalledApp
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def AppType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def UpdateBehavior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InstalledApp
    def Required(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # InstalledApp
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # InstalledApp
    def Release(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from packagemanager.Release import Release
            obj = Release()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def InstalledAppStart(builder): builder.StartObject(14)
def Start(builder):
    return InstalledAppStart(builder)
def InstalledAppAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return InstalledAppAddId(builder, id)
def InstalledAppAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return InstalledAppAddName(builder, name)
def InstalledAppAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def AddDescription(builder, description):
    return InstalledAppAddDescription(builder, description)
def InstalledAppAddSummary(builder, summary): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(summary), 0)
def AddSummary(builder, summary):
    return InstalledAppAddSummary(builder, summary)
def InstalledAppAddIcon(builder, icon): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)
def AddIcon(builder, icon):
    return InstalledAppAddIcon(builder, icon)
def InstalledAppAddVendor(builder, vendor): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(vendor), 0)
def AddVendor(builder, vendor):
    return InstalledAppAddVendor(builder, vendor)
def InstalledAppAddLink(builder, link): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(link), 0)
def AddLink(builder, link):
    return InstalledAppAddLink(builder, link)
def InstalledAppAddInstalled(builder, installed): builder.PrependBoolSlot(7, installed, 0)
def AddInstalled(builder, installed):
    return InstalledAppAddInstalled(builder, installed)
def InstalledAppAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def AddTitle(builder, title):
    return InstalledAppAddTitle(builder, title)
def InstalledAppAddAppType(builder, appType): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(appType), 0)
def AddAppType(builder, appType):
    return InstalledAppAddAppType(builder, appType)
def InstalledAppAddUpdateBehavior(builder, updateBehavior): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(updateBehavior), 0)
def AddUpdateBehavior(builder, updateBehavior):
    return InstalledAppAddUpdateBehavior(builder, updateBehavior)
def InstalledAppAddRequired(builder, required): builder.PrependBoolSlot(11, required, 0)
def AddRequired(builder, required):
    return InstalledAppAddRequired(builder, required)
def InstalledAppAddEnabled(builder, enabled): builder.PrependBoolSlot(12, enabled, 0)
def AddEnabled(builder, enabled):
    return InstalledAppAddEnabled(builder, enabled)
def InstalledAppAddRelease(builder, release): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(release), 0)
def AddRelease(builder, release):
    return InstalledAppAddRelease(builder, release)
def InstalledAppEnd(builder): return builder.EndObject()
def End(builder):
    return InstalledAppEnd(builder)
import packagemanager.Release
try:
    from typing import Optional
except:
    pass

class InstalledAppT(object):

    # InstalledAppT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.summary = None  # type: str
        self.icon = None  # type: str
        self.vendor = None  # type: str
        self.link = None  # type: str
        self.installed = False  # type: bool
        self.title = None  # type: str
        self.appType = None  # type: str
        self.updateBehavior = None  # type: str
        self.required = False  # type: bool
        self.enabled = False  # type: bool
        self.release = None  # type: Optional[packagemanager.Release.ReleaseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        installedApp = InstalledApp()
        installedApp.Init(buf, pos)
        return cls.InitFromObj(installedApp)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, installedApp):
        x = InstalledAppT()
        x._UnPack(installedApp)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.id == other.id and \
            self.name == other.name and \
            self.description == other.description and \
            self.summary == other.summary and \
            self.icon == other.icon and \
            self.vendor == other.vendor and \
            self.link == other.link and \
            self.installed == other.installed and \
            self.title == other.title and \
            self.appType == other.appType and \
            self.updateBehavior == other.updateBehavior and \
            self.required == other.required and \
            self.enabled == other.enabled and \
            self.release == other.release

    # InstalledAppT
    def _UnPack(self, installedApp):
        if installedApp is None:
            return
        self.id = installedApp.Id()
        self.name = installedApp.Name()
        self.description = installedApp.Description()
        self.summary = installedApp.Summary()
        self.icon = installedApp.Icon()
        self.vendor = installedApp.Vendor()
        self.link = installedApp.Link()
        self.installed = installedApp.Installed()
        self.title = installedApp.Title()
        self.appType = installedApp.AppType()
        self.updateBehavior = installedApp.UpdateBehavior()
        self.required = installedApp.Required()
        self.enabled = installedApp.Enabled()
        if installedApp.Release() is not None:
            self.release = packagemanager.Release.ReleaseT.InitFromObj(installedApp.Release())

    # InstalledAppT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.summary is not None:
            summary = builder.CreateString(self.summary)
        if self.icon is not None:
            icon = builder.CreateString(self.icon)
        if self.vendor is not None:
            vendor = builder.CreateString(self.vendor)
        if self.link is not None:
            link = builder.CreateString(self.link)
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.appType is not None:
            appType = builder.CreateString(self.appType)
        if self.updateBehavior is not None:
            updateBehavior = builder.CreateString(self.updateBehavior)
        if self.release is not None:
            release = self.release.Pack(builder)
        InstalledAppStart(builder)
        if self.id is not None:
            InstalledAppAddId(builder, id)
        if self.name is not None:
            InstalledAppAddName(builder, name)
        if self.description is not None:
            InstalledAppAddDescription(builder, description)
        if self.summary is not None:
            InstalledAppAddSummary(builder, summary)
        if self.icon is not None:
            InstalledAppAddIcon(builder, icon)
        if self.vendor is not None:
            InstalledAppAddVendor(builder, vendor)
        if self.link is not None:
            InstalledAppAddLink(builder, link)
        InstalledAppAddInstalled(builder, self.installed)
        if self.title is not None:
            InstalledAppAddTitle(builder, title)
        if self.appType is not None:
            InstalledAppAddAppType(builder, appType)
        if self.updateBehavior is not None:
            InstalledAppAddUpdateBehavior(builder, updateBehavior)
        InstalledAppAddRequired(builder, self.required)
        InstalledAppAddEnabled(builder, self.enabled)
        if self.release is not None:
            InstalledAppAddRelease(builder, release)
        installedApp = InstalledAppEnd(builder)
        return installedApp
