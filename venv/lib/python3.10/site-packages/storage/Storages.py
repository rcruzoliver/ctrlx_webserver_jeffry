# automatically generated by the FlatBuffers compiler, do not modify

# namespace: storage

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Storages(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Storages()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStorages(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Storages
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Storages
    def Storages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from storage.Storage import Storage
            obj = Storage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Storages
    def StoragesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Storages
    def StoragesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def StoragesStart(builder): builder.StartObject(1)
def Start(builder):
    return StoragesStart(builder)
def StoragesAddStorages(builder, storages): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storages), 0)
def AddStorages(builder, storages):
    return StoragesAddStorages(builder, storages)
def StoragesStartStoragesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStoragesVector(builder, numElems):
    return StoragesStartStoragesVector(builder, numElems)
def StoragesEnd(builder): return builder.EndObject()
def End(builder):
    return StoragesEnd(builder)
import storage.Storage
try:
    from typing import List
except:
    pass

class StoragesT(object):

    # StoragesT
    def __init__(self):
        self.storages = None  # type: List[storage.Storage.StorageT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        storages = Storages()
        storages.Init(buf, pos)
        return cls.InitFromObj(storages)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, storages):
        x = StoragesT()
        x._UnPack(storages)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.storages == other.storages

    # StoragesT
    def _UnPack(self, storages):
        if storages is None:
            return
        if not storages.StoragesIsNone():
            self.storages = []
            for i in range(storages.StoragesLength()):
                if storages.Storages(i) is None:
                    self.storages.append(None)
                else:
                    storage_ = storage.Storage.StorageT.InitFromObj(storages.Storages(i))
                    self.storages.append(storage_)

    # StoragesT
    def Pack(self, builder):
        if self.storages is not None:
            storageslist = []
            for i in range(len(self.storages)):
                storageslist.append(self.storages[i].Pack(builder))
            StoragesStartStoragesVector(builder, len(self.storages))
            for i in reversed(range(len(self.storages))):
                builder.PrependUOffsetTRelative(storageslist[i])
            storages = builder.EndVector()
        StoragesStart(builder)
        if self.storages is not None:
            StoragesAddStorages(builder, storages)
        storages = StoragesEnd(builder)
        return storages
