# automatically generated by the FlatBuffers compiler, do not modify

# namespace: storage

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Storage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Storage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStorage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Storage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Storage
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Storage
    def Used(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Storage
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def Uuid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def Mounted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Storage
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def Device(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def MountPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Storage
    def Parent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StorageStart(builder): builder.StartObject(9)
def Start(builder):
    return StorageStart(builder)
def StorageAddSize(builder, size): builder.PrependUint64Slot(0, size, 0)
def AddSize(builder, size):
    return StorageAddSize(builder, size)
def StorageAddUsed(builder, used): builder.PrependUint64Slot(1, used, 0)
def AddUsed(builder, used):
    return StorageAddUsed(builder, used)
def StorageAddLabel(builder, label): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)
def AddLabel(builder, label):
    return StorageAddLabel(builder, label)
def StorageAddUuid(builder, uuid): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(uuid), 0)
def AddUuid(builder, uuid):
    return StorageAddUuid(builder, uuid)
def StorageAddMounted(builder, mounted): builder.PrependBoolSlot(4, mounted, 0)
def AddMounted(builder, mounted):
    return StorageAddMounted(builder, mounted)
def StorageAddFormat(builder, format): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(format), 0)
def AddFormat(builder, format):
    return StorageAddFormat(builder, format)
def StorageAddDevice(builder, device): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(device), 0)
def AddDevice(builder, device):
    return StorageAddDevice(builder, device)
def StorageAddMountPoint(builder, mountPoint): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mountPoint), 0)
def AddMountPoint(builder, mountPoint):
    return StorageAddMountPoint(builder, mountPoint)
def StorageAddParent(builder, parent): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(parent), 0)
def AddParent(builder, parent):
    return StorageAddParent(builder, parent)
def StorageEnd(builder): return builder.EndObject()
def End(builder):
    return StorageEnd(builder)

class StorageT(object):

    # StorageT
    def __init__(self):
        self.size = 0  # type: int
        self.used = 0  # type: int
        self.label = None  # type: str
        self.uuid = None  # type: str
        self.mounted = False  # type: bool
        self.format = None  # type: str
        self.device = None  # type: str
        self.mountPoint = None  # type: str
        self.parent = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        storage = Storage()
        storage.Init(buf, pos)
        return cls.InitFromObj(storage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, storage):
        x = StorageT()
        x._UnPack(storage)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.size == other.size and \
            self.used == other.used and \
            self.label == other.label and \
            self.uuid == other.uuid and \
            self.mounted == other.mounted and \
            self.format == other.format and \
            self.device == other.device and \
            self.mountPoint == other.mountPoint and \
            self.parent == other.parent

    # StorageT
    def _UnPack(self, storage):
        if storage is None:
            return
        self.size = storage.Size()
        self.used = storage.Used()
        self.label = storage.Label()
        self.uuid = storage.Uuid()
        self.mounted = storage.Mounted()
        self.format = storage.Format()
        self.device = storage.Device()
        self.mountPoint = storage.MountPoint()
        self.parent = storage.Parent()

    # StorageT
    def Pack(self, builder):
        if self.label is not None:
            label = builder.CreateString(self.label)
        if self.uuid is not None:
            uuid = builder.CreateString(self.uuid)
        if self.format is not None:
            format = builder.CreateString(self.format)
        if self.device is not None:
            device = builder.CreateString(self.device)
        if self.mountPoint is not None:
            mountPoint = builder.CreateString(self.mountPoint)
        if self.parent is not None:
            parent = builder.CreateString(self.parent)
        StorageStart(builder)
        StorageAddSize(builder, self.size)
        StorageAddUsed(builder, self.used)
        if self.label is not None:
            StorageAddLabel(builder, label)
        if self.uuid is not None:
            StorageAddUuid(builder, uuid)
        StorageAddMounted(builder, self.mounted)
        if self.format is not None:
            StorageAddFormat(builder, format)
        if self.device is not None:
            StorageAddDevice(builder, device)
        if self.mountPoint is not None:
            StorageAddMountPoint(builder, mountPoint)
        if self.parent is not None:
            StorageAddParent(builder, parent)
        storage = StorageEnd(builder)
        return storage
