# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Stats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Stats()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStats(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Stats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Stats
    def Sse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from web.automation.StatsSSE import StatsSSE
            obj = StatsSSE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stats
    def DlClient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from web.automation.StatsDlClient import StatsDlClient
            obj = StatsDlClient()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stats
    def Restbed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from web.automation.StatsRestbed import StatsRestbed
            obj = StatsRestbed()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Stats
    def RequestsV1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Stats
    def RequestsV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def StatsStart(builder): builder.StartObject(5)
def Start(builder):
    return StatsStart(builder)
def StatsAddSse(builder, sse): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sse), 0)
def AddSse(builder, sse):
    return StatsAddSse(builder, sse)
def StatsAddDlClient(builder, dlClient): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dlClient), 0)
def AddDlClient(builder, dlClient):
    return StatsAddDlClient(builder, dlClient)
def StatsAddRestbed(builder, restbed): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(restbed), 0)
def AddRestbed(builder, restbed):
    return StatsAddRestbed(builder, restbed)
def StatsAddRequestsV1(builder, requestsV1): builder.PrependUint32Slot(3, requestsV1, 0)
def AddRequestsV1(builder, requestsV1):
    return StatsAddRequestsV1(builder, requestsV1)
def StatsAddRequestsV2(builder, requestsV2): builder.PrependUint32Slot(4, requestsV2, 0)
def AddRequestsV2(builder, requestsV2):
    return StatsAddRequestsV2(builder, requestsV2)
def StatsEnd(builder): return builder.EndObject()
def End(builder):
    return StatsEnd(builder)
import web.automation.StatsDlClient
import web.automation.StatsRestbed
import web.automation.StatsSSE
try:
    from typing import Optional
except:
    pass

class StatsT(object):

    # StatsT
    def __init__(self):
        self.sse = None  # type: Optional[web.automation.StatsSSE.StatsSSET]
        self.dlClient = None  # type: Optional[web.automation.StatsDlClient.StatsDlClientT]
        self.restbed = None  # type: Optional[web.automation.StatsRestbed.StatsRestbedT]
        self.requestsV1 = 0  # type: int
        self.requestsV2 = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stats = Stats()
        stats.Init(buf, pos)
        return cls.InitFromObj(stats)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stats):
        x = StatsT()
        x._UnPack(stats)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.sse == other.sse and \
            self.dlClient == other.dlClient and \
            self.restbed == other.restbed and \
            self.requestsV1 == other.requestsV1 and \
            self.requestsV2 == other.requestsV2

    # StatsT
    def _UnPack(self, stats):
        if stats is None:
            return
        if stats.Sse() is not None:
            self.sse = web.automation.StatsSSE.StatsSSET.InitFromObj(stats.Sse())
        if stats.DlClient() is not None:
            self.dlClient = web.automation.StatsDlClient.StatsDlClientT.InitFromObj(stats.DlClient())
        if stats.Restbed() is not None:
            self.restbed = web.automation.StatsRestbed.StatsRestbedT.InitFromObj(stats.Restbed())
        self.requestsV1 = stats.RequestsV1()
        self.requestsV2 = stats.RequestsV2()

    # StatsT
    def Pack(self, builder):
        if self.sse is not None:
            sse = self.sse.Pack(builder)
        if self.dlClient is not None:
            dlClient = self.dlClient.Pack(builder)
        if self.restbed is not None:
            restbed = self.restbed.Pack(builder)
        StatsStart(builder)
        if self.sse is not None:
            StatsAddSse(builder, sse)
        if self.dlClient is not None:
            StatsAddDlClient(builder, dlClient)
        if self.restbed is not None:
            StatsAddRestbed(builder, restbed)
        StatsAddRequestsV1(builder, self.requestsV1)
        StatsAddRequestsV2(builder, self.requestsV2)
        stats = StatsEnd(builder)
        return stats
