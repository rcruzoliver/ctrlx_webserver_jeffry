# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatsRestbed(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatsRestbed()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatsRestbed(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatsRestbed
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatsRestbed
    def OpenSessions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def StatsRestbedStart(builder): builder.StartObject(1)
def Start(builder):
    return StatsRestbedStart(builder)
def StatsRestbedAddOpenSessions(builder, openSessions): builder.PrependUint32Slot(0, openSessions, 0)
def AddOpenSessions(builder, openSessions):
    return StatsRestbedAddOpenSessions(builder, openSessions)
def StatsRestbedEnd(builder): return builder.EndObject()
def End(builder):
    return StatsRestbedEnd(builder)

class StatsRestbedT(object):

    # StatsRestbedT
    def __init__(self):
        self.openSessions = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statsRestbed = StatsRestbed()
        statsRestbed.Init(buf, pos)
        return cls.InitFromObj(statsRestbed)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statsRestbed):
        x = StatsRestbedT()
        x._UnPack(statsRestbed)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.openSessions == other.openSessions

    # StatsRestbedT
    def _UnPack(self, statsRestbed):
        if statsRestbed is None:
            return
        self.openSessions = statsRestbed.OpenSessions()

    # StatsRestbedT
    def Pack(self, builder):
        StatsRestbedStart(builder)
        StatsRestbedAddOpenSessions(builder, self.openSessions)
        statsRestbed = StatsRestbedEnd(builder)
        return statsRestbed
