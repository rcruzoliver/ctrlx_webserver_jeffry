# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StatsDlClient(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StatsDlClient()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatsDlClient(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StatsDlClient
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatsDlClient
    def Converter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def StatsDlClientStart(builder): builder.StartObject(1)
def Start(builder):
    return StatsDlClientStart(builder)
def StatsDlClientAddConverter(builder, converter): builder.PrependUint32Slot(0, converter, 0)
def AddConverter(builder, converter):
    return StatsDlClientAddConverter(builder, converter)
def StatsDlClientEnd(builder): return builder.EndObject()
def End(builder):
    return StatsDlClientEnd(builder)

class StatsDlClientT(object):

    # StatsDlClientT
    def __init__(self):
        self.converter = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statsDlClient = StatsDlClient()
        statsDlClient.Init(buf, pos)
        return cls.InitFromObj(statsDlClient)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statsDlClient):
        x = StatsDlClientT()
        x._UnPack(statsDlClient)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.converter == other.converter

    # StatsDlClientT
    def _UnPack(self, statsDlClient):
        if statsDlClient is None:
            return
        self.converter = statsDlClient.Converter()

    # StatsDlClientT
    def Pack(self, builder):
        StatsDlClientStart(builder)
        StatsDlClientAddConverter(builder, self.converter)
        statsDlClient = StatsDlClientEnd(builder)
        return statsDlClient
