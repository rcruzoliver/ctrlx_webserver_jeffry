# automatically generated by the FlatBuffers compiler, do not modify

# namespace: automation

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Settings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Settings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSettings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Settings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Timeout for datalayer request of webserver in milliseconds
    # Settings
    def Timeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 3000

    # Maximum allowed size of JSON object for input data
    # Settings
    def MaxJsonInput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1048576

    # Maximum flatbuffer size converted to a JSON object
    # Settings
    def MaxFlatbufferToJson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1048576

def SettingsStart(builder): builder.StartObject(3)
def Start(builder):
    return SettingsStart(builder)
def SettingsAddTimeout(builder, timeout): builder.PrependUint32Slot(0, timeout, 3000)
def AddTimeout(builder, timeout):
    return SettingsAddTimeout(builder, timeout)
def SettingsAddMaxJsonInput(builder, maxJsonInput): builder.PrependUint32Slot(1, maxJsonInput, 1048576)
def AddMaxJsonInput(builder, maxJsonInput):
    return SettingsAddMaxJsonInput(builder, maxJsonInput)
def SettingsAddMaxFlatbufferToJson(builder, maxFlatbufferToJson): builder.PrependUint32Slot(2, maxFlatbufferToJson, 1048576)
def AddMaxFlatbufferToJson(builder, maxFlatbufferToJson):
    return SettingsAddMaxFlatbufferToJson(builder, maxFlatbufferToJson)
def SettingsEnd(builder): return builder.EndObject()
def End(builder):
    return SettingsEnd(builder)

class SettingsT(object):

    # SettingsT
    def __init__(self):
        self.timeout = 3000  # type: int
        self.maxJsonInput = 1048576  # type: int
        self.maxFlatbufferToJson = 1048576  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        settings = Settings()
        settings.Init(buf, pos)
        return cls.InitFromObj(settings)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, settings):
        x = SettingsT()
        x._UnPack(settings)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.timeout == other.timeout and \
            self.maxJsonInput == other.maxJsonInput and \
            self.maxFlatbufferToJson == other.maxFlatbufferToJson

    # SettingsT
    def _UnPack(self, settings):
        if settings is None:
            return
        self.timeout = settings.Timeout()
        self.maxJsonInput = settings.MaxJsonInput()
        self.maxFlatbufferToJson = settings.MaxFlatbufferToJson()

    # SettingsT
    def Pack(self, builder):
        SettingsStart(builder)
        SettingsAddTimeout(builder, self.timeout)
        SettingsAddMaxJsonInput(builder, self.maxJsonInput)
        SettingsAddMaxFlatbufferToJson(builder, self.maxFlatbufferToJson)
        settings = SettingsEnd(builder)
        return settings
